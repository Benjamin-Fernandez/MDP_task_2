
MDP_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001030c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010b4  080104a0  080104a0  000114a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011554  08011554  000131dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011554  08011554  00012554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801155c  0801155c  000131dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801155c  0801155c  0001255c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011560  08011560  00012560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08011564  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000131dc  2**0
                  CONTENTS
 10 .bss          000054f4  200001dc  200001dc  000131dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200056d0  200056d0  000131dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000131dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f552  00000000  00000000  0001320c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f45  00000000  00000000  0003275e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b40  00000000  00000000  000366a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001560  00000000  00000000  000381e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000526d  00000000  00000000  00039748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f07f  00000000  00000000  0003e9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7cfe  00000000  00000000  0005da34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145732  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085dc  00000000  00000000  00145778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  0014dd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010484 	.word	0x08010484

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08010484 	.word	0x08010484

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <MotorDrive_enable>:
void ir_dist(void *argument);
void transmit(void *argument);
void encoder_diff(void *argument);

/* USER CODE BEGIN PFP */
void MotorDrive_enable(void){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000f98:	2108      	movs	r1, #8
 8000f9a:	4808      	ldr	r0, [pc, #32]	@ (8000fbc <MotorDrive_enable+0x28>)
 8000f9c:	f006 ffd2 	bl	8007f44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000fa0:	210c      	movs	r1, #12
 8000fa2:	4806      	ldr	r0, [pc, #24]	@ (8000fbc <MotorDrive_enable+0x28>)
 8000fa4:	f006 ffce 	bl	8007f44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <MotorDrive_enable+0x2c>)
 8000fac:	f006 ffca 	bl	8007f44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	4803      	ldr	r0, [pc, #12]	@ (8000fc0 <MotorDrive_enable+0x2c>)
 8000fb4:	f006 ffc6 	bl	8007f44 <HAL_TIM_PWM_Start>
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200003b4 	.word	0x200003b4
 8000fc0:	20000444 	.word	0x20000444

08000fc4 <MotorStop_both>:

void MotorStop_both(void){
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_1, 0);
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <MotorStop_both+0x30>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare(&htim9, TIM_CHANNEL_2, 0);
 8000fd0:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MotorStop_both+0x30>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 0);
 8000fd8:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <MotorStop_both+0x34>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_4, 0);
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <MotorStop_both+0x34>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000444 	.word	0x20000444
 8000ff8:	200003b4 	.word	0x200003b4

08000ffc <setPID>:
	int integral;
	int pid_change;
	int pwm_output;
} PID_Controller;

void setPID(PID_Controller *pid, float Kp, float Ki, float Kd, int pwm_output){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6178      	str	r0, [r7, #20]
 8001004:	ed87 0a04 	vstr	s0, [r7, #16]
 8001008:	edc7 0a03 	vstr	s1, [r7, #12]
 800100c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001010:	6079      	str	r1, [r7, #4]
	pid->Kp = Kp;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	609a      	str	r2, [r3, #8]
	pid->pwm_output = pwm_output;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	619a      	str	r2, [r3, #24]
}
 800102a:	bf00      	nop
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103c:	f003 fbbc 	bl	80047b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001040:	f000 f8b8 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001044:	f000 fcf4 	bl	8001a30 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001048:	f000 fadc 	bl	8001604 <MX_TIM4_Init>
  MX_TIM2_Init();
 800104c:	f000 fa32 	bl	80014b4 <MX_TIM2_Init>
  MX_TIM12_Init();
 8001050:	f000 fc3c 	bl	80018cc <MX_TIM12_Init>
  MX_TIM3_Init();
 8001054:	f000 fa82 	bl	800155c <MX_TIM3_Init>
  MX_TIM9_Init();
 8001058:	f000 fbca 	bl	80017f0 <MX_TIM9_Init>
  MX_TIM1_Init();
 800105c:	f000 f9da 	bl	8001414 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001060:	f000 fb52 	bl	8001708 <MX_TIM8_Init>
  MX_TIM14_Init();
 8001064:	f000 fc96 	bl	8001994 <MX_TIM14_Init>
  MX_I2C2_Init();
 8001068:	f000 f9a6 	bl	80013b8 <MX_I2C2_Init>
  MX_ADC1_Init();
 800106c:	f000 f900 	bl	8001270 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001070:	f000 f950 	bl	8001314 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8001074:	f000 fcb2 	bl	80019dc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8001078:	f00c faa8 	bl	800d5cc <OLED_Init>
  HAL_UART_Receive_IT(&huart3, &uart_byte, 1);
 800107c:	2201      	movs	r2, #1
 800107e:	492d      	ldr	r1, [pc, #180]	@ (8001134 <main+0xfc>)
 8001080:	482d      	ldr	r0, [pc, #180]	@ (8001138 <main+0x100>)
 8001082:	f008 fb72 	bl	800976a <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001086:	f009 fb45 	bl	800a714 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800108a:	4a2c      	ldr	r2, [pc, #176]	@ (800113c <main+0x104>)
 800108c:	2100      	movs	r1, #0
 800108e:	482c      	ldr	r0, [pc, #176]	@ (8001140 <main+0x108>)
 8001090:	f009 fb8a 	bl	800a7a8 <osThreadNew>
 8001094:	4603      	mov	r3, r0
 8001096:	4a2b      	ldr	r2, [pc, #172]	@ (8001144 <main+0x10c>)
 8001098:	6013      	str	r3, [r2, #0]

  /* creation of ShowTask */
  ShowTaskHandle = osThreadNew(show, NULL, &ShowTask_attributes);
 800109a:	4a2b      	ldr	r2, [pc, #172]	@ (8001148 <main+0x110>)
 800109c:	2100      	movs	r1, #0
 800109e:	482b      	ldr	r0, [pc, #172]	@ (800114c <main+0x114>)
 80010a0:	f009 fb82 	bl	800a7a8 <osThreadNew>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a2a      	ldr	r2, [pc, #168]	@ (8001150 <main+0x118>)
 80010a8:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motors, NULL, &MotorTask_attributes);
 80010aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001154 <main+0x11c>)
 80010ac:	2100      	movs	r1, #0
 80010ae:	482a      	ldr	r0, [pc, #168]	@ (8001158 <main+0x120>)
 80010b0:	f009 fb7a 	bl	800a7a8 <osThreadNew>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4a29      	ldr	r2, [pc, #164]	@ (800115c <main+0x124>)
 80010b8:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder, NULL, &EncoderTask_attributes);
 80010ba:	4a29      	ldr	r2, [pc, #164]	@ (8001160 <main+0x128>)
 80010bc:	2100      	movs	r1, #0
 80010be:	4829      	ldr	r0, [pc, #164]	@ (8001164 <main+0x12c>)
 80010c0:	f009 fb72 	bl	800a7a8 <osThreadNew>
 80010c4:	4603      	mov	r3, r0
 80010c6:	4a28      	ldr	r2, [pc, #160]	@ (8001168 <main+0x130>)
 80010c8:	6013      	str	r3, [r2, #0]

  /* creation of EncoderBTask */
  EncoderBTaskHandle = osThreadNew(encoder_B, NULL, &EncoderBTask_attributes);
 80010ca:	4a28      	ldr	r2, [pc, #160]	@ (800116c <main+0x134>)
 80010cc:	2100      	movs	r1, #0
 80010ce:	4828      	ldr	r0, [pc, #160]	@ (8001170 <main+0x138>)
 80010d0:	f009 fb6a 	bl	800a7a8 <osThreadNew>
 80010d4:	4603      	mov	r3, r0
 80010d6:	4a27      	ldr	r2, [pc, #156]	@ (8001174 <main+0x13c>)
 80010d8:	6013      	str	r3, [r2, #0]

  /* creation of UltrasonicSenso */
  UltrasonicSensoHandle = osThreadNew(ultra_sensor, NULL, &UltrasonicSenso_attributes);
 80010da:	4a27      	ldr	r2, [pc, #156]	@ (8001178 <main+0x140>)
 80010dc:	2100      	movs	r1, #0
 80010de:	4827      	ldr	r0, [pc, #156]	@ (800117c <main+0x144>)
 80010e0:	f009 fb62 	bl	800a7a8 <osThreadNew>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4a26      	ldr	r2, [pc, #152]	@ (8001180 <main+0x148>)
 80010e8:	6013      	str	r3, [r2, #0]

  /* creation of sensorTask */
  sensorTaskHandle = osThreadNew(sensor_reading, NULL, &sensorTask_attributes);
 80010ea:	4a26      	ldr	r2, [pc, #152]	@ (8001184 <main+0x14c>)
 80010ec:	2100      	movs	r1, #0
 80010ee:	4826      	ldr	r0, [pc, #152]	@ (8001188 <main+0x150>)
 80010f0:	f009 fb5a 	bl	800a7a8 <osThreadNew>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a25      	ldr	r2, [pc, #148]	@ (800118c <main+0x154>)
 80010f8:	6013      	str	r3, [r2, #0]

  /* creation of IRDistTask */
  IRDistTaskHandle = osThreadNew(ir_dist, NULL, &IRDistTask_attributes);
 80010fa:	4a25      	ldr	r2, [pc, #148]	@ (8001190 <main+0x158>)
 80010fc:	2100      	movs	r1, #0
 80010fe:	4825      	ldr	r0, [pc, #148]	@ (8001194 <main+0x15c>)
 8001100:	f009 fb52 	bl	800a7a8 <osThreadNew>
 8001104:	4603      	mov	r3, r0
 8001106:	4a24      	ldr	r2, [pc, #144]	@ (8001198 <main+0x160>)
 8001108:	6013      	str	r3, [r2, #0]

  /* creation of transmitTask */
  transmitTaskHandle = osThreadNew(transmit, NULL, &transmitTask_attributes);
 800110a:	4a24      	ldr	r2, [pc, #144]	@ (800119c <main+0x164>)
 800110c:	2100      	movs	r1, #0
 800110e:	4824      	ldr	r0, [pc, #144]	@ (80011a0 <main+0x168>)
 8001110:	f009 fb4a 	bl	800a7a8 <osThreadNew>
 8001114:	4603      	mov	r3, r0
 8001116:	4a23      	ldr	r2, [pc, #140]	@ (80011a4 <main+0x16c>)
 8001118:	6013      	str	r3, [r2, #0]

  /* creation of encoderDiffTask */
  encoderDiffTaskHandle = osThreadNew(encoder_diff, NULL, &encoderDiffTask_attributes);
 800111a:	4a23      	ldr	r2, [pc, #140]	@ (80011a8 <main+0x170>)
 800111c:	2100      	movs	r1, #0
 800111e:	4823      	ldr	r0, [pc, #140]	@ (80011ac <main+0x174>)
 8001120:	f009 fb42 	bl	800a7a8 <osThreadNew>
 8001124:	4603      	mov	r3, r0
 8001126:	4a22      	ldr	r2, [pc, #136]	@ (80011b0 <main+0x178>)
 8001128:	6013      	str	r3, [r2, #0]
  /* add events, ... */

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800112a:	f009 fb17 	bl	800a75c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800112e:	bf00      	nop
 8001130:	e7fd      	b.n	800112e <main+0xf6>
 8001132:	bf00      	nop
 8001134:	20000620 	.word	0x20000620
 8001138:	2000051c 	.word	0x2000051c
 800113c:	080105fc 	.word	0x080105fc
 8001140:	0800318d 	.word	0x0800318d
 8001144:	20000564 	.word	0x20000564
 8001148:	08010620 	.word	0x08010620
 800114c:	080031b1 	.word	0x080031b1
 8001150:	20000568 	.word	0x20000568
 8001154:	08010644 	.word	0x08010644
 8001158:	0800326d 	.word	0x0800326d
 800115c:	2000056c 	.word	0x2000056c
 8001160:	08010668 	.word	0x08010668
 8001164:	0800353d 	.word	0x0800353d
 8001168:	20000570 	.word	0x20000570
 800116c:	0801068c 	.word	0x0801068c
 8001170:	080036f9 	.word	0x080036f9
 8001174:	20000574 	.word	0x20000574
 8001178:	080106b0 	.word	0x080106b0
 800117c:	080038e1 	.word	0x080038e1
 8001180:	20000578 	.word	0x20000578
 8001184:	080106d4 	.word	0x080106d4
 8001188:	080039bd 	.word	0x080039bd
 800118c:	2000057c 	.word	0x2000057c
 8001190:	080106f8 	.word	0x080106f8
 8001194:	08003bd9 	.word	0x08003bd9
 8001198:	20000580 	.word	0x20000580
 800119c:	0801071c 	.word	0x0801071c
 80011a0:	08003d49 	.word	0x08003d49
 80011a4:	20000584 	.word	0x20000584
 80011a8:	08010740 	.word	0x08010740
 80011ac:	08003d5d 	.word	0x08003d5d
 80011b0:	20000588 	.word	0x20000588

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b094      	sub	sp, #80	@ 0x50
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	2230      	movs	r2, #48	@ 0x30
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00d f80d 	bl	800e1e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <SystemClock_Config+0xb4>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	4a21      	ldr	r2, [pc, #132]	@ (8001268 <SystemClock_Config+0xb4>)
 80011e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001268 <SystemClock_Config+0xb4>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f4:	2300      	movs	r3, #0
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	4b1c      	ldr	r3, [pc, #112]	@ (800126c <SystemClock_Config+0xb8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a1b      	ldr	r2, [pc, #108]	@ (800126c <SystemClock_Config+0xb8>)
 80011fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b19      	ldr	r3, [pc, #100]	@ (800126c <SystemClock_Config+0xb8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001210:	2302      	movs	r3, #2
 8001212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001214:	2301      	movs	r3, #1
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001218:	2310      	movs	r3, #16
 800121a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800121c:	2300      	movs	r3, #0
 800121e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001220:	f107 0320 	add.w	r3, r7, #32
 8001224:	4618      	mov	r0, r3
 8001226:	f006 f881 	bl	800732c <HAL_RCC_OscConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001230:	f002 fdc6 	bl	8003dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001234:	230f      	movs	r3, #15
 8001236:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f006 fae4 	bl	800781c <HAL_RCC_ClockConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800125a:	f002 fdb1 	bl	8003dc0 <Error_Handler>
  }
}
 800125e:	bf00      	nop
 8001260:	3750      	adds	r7, #80	@ 0x50
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40007000 	.word	0x40007000

08001270 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001276:	463b      	mov	r3, r7
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001282:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <MX_ADC1_Init+0x98>)
 8001284:	4a21      	ldr	r2, [pc, #132]	@ (800130c <MX_ADC1_Init+0x9c>)
 8001286:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001288:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <MX_ADC1_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800128e:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <MX_ADC1_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001294:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_ADC1_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800129a:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_ADC1_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <MX_ADC1_Init+0x98>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a8:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <MX_ADC1_Init+0x98>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ae:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <MX_ADC1_Init+0x98>)
 80012b0:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <MX_ADC1_Init+0xa0>)
 80012b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_ADC1_Init+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012ba:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <MX_ADC1_Init+0x98>)
 80012bc:	2201      	movs	r2, #1
 80012be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012c0:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_ADC1_Init+0x98>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_ADC1_Init+0x98>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ce:	480e      	ldr	r0, [pc, #56]	@ (8001308 <MX_ADC1_Init+0x98>)
 80012d0:	f003 fad8 	bl	8004884 <HAL_ADC_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012da:	f002 fd71 	bl	8003dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012de:	2302      	movs	r3, #2
 80012e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	@ (8001308 <MX_ADC1_Init+0x98>)
 80012f0:	f003 fcaa 	bl	8004c48 <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012fa:	f002 fd61 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200001f8 	.word	0x200001f8
 800130c:	40012000 	.word	0x40012000
 8001310:	0f000001 	.word	0x0f000001

08001314 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001326:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <MX_ADC2_Init+0x98>)
 8001328:	4a21      	ldr	r2, [pc, #132]	@ (80013b0 <MX_ADC2_Init+0x9c>)
 800132a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800132c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ac <MX_ADC2_Init+0x98>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001332:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <MX_ADC2_Init+0x98>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001338:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <MX_ADC2_Init+0x98>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800133e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <MX_ADC2_Init+0x98>)
 8001340:	2200      	movs	r2, #0
 8001342:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001344:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <MX_ADC2_Init+0x98>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800134c:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <MX_ADC2_Init+0x98>)
 800134e:	2200      	movs	r2, #0
 8001350:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <MX_ADC2_Init+0x98>)
 8001354:	4a17      	ldr	r2, [pc, #92]	@ (80013b4 <MX_ADC2_Init+0xa0>)
 8001356:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <MX_ADC2_Init+0x98>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800135e:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <MX_ADC2_Init+0x98>)
 8001360:	2201      	movs	r2, #1
 8001362:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_ADC2_Init+0x98>)
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_ADC2_Init+0x98>)
 800136e:	2201      	movs	r2, #1
 8001370:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001372:	480e      	ldr	r0, [pc, #56]	@ (80013ac <MX_ADC2_Init+0x98>)
 8001374:	f003 fa86 	bl	8004884 <HAL_ADC_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800137e:	f002 fd1f 	bl	8003dc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001382:	2303      	movs	r3, #3
 8001384:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001386:	2301      	movs	r3, #1
 8001388:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <MX_ADC2_Init+0x98>)
 8001394:	f003 fc58 	bl	8004c48 <HAL_ADC_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800139e:	f002 fd0f 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000240 	.word	0x20000240
 80013b0:	40012100 	.word	0x40012100
 80013b4:	0f000001 	.word	0x0f000001

080013b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013be:	4a13      	ldr	r2, [pc, #76]	@ (800140c <MX_I2C2_Init+0x54>)
 80013c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013c4:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <MX_I2C2_Init+0x58>)
 80013c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e8:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	@ (8001408 <MX_I2C2_Init+0x50>)
 80013f6:	f004 fa9d 	bl	8005934 <HAL_I2C_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001400:	f002 fcde 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000288 	.word	0x20000288
 800140c:	40005800 	.word	0x40005800
 8001410:	00061a80 	.word	0x00061a80

08001414 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001428:	463b      	mov	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001430:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <MX_TIM1_Init+0x98>)
 8001432:	4a1f      	ldr	r2, [pc, #124]	@ (80014b0 <MX_TIM1_Init+0x9c>)
 8001434:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <MX_TIM1_Init+0x98>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <MX_TIM1_Init+0x98>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 8001442:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <MX_TIM1_Init+0x98>)
 8001444:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001448:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <MX_TIM1_Init+0x98>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001450:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <MX_TIM1_Init+0x98>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <MX_TIM1_Init+0x98>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800145c:	4813      	ldr	r0, [pc, #76]	@ (80014ac <MX_TIM1_Init+0x98>)
 800145e:	f006 fbef 	bl	8007c40 <HAL_TIM_Base_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001468:	f002 fcaa 	bl	8003dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001470:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001472:	f107 0308 	add.w	r3, r7, #8
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	@ (80014ac <MX_TIM1_Init+0x98>)
 800147a:	f007 faa1 	bl	80089c0 <HAL_TIM_ConfigClockSource>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001484:	f002 fc9c 	bl	8003dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001490:	463b      	mov	r3, r7
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_TIM1_Init+0x98>)
 8001496:	f007 fffd 	bl	8009494 <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014a0:	f002 fc8e 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200002dc 	.word	0x200002dc
 80014b0:	40010000 	.word	0x40010000

080014b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	@ 0x30
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	2224      	movs	r2, #36	@ 0x24
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f00c fe8d 	bl	800e1e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014d0:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <MX_TIM2_Init+0xa4>)
 80014d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <MX_TIM2_Init+0xa4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <MX_TIM2_Init+0xa4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <MX_TIM2_Init+0xa4>)
 80014e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <MX_TIM2_Init+0xa4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f2:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <MX_TIM2_Init+0xa4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014f8:	2303      	movs	r3, #3
 80014fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001500:	2301      	movs	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001508:	230a      	movs	r3, #10
 800150a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001510:	2301      	movs	r3, #1
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001518:	230a      	movs	r3, #10
 800151a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	480d      	ldr	r0, [pc, #52]	@ (8001558 <MX_TIM2_Init+0xa4>)
 8001524:	f006 ff58 	bl	80083d8 <HAL_TIM_Encoder_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800152e:	f002 fc47 	bl	8003dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <MX_TIM2_Init+0xa4>)
 8001540:	f007 ffa8 	bl	8009494 <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800154a:	f002 fc39 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3730      	adds	r7, #48	@ 0x30
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000324 	.word	0x20000324

0800155c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	@ 0x30
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	2224      	movs	r2, #36	@ 0x24
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f00c fe39 	bl	800e1e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001578:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <MX_TIM3_Init+0xa0>)
 800157a:	4a21      	ldr	r2, [pc, #132]	@ (8001600 <MX_TIM3_Init+0xa4>)
 800157c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800157e:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <MX_TIM3_Init+0xa0>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b1d      	ldr	r3, [pc, #116]	@ (80015fc <MX_TIM3_Init+0xa0>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800158a:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <MX_TIM3_Init+0xa0>)
 800158c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001590:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <MX_TIM3_Init+0xa0>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001598:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <MX_TIM3_Init+0xa0>)
 800159a:	2280      	movs	r2, #128	@ 0x80
 800159c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800159e:	2303      	movs	r3, #3
 80015a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015a6:	2301      	movs	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80015ae:	230a      	movs	r3, #10
 80015b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015b6:	2301      	movs	r3, #1
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80015be:	230a      	movs	r3, #10
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	@ (80015fc <MX_TIM3_Init+0xa0>)
 80015ca:	f006 ff05 	bl	80083d8 <HAL_TIM_Encoder_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015d4:	f002 fbf4 	bl	8003dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_TIM3_Init+0xa0>)
 80015e6:	f007 ff55 	bl	8009494 <HAL_TIMEx_MasterConfigSynchronization>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80015f0:	f002 fbe6 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3730      	adds	r7, #48	@ 0x30
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	2000036c 	.word	0x2000036c
 8001600:	40000400 	.word	0x40000400

08001604 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08e      	sub	sp, #56	@ 0x38
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001634:	4b32      	ldr	r3, [pc, #200]	@ (8001700 <MX_TIM4_Init+0xfc>)
 8001636:	4a33      	ldr	r2, [pc, #204]	@ (8001704 <MX_TIM4_Init+0x100>)
 8001638:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <MX_TIM4_Init+0xfc>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <MX_TIM4_Init+0xfc>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 8001646:	4b2e      	ldr	r3, [pc, #184]	@ (8001700 <MX_TIM4_Init+0xfc>)
 8001648:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800164c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164e:	4b2c      	ldr	r3, [pc, #176]	@ (8001700 <MX_TIM4_Init+0xfc>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <MX_TIM4_Init+0xfc>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800165a:	4829      	ldr	r0, [pc, #164]	@ (8001700 <MX_TIM4_Init+0xfc>)
 800165c:	f006 faf0 	bl	8007c40 <HAL_TIM_Base_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001666:	f002 fbab 	bl	8003dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001670:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001674:	4619      	mov	r1, r3
 8001676:	4822      	ldr	r0, [pc, #136]	@ (8001700 <MX_TIM4_Init+0xfc>)
 8001678:	f007 f9a2 	bl	80089c0 <HAL_TIM_ConfigClockSource>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001682:	f002 fb9d 	bl	8003dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001686:	481e      	ldr	r0, [pc, #120]	@ (8001700 <MX_TIM4_Init+0xfc>)
 8001688:	f006 fc02 	bl	8007e90 <HAL_TIM_PWM_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001692:	f002 fb95 	bl	8003dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800169e:	f107 0320 	add.w	r3, r7, #32
 80016a2:	4619      	mov	r1, r3
 80016a4:	4816      	ldr	r0, [pc, #88]	@ (8001700 <MX_TIM4_Init+0xfc>)
 80016a6:	f007 fef5 	bl	8009494 <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80016b0:	f002 fb86 	bl	8003dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b4:	2360      	movs	r3, #96	@ 0x60
 80016b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016bc:	2302      	movs	r3, #2
 80016be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2208      	movs	r2, #8
 80016c8:	4619      	mov	r1, r3
 80016ca:	480d      	ldr	r0, [pc, #52]	@ (8001700 <MX_TIM4_Init+0xfc>)
 80016cc:	f007 f8b6 	bl	800883c <HAL_TIM_PWM_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80016d6:	f002 fb73 	bl	8003dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	220c      	movs	r2, #12
 80016de:	4619      	mov	r1, r3
 80016e0:	4807      	ldr	r0, [pc, #28]	@ (8001700 <MX_TIM4_Init+0xfc>)
 80016e2:	f007 f8ab 	bl	800883c <HAL_TIM_PWM_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80016ec:	f002 fb68 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016f0:	4803      	ldr	r0, [pc, #12]	@ (8001700 <MX_TIM4_Init+0xfc>)
 80016f2:	f002 fdcf 	bl	8004294 <HAL_TIM_MspPostInit>

}
 80016f6:	bf00      	nop
 80016f8:	3738      	adds	r7, #56	@ 0x38
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200003b4 	.word	0x200003b4
 8001704:	40000800 	.word	0x40000800

08001708 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170e:	f107 0318 	add.w	r3, r7, #24
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001726:	463b      	mov	r3, r7
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001732:	4b2d      	ldr	r3, [pc, #180]	@ (80017e8 <MX_TIM8_Init+0xe0>)
 8001734:	4a2d      	ldr	r2, [pc, #180]	@ (80017ec <MX_TIM8_Init+0xe4>)
 8001736:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 8001738:	4b2b      	ldr	r3, [pc, #172]	@ (80017e8 <MX_TIM8_Init+0xe0>)
 800173a:	220f      	movs	r2, #15
 800173c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173e:	4b2a      	ldr	r3, [pc, #168]	@ (80017e8 <MX_TIM8_Init+0xe0>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001744:	4b28      	ldr	r3, [pc, #160]	@ (80017e8 <MX_TIM8_Init+0xe0>)
 8001746:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800174a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174c:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <MX_TIM8_Init+0xe0>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001752:	4b25      	ldr	r3, [pc, #148]	@ (80017e8 <MX_TIM8_Init+0xe0>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001758:	4b23      	ldr	r3, [pc, #140]	@ (80017e8 <MX_TIM8_Init+0xe0>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800175e:	4822      	ldr	r0, [pc, #136]	@ (80017e8 <MX_TIM8_Init+0xe0>)
 8001760:	f006 fa6e 	bl	8007c40 <HAL_TIM_Base_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800176a:	f002 fb29 	bl	8003dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001772:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001774:	f107 0318 	add.w	r3, r7, #24
 8001778:	4619      	mov	r1, r3
 800177a:	481b      	ldr	r0, [pc, #108]	@ (80017e8 <MX_TIM8_Init+0xe0>)
 800177c:	f007 f920 	bl	80089c0 <HAL_TIM_ConfigClockSource>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001786:	f002 fb1b 	bl	8003dc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800178a:	4817      	ldr	r0, [pc, #92]	@ (80017e8 <MX_TIM8_Init+0xe0>)
 800178c:	f006 fca2 	bl	80080d4 <HAL_TIM_IC_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8001796:	f002 fb13 	bl	8003dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	4619      	mov	r1, r3
 80017a8:	480f      	ldr	r0, [pc, #60]	@ (80017e8 <MX_TIM8_Init+0xe0>)
 80017aa:	f007 fe73 	bl	8009494 <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 80017b4:	f002 fb04 	bl	8003dc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80017b8:	230a      	movs	r3, #10
 80017ba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017bc:	2301      	movs	r3, #1
 80017be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80017c8:	463b      	mov	r3, r7
 80017ca:	2204      	movs	r2, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <MX_TIM8_Init+0xe0>)
 80017d0:	f006 ff98 	bl	8008704 <HAL_TIM_IC_ConfigChannel>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80017da:	f002 faf1 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	@ 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200003fc 	.word	0x200003fc
 80017ec:	40010400 	.word	0x40010400

080017f0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	@ 0x30
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f6:	f107 0320 	add.w	r3, r7, #32
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]
 8001812:	615a      	str	r2, [r3, #20]
 8001814:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001816:	4b2b      	ldr	r3, [pc, #172]	@ (80018c4 <MX_TIM9_Init+0xd4>)
 8001818:	4a2b      	ldr	r2, [pc, #172]	@ (80018c8 <MX_TIM9_Init+0xd8>)
 800181a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800181c:	4b29      	ldr	r3, [pc, #164]	@ (80018c4 <MX_TIM9_Init+0xd4>)
 800181e:	2200      	movs	r2, #0
 8001820:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001822:	4b28      	ldr	r3, [pc, #160]	@ (80018c4 <MX_TIM9_Init+0xd4>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 7199;
 8001828:	4b26      	ldr	r3, [pc, #152]	@ (80018c4 <MX_TIM9_Init+0xd4>)
 800182a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800182e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001830:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <MX_TIM9_Init+0xd4>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001836:	4b23      	ldr	r3, [pc, #140]	@ (80018c4 <MX_TIM9_Init+0xd4>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800183c:	4821      	ldr	r0, [pc, #132]	@ (80018c4 <MX_TIM9_Init+0xd4>)
 800183e:	f006 f9ff 	bl	8007c40 <HAL_TIM_Base_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001848:	f002 faba 	bl	8003dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001850:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	4619      	mov	r1, r3
 8001858:	481a      	ldr	r0, [pc, #104]	@ (80018c4 <MX_TIM9_Init+0xd4>)
 800185a:	f007 f8b1 	bl	80089c0 <HAL_TIM_ConfigClockSource>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001864:	f002 faac 	bl	8003dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001868:	4816      	ldr	r0, [pc, #88]	@ (80018c4 <MX_TIM9_Init+0xd4>)
 800186a:	f006 fb11 	bl	8007e90 <HAL_TIM_PWM_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001874:	f002 faa4 	bl	8003dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001878:	2360      	movs	r3, #96	@ 0x60
 800187a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001880:	2302      	movs	r3, #2
 8001882:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2200      	movs	r2, #0
 800188c:	4619      	mov	r1, r3
 800188e:	480d      	ldr	r0, [pc, #52]	@ (80018c4 <MX_TIM9_Init+0xd4>)
 8001890:	f006 ffd4 	bl	800883c <HAL_TIM_PWM_ConfigChannel>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800189a:	f002 fa91 	bl	8003dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	2204      	movs	r2, #4
 80018a2:	4619      	mov	r1, r3
 80018a4:	4807      	ldr	r0, [pc, #28]	@ (80018c4 <MX_TIM9_Init+0xd4>)
 80018a6:	f006 ffc9 	bl	800883c <HAL_TIM_PWM_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM9_Init+0xc4>
  {
    Error_Handler();
 80018b0:	f002 fa86 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80018b4:	4803      	ldr	r0, [pc, #12]	@ (80018c4 <MX_TIM9_Init+0xd4>)
 80018b6:	f002 fced 	bl	8004294 <HAL_TIM_MspPostInit>

}
 80018ba:	bf00      	nop
 80018bc:	3730      	adds	r7, #48	@ 0x30
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000444 	.word	0x20000444
 80018c8:	40014000 	.word	0x40014000

080018cc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	@ 0x30
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0320 	add.w	r3, r7, #32
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	615a      	str	r2, [r3, #20]
 80018f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80018f2:	4b26      	ldr	r3, [pc, #152]	@ (800198c <MX_TIM12_Init+0xc0>)
 80018f4:	4a26      	ldr	r2, [pc, #152]	@ (8001990 <MX_TIM12_Init+0xc4>)
 80018f6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 320;
 80018f8:	4b24      	ldr	r3, [pc, #144]	@ (800198c <MX_TIM12_Init+0xc0>)
 80018fa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80018fe:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001900:	4b22      	ldr	r3, [pc, #136]	@ (800198c <MX_TIM12_Init+0xc0>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8001906:	4b21      	ldr	r3, [pc, #132]	@ (800198c <MX_TIM12_Init+0xc0>)
 8001908:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800190c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190e:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <MX_TIM12_Init+0xc0>)
 8001910:	2200      	movs	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001914:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <MX_TIM12_Init+0xc0>)
 8001916:	2280      	movs	r2, #128	@ 0x80
 8001918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800191a:	481c      	ldr	r0, [pc, #112]	@ (800198c <MX_TIM12_Init+0xc0>)
 800191c:	f006 f990 	bl	8007c40 <HAL_TIM_Base_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8001926:	f002 fa4b 	bl	8003dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800192e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001930:	f107 0320 	add.w	r3, r7, #32
 8001934:	4619      	mov	r1, r3
 8001936:	4815      	ldr	r0, [pc, #84]	@ (800198c <MX_TIM12_Init+0xc0>)
 8001938:	f007 f842 	bl	80089c0 <HAL_TIM_ConfigClockSource>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 8001942:	f002 fa3d 	bl	8003dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001946:	4811      	ldr	r0, [pc, #68]	@ (800198c <MX_TIM12_Init+0xc0>)
 8001948:	f006 faa2 	bl	8007e90 <HAL_TIM_PWM_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001952:	f002 fa35 	bl	8003dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001956:	2360      	movs	r3, #96	@ 0x60
 8001958:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2200      	movs	r2, #0
 800196a:	4619      	mov	r1, r3
 800196c:	4807      	ldr	r0, [pc, #28]	@ (800198c <MX_TIM12_Init+0xc0>)
 800196e:	f006 ff65 	bl	800883c <HAL_TIM_PWM_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8001978:	f002 fa22 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800197c:	4803      	ldr	r0, [pc, #12]	@ (800198c <MX_TIM12_Init+0xc0>)
 800197e:	f002 fc89 	bl	8004294 <HAL_TIM_MspPostInit>

}
 8001982:	bf00      	nop
 8001984:	3730      	adds	r7, #48	@ 0x30
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000048c 	.word	0x2000048c
 8001990:	40001800 	.word	0x40001800

08001994 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001998:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <MX_TIM14_Init+0x40>)
 800199a:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <MX_TIM14_Init+0x44>)
 800199c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 800199e:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <MX_TIM14_Init+0x40>)
 80019a0:	220f      	movs	r2, #15
 80019a2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <MX_TIM14_Init+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80019aa:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <MX_TIM14_Init+0x40>)
 80019ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019b0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <MX_TIM14_Init+0x40>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <MX_TIM14_Init+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <MX_TIM14_Init+0x40>)
 80019c0:	f006 f93e 	bl	8007c40 <HAL_TIM_Base_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80019ca:	f002 f9f9 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200004d4 	.word	0x200004d4
 80019d8:	40002000 	.word	0x40002000

080019dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <MX_USART3_UART_Init+0x4c>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <MX_USART3_UART_Init+0x50>)
 80019e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019e6:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <MX_USART3_UART_Init+0x4c>)
 80019e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <MX_USART3_UART_Init+0x4c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <MX_USART3_UART_Init+0x4c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <MX_USART3_UART_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <MX_USART3_UART_Init+0x4c>)
 8001a02:	220c      	movs	r2, #12
 8001a04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <MX_USART3_UART_Init+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <MX_USART3_UART_Init+0x4c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a12:	4805      	ldr	r0, [pc, #20]	@ (8001a28 <MX_USART3_UART_Init+0x4c>)
 8001a14:	f007 fdce 	bl	80095b4 <HAL_UART_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a1e:	f002 f9cf 	bl	8003dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000051c 	.word	0x2000051c
 8001a2c:	40004800 	.word	0x40004800

08001a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	@ 0x28
 8001a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b54      	ldr	r3, [pc, #336]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a53      	ldr	r2, [pc, #332]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001a50:	f043 0310 	orr.w	r3, r3, #16
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b51      	ldr	r3, [pc, #324]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b4d      	ldr	r3, [pc, #308]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a4c      	ldr	r2, [pc, #304]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b4a      	ldr	r3, [pc, #296]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b46      	ldr	r3, [pc, #280]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	4a45      	ldr	r2, [pc, #276]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8e:	4b43      	ldr	r3, [pc, #268]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a3e      	ldr	r2, [pc, #248]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4b38      	ldr	r3, [pc, #224]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a37      	ldr	r2, [pc, #220]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b35      	ldr	r3, [pc, #212]	@ (8001b9c <MX_GPIO_Init+0x16c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ad8:	4831      	ldr	r0, [pc, #196]	@ (8001ba0 <MX_GPIO_Init+0x170>)
 8001ada:	f003 fef7 	bl	80058cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_DC_Pin|OLED_RES_Pin|OLED_SDA_Pin|OLED_SCL_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8001ae4:	482f      	ldr	r0, [pc, #188]	@ (8001ba4 <MX_GPIO_Init+0x174>)
 8001ae6:	f003 fef1 	bl	80058cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001af0:	482d      	ldr	r0, [pc, #180]	@ (8001ba8 <MX_GPIO_Init+0x178>)
 8001af2:	f003 feeb 	bl	80058cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001afc:	482b      	ldr	r0, [pc, #172]	@ (8001bac <MX_GPIO_Init+0x17c>)
 8001afe:	f003 fee5 	bl	80058cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8001b02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4821      	ldr	r0, [pc, #132]	@ (8001ba0 <MX_GPIO_Init+0x170>)
 8001b1c:	f003 fc26 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_DC_Pin OLED_RES_Pin OLED_SDA_Pin OLED_SCL_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_RES_Pin|OLED_SDA_Pin|OLED_SCL_Pin;
 8001b20:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	481a      	ldr	r0, [pc, #104]	@ (8001ba4 <MX_GPIO_Init+0x174>)
 8001b3a:	f003 fc17 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4814      	ldr	r0, [pc, #80]	@ (8001ba8 <MX_GPIO_Init+0x178>)
 8001b58:	f003 fc08 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	480d      	ldr	r0, [pc, #52]	@ (8001bac <MX_GPIO_Init+0x17c>)
 8001b76:	f003 fbf9 	bl	800536c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4804      	ldr	r0, [pc, #16]	@ (8001ba0 <MX_GPIO_Init+0x170>)
 8001b8e:	f003 fbed 	bl	800536c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b92:	bf00      	nop
 8001b94:	3728      	adds	r7, #40	@ 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40020c00 	.word	0x40020c00
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	40020000 	.word	0x40020000

08001bb0 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint16_t us){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&htim14);
 8001bba:	4809      	ldr	r0, [pc, #36]	@ (8001be0 <delay_us+0x30>)
 8001bbc:	f006 f890 	bl	8007ce0 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001bc0:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <delay_us+0x30>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	625a      	str	r2, [r3, #36]	@ 0x24

	while(__HAL_TIM_GET_COUNTER(&htim14) < us);
 8001bc8:	bf00      	nop
 8001bca:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <delay_us+0x30>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d3f9      	bcc.n	8001bca <delay_us+0x1a>
}
 8001bd6:	bf00      	nop
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200004d4 	.word	0x200004d4

08001be4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

	if(htim==&htim8){
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a1e      	ldr	r2, [pc, #120]	@ (8001c68 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d135      	bne.n	8001c60 <HAL_TIM_IC_CaptureCallback+0x7c>
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){	//If pin on high, means positive edge
 8001bf4:	2180      	movs	r1, #128	@ 0x80
 8001bf6:	481d      	ldr	r0, [pc, #116]	@ (8001c6c <HAL_TIM_IC_CaptureCallback+0x88>)
 8001bf8:	f003 fe50 	bl	800589c <HAL_GPIO_ReadPin>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d108      	bne.n	8001c14 <HAL_TIM_IC_CaptureCallback+0x30>
			tc1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);	//Retrive value and store in tc1
 8001c02:	2104      	movs	r1, #4
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f006 ffa3 	bl	8008b50 <HAL_TIM_ReadCapturedValue>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001c10:	601a      	str	r2, [r3, #0]
				us_echo = (65536-tc1)+tc2;
			}
		}

	}
}
 8001c12:	e025      	b.n	8001c60 <HAL_TIM_IC_CaptureCallback+0x7c>
		} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET){	//If pin on low means negative edge
 8001c14:	2180      	movs	r1, #128	@ 0x80
 8001c16:	4815      	ldr	r0, [pc, #84]	@ (8001c6c <HAL_TIM_IC_CaptureCallback+0x88>)
 8001c18:	f003 fe40 	bl	800589c <HAL_GPIO_ReadPin>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d11e      	bne.n	8001c60 <HAL_TIM_IC_CaptureCallback+0x7c>
			tc2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);	//Retrive val and store in tc2
 8001c22:	2104      	movs	r1, #4
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f006 ff93 	bl	8008b50 <HAL_TIM_ReadCapturedValue>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001c30:	601a      	str	r2, [r3, #0]
			if (tc2 > tc1){
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	dd07      	ble.n	8001c4e <HAL_TIM_IC_CaptureCallback+0x6a>
				us_echo = tc2-tc1;		//Calculate the differnce = width of pulse
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	4a0b      	ldr	r2, [pc, #44]	@ (8001c78 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	e008      	b.n	8001c60 <HAL_TIM_IC_CaptureCallback+0x7c>
				us_echo = (65536-tc1)+tc2;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8001c56:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a06      	ldr	r2, [pc, #24]	@ (8001c78 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200003fc 	.word	0x200003fc
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	200005c0 	.word	0x200005c0
 8001c74:	200005c4 	.word	0x200005c4
 8001c78:	200005b8 	.word	0x200005b8

08001c7c <Motor_direction_both>:


void Motor_direction_both(uint8_t forward) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
	if (forward){// move forward
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d008      	beq.n	8001c9e <Motor_direction_both+0x22>
		__HAL_TIM_SetCompare(&htim9,TIM_CHANNEL_1,0); // set IN1 to maximum PWM (7199) for '1'
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <Motor_direction_both+0x40>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2200      	movs	r2, #0
 8001c92:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,0);
 8001c94:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <Motor_direction_both+0x44>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
	  }
	else { // reverse
		__HAL_TIM_SetCompare(&htim9,TIM_CHANNEL_2,0); // set IN2 to maximum PWM (7199) for '1'
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0);
	}
}
 8001c9c:	e007      	b.n	8001cae <Motor_direction_both+0x32>
		__HAL_TIM_SetCompare(&htim9,TIM_CHANNEL_2,0); // set IN2 to maximum PWM (7199) for '1'
 8001c9e:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <Motor_direction_both+0x40>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,0);
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <Motor_direction_both+0x44>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2200      	movs	r2, #0
 8001cac:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000444 	.word	0x20000444
 8001cc0:	200003b4 	.word	0x200003b4

08001cc4 <display_if_changed>:

void display_if_changed(const char* msg)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
    if (strcmp(last_oled_msg, msg) != 0) {
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	480a      	ldr	r0, [pc, #40]	@ (8001cf8 <display_if_changed+0x34>)
 8001cd0:	f7fe fa7e 	bl	80001d0 <strcmp>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <display_if_changed+0x2a>
//        OLED_Clear();
        OLED_ShowString(5, 45, msg); //last row
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	212d      	movs	r1, #45	@ 0x2d
 8001cde:	2005      	movs	r0, #5
 8001ce0:	f00b fc42 	bl	800d568 <OLED_ShowString>
        strncpy(last_oled_msg, msg, sizeof(last_oled_msg));
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4803      	ldr	r0, [pc, #12]	@ (8001cf8 <display_if_changed+0x34>)
 8001cea:	f00c fa94 	bl	800e216 <strncpy>
    }
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000668 	.word	0x20000668

08001cfc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b096      	sub	sp, #88	@ 0x58
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3){
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a70      	ldr	r2, [pc, #448]	@ (8001ecc <HAL_UART_RxCpltCallback+0x1d0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	f040 80d9 	bne.w	8001ec2 <HAL_UART_RxCpltCallback+0x1c6>
        switch (uart_byte){
 8001d10:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed0 <HAL_UART_RxCpltCallback+0x1d4>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b0a      	cmp	r3, #10
 8001d16:	f040 80b9 	bne.w	8001e8c <HAL_UART_RxCpltCallback+0x190>
            case '\n':
                uart_rx_buffer[uart_index] = '\0';
 8001d1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b6d      	ldr	r3, [pc, #436]	@ (8001ed8 <HAL_UART_RxCpltCallback+0x1dc>)
 8001d22:	2100      	movs	r1, #0
 8001d24:	5499      	strb	r1, [r3, r2]
                strncpy(instruction, uart_rx_buffer, sizeof(instruction));
 8001d26:	2220      	movs	r2, #32
 8001d28:	496b      	ldr	r1, [pc, #428]	@ (8001ed8 <HAL_UART_RxCpltCallback+0x1dc>)
 8001d2a:	486c      	ldr	r0, [pc, #432]	@ (8001edc <HAL_UART_RxCpltCallback+0x1e0>)
 8001d2c:	f00c fa73 	bl	800e216 <strncpy>
                uart_index = 0;
 8001d30:	4b68      	ldr	r3, [pc, #416]	@ (8001ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]

                // -------- CHECK FOR IR COMMAND FIRST (Don't set have_instruction) --------
                if (instruction[0] == 'I') {
 8001d36:	4b69      	ldr	r3, [pc, #420]	@ (8001edc <HAL_UART_RxCpltCallback+0x1e0>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b49      	cmp	r3, #73	@ 0x49
 8001d3c:	d131      	bne.n	8001da2 <HAL_UART_RxCpltCallback+0xa6>
                    // IR sensor read: "IL" for left, "IR" for right
                    char ir_response[32];
                    if (instruction[1] == 'L') {
 8001d3e:	4b67      	ldr	r3, [pc, #412]	@ (8001edc <HAL_UART_RxCpltCallback+0x1e0>)
 8001d40:	785b      	ldrb	r3, [r3, #1]
 8001d42:	2b4c      	cmp	r3, #76	@ 0x4c
 8001d44:	d108      	bne.n	8001d58 <HAL_UART_RxCpltCallback+0x5c>
                        sprintf(ir_response, "IR_LEFT:%d\r\n", ir_dist_left_int);
 8001d46:	4b66      	ldr	r3, [pc, #408]	@ (8001ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	f107 0308 	add.w	r3, r7, #8
 8001d4e:	4965      	ldr	r1, [pc, #404]	@ (8001ee4 <HAL_UART_RxCpltCallback+0x1e8>)
 8001d50:	4618      	mov	r0, r3
 8001d52:	f00c f9e1 	bl	800e118 <siprintf>
 8001d56:	e015      	b.n	8001d84 <HAL_UART_RxCpltCallback+0x88>
                    } else if (instruction[1] == 'R') {
 8001d58:	4b60      	ldr	r3, [pc, #384]	@ (8001edc <HAL_UART_RxCpltCallback+0x1e0>)
 8001d5a:	785b      	ldrb	r3, [r3, #1]
 8001d5c:	2b52      	cmp	r3, #82	@ 0x52
 8001d5e:	d108      	bne.n	8001d72 <HAL_UART_RxCpltCallback+0x76>
                        sprintf(ir_response, "IR_RIGHT:%d\r\n", ir_dist_right_int);
 8001d60:	4b61      	ldr	r3, [pc, #388]	@ (8001ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	f107 0308 	add.w	r3, r7, #8
 8001d68:	4960      	ldr	r1, [pc, #384]	@ (8001eec <HAL_UART_RxCpltCallback+0x1f0>)
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f00c f9d4 	bl	800e118 <siprintf>
 8001d70:	e008      	b.n	8001d84 <HAL_UART_RxCpltCallback+0x88>
                    } else {
                        sprintf(ir_response, "IR_BOTH:%d,%d\r\n", ir_dist_left_int, ir_dist_right_int);
 8001d72:	4b5b      	ldr	r3, [pc, #364]	@ (8001ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b5c      	ldr	r3, [pc, #368]	@ (8001ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f107 0008 	add.w	r0, r7, #8
 8001d7e:	495c      	ldr	r1, [pc, #368]	@ (8001ef0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001d80:	f00c f9ca 	bl	800e118 <siprintf>
                    }
                    HAL_UART_Transmit(&huart3, (uint8_t*)ir_response, strlen(ir_response), 0xFFFF);
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fa81 	bl	8000290 <strlen>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	f107 0108 	add.w	r1, r7, #8
 8001d96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d9a:	4856      	ldr	r0, [pc, #344]	@ (8001ef4 <HAL_UART_RxCpltCallback+0x1f8>)
 8001d9c:	f007 fc5a 	bl	8009654 <HAL_UART_Transmit>
                    have_instruction = 1;  // Only set for motor commands
                    display_if_changed((char*)instruction);
                    HAL_UART_Transmit(&huart3, "ACK\r\n", 5, 0xFFFF);
                }

                break;
 8001da0:	e08a      	b.n	8001eb8 <HAL_UART_RxCpltCallback+0x1bc>
                else if (instruction[0] == 'U') {
 8001da2:	4b4e      	ldr	r3, [pc, #312]	@ (8001edc <HAL_UART_RxCpltCallback+0x1e0>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b55      	cmp	r3, #85	@ 0x55
 8001da8:	d116      	bne.n	8001dd8 <HAL_UART_RxCpltCallback+0xdc>
                    sprintf(us_response, "US:%d\r\n", us_dist_int);
 8001daa:	4b53      	ldr	r3, [pc, #332]	@ (8001ef8 <HAL_UART_RxCpltCallback+0x1fc>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001db2:	4952      	ldr	r1, [pc, #328]	@ (8001efc <HAL_UART_RxCpltCallback+0x200>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f00c f9af 	bl	800e118 <siprintf>
                    HAL_UART_Transmit(&huart3, (uint8_t*)us_response, strlen(us_response), 0xFFFF);
 8001dba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fa66 	bl	8000290 <strlen>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001dcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dd0:	4848      	ldr	r0, [pc, #288]	@ (8001ef4 <HAL_UART_RxCpltCallback+0x1f8>)
 8001dd2:	f007 fc3f 	bl	8009654 <HAL_UART_Transmit>
                break;
 8001dd6:	e06f      	b.n	8001eb8 <HAL_UART_RxCpltCallback+0x1bc>
                else if (instruction[0] == 'X' || strncmp(instruction, "STOP", 4) == 0) {
 8001dd8:	4b40      	ldr	r3, [pc, #256]	@ (8001edc <HAL_UART_RxCpltCallback+0x1e0>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b58      	cmp	r3, #88	@ 0x58
 8001dde:	d007      	beq.n	8001df0 <HAL_UART_RxCpltCallback+0xf4>
 8001de0:	2204      	movs	r2, #4
 8001de2:	4947      	ldr	r1, [pc, #284]	@ (8001f00 <HAL_UART_RxCpltCallback+0x204>)
 8001de4:	483d      	ldr	r0, [pc, #244]	@ (8001edc <HAL_UART_RxCpltCallback+0x1e0>)
 8001de6:	f00c fa04 	bl	800e1f2 <strncmp>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d11f      	bne.n	8001e30 <HAL_UART_RxCpltCallback+0x134>
                    have_instruction = 1;
 8001df0:	4b44      	ldr	r3, [pc, #272]	@ (8001f04 <HAL_UART_RxCpltCallback+0x208>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
                    emergency_stop = 1;
 8001df6:	4b44      	ldr	r3, [pc, #272]	@ (8001f08 <HAL_UART_RxCpltCallback+0x20c>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
                    MotorStop_both();
 8001dfc:	f7ff f8e2 	bl	8000fc4 <MotorStop_both>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
 8001e02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e06:	4841      	ldr	r0, [pc, #260]	@ (8001f0c <HAL_UART_RxCpltCallback+0x210>)
 8001e08:	f003 fd60 	bl	80058cc <HAL_GPIO_WritePin>
                    osDelay(5000);
 8001e0c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001e10:	f008 fd5c 	bl	800a8cc <osDelay>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001e14:	2200      	movs	r2, #0
 8001e16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e1a:	483c      	ldr	r0, [pc, #240]	@ (8001f0c <HAL_UART_RxCpltCallback+0x210>)
 8001e1c:	f003 fd56 	bl	80058cc <HAL_GPIO_WritePin>
                    HAL_UART_Transmit(&huart3, "STOP_ACK\r\n", 10, 0xFFFF);
 8001e20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e24:	220a      	movs	r2, #10
 8001e26:	493a      	ldr	r1, [pc, #232]	@ (8001f10 <HAL_UART_RxCpltCallback+0x214>)
 8001e28:	4832      	ldr	r0, [pc, #200]	@ (8001ef4 <HAL_UART_RxCpltCallback+0x1f8>)
 8001e2a:	f007 fc13 	bl	8009654 <HAL_UART_Transmit>
                break;
 8001e2e:	e043      	b.n	8001eb8 <HAL_UART_RxCpltCallback+0x1bc>
                else if (instruction[0] == 'A') {
 8001e30:	4b2a      	ldr	r3, [pc, #168]	@ (8001edc <HAL_UART_RxCpltCallback+0x1e0>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b41      	cmp	r3, #65	@ 0x41
 8001e36:	d11b      	bne.n	8001e70 <HAL_UART_RxCpltCallback+0x174>
                    sprintf(all_response, "SENS:%d,%d,%d\r\n", ir_dist_left_int, ir_dist_right_int, us_dist_int);
 8001e38:	4b29      	ldr	r3, [pc, #164]	@ (8001ee0 <HAL_UART_RxCpltCallback+0x1e4>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee8 <HAL_UART_RxCpltCallback+0x1ec>)
 8001e3e:	6819      	ldr	r1, [r3, #0]
 8001e40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <HAL_UART_RxCpltCallback+0x1fc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f107 0008 	add.w	r0, r7, #8
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4931      	ldr	r1, [pc, #196]	@ (8001f14 <HAL_UART_RxCpltCallback+0x218>)
 8001e4e:	f00c f963 	bl	800e118 <siprintf>
                    HAL_UART_Transmit(&huart3, (uint8_t*)all_response, strlen(all_response), 0xFFFF);
 8001e52:	f107 0308 	add.w	r3, r7, #8
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fa1a 	bl	8000290 <strlen>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	f107 0108 	add.w	r1, r7, #8
 8001e64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e68:	4822      	ldr	r0, [pc, #136]	@ (8001ef4 <HAL_UART_RxCpltCallback+0x1f8>)
 8001e6a:	f007 fbf3 	bl	8009654 <HAL_UART_Transmit>
                break;
 8001e6e:	e023      	b.n	8001eb8 <HAL_UART_RxCpltCallback+0x1bc>
                    have_instruction = 1;  // Only set for motor commands
 8001e70:	4b24      	ldr	r3, [pc, #144]	@ (8001f04 <HAL_UART_RxCpltCallback+0x208>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
                    display_if_changed((char*)instruction);
 8001e76:	4819      	ldr	r0, [pc, #100]	@ (8001edc <HAL_UART_RxCpltCallback+0x1e0>)
 8001e78:	f7ff ff24 	bl	8001cc4 <display_if_changed>
                    HAL_UART_Transmit(&huart3, "ACK\r\n", 5, 0xFFFF);
 8001e7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e80:	2205      	movs	r2, #5
 8001e82:	4925      	ldr	r1, [pc, #148]	@ (8001f18 <HAL_UART_RxCpltCallback+0x21c>)
 8001e84:	481b      	ldr	r0, [pc, #108]	@ (8001ef4 <HAL_UART_RxCpltCallback+0x1f8>)
 8001e86:	f007 fbe5 	bl	8009654 <HAL_UART_Transmit>
                break;
 8001e8a:	e015      	b.n	8001eb8 <HAL_UART_RxCpltCallback+0x1bc>

            default:
                if (uart_index < sizeof(uart_rx_buffer) - 1) {
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b3e      	cmp	r3, #62	@ 0x3e
 8001e92:	d810      	bhi.n	8001eb6 <HAL_UART_RxCpltCallback+0x1ba>
                    uart_rx_buffer[uart_index++] = uart_byte;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	b2d1      	uxtb	r1, r2
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001e9e:	7011      	strb	r1, [r2, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <HAL_UART_RxCpltCallback+0x1d4>)
 8001ea4:	7819      	ldrb	r1, [r3, #0]
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <HAL_UART_RxCpltCallback+0x1dc>)
 8001ea8:	5499      	strb	r1, [r3, r2]
                    uart_rx_buffer[uart_index] = '\0';
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <HAL_UART_RxCpltCallback+0x1d8>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <HAL_UART_RxCpltCallback+0x1dc>)
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	5499      	strb	r1, [r3, r2]
                }
                break;
 8001eb6:	bf00      	nop
        }

        HAL_UART_Receive_IT(&huart3, &uart_byte, 1);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	4905      	ldr	r1, [pc, #20]	@ (8001ed0 <HAL_UART_RxCpltCallback+0x1d4>)
 8001ebc:	480d      	ldr	r0, [pc, #52]	@ (8001ef4 <HAL_UART_RxCpltCallback+0x1f8>)
 8001ebe:	f007 fc54 	bl	800976a <HAL_UART_Receive_IT>
    }
}
 8001ec2:	bf00      	nop
 8001ec4:	3750      	adds	r7, #80	@ 0x50
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40004800 	.word	0x40004800
 8001ed0:	20000620 	.word	0x20000620
 8001ed4:	20000664 	.word	0x20000664
 8001ed8:	20000624 	.word	0x20000624
 8001edc:	20000688 	.word	0x20000688
 8001ee0:	2000059c 	.word	0x2000059c
 8001ee4:	08010528 	.word	0x08010528
 8001ee8:	20000598 	.word	0x20000598
 8001eec:	08010538 	.word	0x08010538
 8001ef0:	08010548 	.word	0x08010548
 8001ef4:	2000051c 	.word	0x2000051c
 8001ef8:	200005c8 	.word	0x200005c8
 8001efc:	08010558 	.word	0x08010558
 8001f00:	08010560 	.word	0x08010560
 8001f04:	200006a8 	.word	0x200006a8
 8001f08:	200006fc 	.word	0x200006fc
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	08010568 	.word	0x08010568
 8001f14:	08010574 	.word	0x08010574
 8001f18:	08010584 	.word	0x08010584
 8001f1c:	00000000 	.word	0x00000000

08001f20 <convert_instruction>:

void convert_instruction(char *str) {
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    // sscanf returns the number of successfully parsed items
    i_flag = str[0];
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	781a      	ldrb	r2, [r3, #0]
 8001f2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002020 <convert_instruction+0x100>)
 8001f2e:	701a      	strb	r2, [r3, #0]

    i_speed = (str[1] - '0')*10 + (str[2] - '0');
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3301      	adds	r3, #1
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	461a      	mov	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3302      	adds	r3, #2
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	3b30      	subs	r3, #48	@ 0x30
 8001f4c:	4413      	add	r3, r2
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f56:	4b33      	ldr	r3, [pc, #204]	@ (8002024 <convert_instruction+0x104>)
 8001f58:	edc3 7a00 	vstr	s15, [r3]

    i_angle = (str[5] - '0')*10 + (str[6] - '0');
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3305      	adds	r3, #5
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	461a      	mov	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3306      	adds	r3, #6
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	3b30      	subs	r3, #48	@ 0x30
 8001f78:	4413      	add	r3, r2
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f82:	4b29      	ldr	r3, [pc, #164]	@ (8002028 <convert_instruction+0x108>)
 8001f84:	edc3 7a00 	vstr	s15, [r3]
    if (str[4] == '-') i_angle *= -1;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b2d      	cmp	r3, #45	@ 0x2d
 8001f90:	d107      	bne.n	8001fa2 <convert_instruction+0x82>
 8001f92:	4b25      	ldr	r3, [pc, #148]	@ (8002028 <convert_instruction+0x108>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	eef1 7a67 	vneg.f32	s15, s15
 8001f9c:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <convert_instruction+0x108>)
 8001f9e:	edc3 7a00 	vstr	s15, [r3]

    i_value = (str[8]-'0')*100 + (str[9] - '0')*10 + (str[10] - '0') + (str[12]-'0')*0.1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3308      	adds	r3, #8
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	3b30      	subs	r3, #48	@ 0x30
 8001faa:	2264      	movs	r2, #100	@ 0x64
 8001fac:	fb02 f103 	mul.w	r1, r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3309      	adds	r3, #9
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	18ca      	adds	r2, r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	330a      	adds	r3, #10
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	3b30      	subs	r3, #48	@ 0x30
 8001fcc:	4413      	add	r3, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fab8 	bl	8000544 <__aeabi_i2d>
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	460d      	mov	r5, r1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	330c      	adds	r3, #12
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	3b30      	subs	r3, #48	@ 0x30
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe faaf 	bl	8000544 <__aeabi_i2d>
 8001fe6:	a30c      	add	r3, pc, #48	@ (adr r3, 8002018 <convert_instruction+0xf8>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fb14 	bl	8000618 <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	f7fe f958 	bl	80002ac <__adddf3>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	f7fe fde0 	bl	8000bc8 <__aeabi_d2f>
 8002008:	4603      	mov	r3, r0
 800200a:	4a08      	ldr	r2, [pc, #32]	@ (800202c <convert_instruction+0x10c>)
 800200c:	6013      	str	r3, [r2, #0]

}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bdb0      	pop	{r4, r5, r7, pc}
 8002016:	bf00      	nop
 8002018:	9999999a 	.word	0x9999999a
 800201c:	3fb99999 	.word	0x3fb99999
 8002020:	200006ec 	.word	0x200006ec
 8002024:	200006f0 	.word	0x200006f0
 8002028:	200006f4 	.word	0x200006f4
 800202c:	200006f8 	.word	0x200006f8

08002030 <I2C_Bus_Recovery>:

void I2C_Bus_Recovery(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
 8002044:	611a      	str	r2, [r3, #16]

    // 1. De-init I2C peripheral
    HAL_I2C_DeInit(&hi2c2);
 8002046:	4831      	ldr	r0, [pc, #196]	@ (800210c <I2C_Bus_Recovery+0xdc>)
 8002048:	f003 fdb8 	bl	8005bbc <HAL_I2C_DeInit>

    // 2. Configure SCL and SDA as GPIO outputs open-drain
    __HAL_RCC_GPIOB_CLK_ENABLE();  // Change port if your I2C2 pins are different
 800204c:	2300      	movs	r3, #0
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	4b2f      	ldr	r3, [pc, #188]	@ (8002110 <I2C_Bus_Recovery+0xe0>)
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	4a2e      	ldr	r2, [pc, #184]	@ (8002110 <I2C_Bus_Recovery+0xe0>)
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	6313      	str	r3, [r2, #48]	@ 0x30
 800205c:	4b2c      	ldr	r3, [pc, #176]	@ (8002110 <I2C_Bus_Recovery+0xe0>)
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002068:	2311      	movs	r3, #17
 800206a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_10; // SCL (check your board)
 8002074:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002078:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	4619      	mov	r1, r3
 8002080:	4824      	ldr	r0, [pc, #144]	@ (8002114 <I2C_Bus_Recovery+0xe4>)
 8002082:	f003 f973 	bl	800536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11; // SDA (check your board)
 8002086:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800208a:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	4619      	mov	r1, r3
 8002092:	4820      	ldr	r0, [pc, #128]	@ (8002114 <I2C_Bus_Recovery+0xe4>)
 8002094:	f003 f96a 	bl	800536c <HAL_GPIO_Init>

    // 3. Toggle SCL about 10 times while SDA is high
    for (int i = 0; i < 10; i++)
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
 800209c:	e014      	b.n	80020c8 <I2C_Bus_Recovery+0x98>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800209e:	2201      	movs	r2, #1
 80020a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020a4:	481b      	ldr	r0, [pc, #108]	@ (8002114 <I2C_Bus_Recovery+0xe4>)
 80020a6:	f003 fc11 	bl	80058cc <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80020aa:	2001      	movs	r0, #1
 80020ac:	f002 fbc6 	bl	800483c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80020b0:	2200      	movs	r2, #0
 80020b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020b6:	4817      	ldr	r0, [pc, #92]	@ (8002114 <I2C_Bus_Recovery+0xe4>)
 80020b8:	f003 fc08 	bl	80058cc <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80020bc:	2001      	movs	r0, #1
 80020be:	f002 fbbd 	bl	800483c <HAL_Delay>
    for (int i = 0; i < 10; i++)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3301      	adds	r3, #1
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	2b09      	cmp	r3, #9
 80020cc:	dde7      	ble.n	800209e <I2C_Bus_Recovery+0x6e>
    }

    // 4. Generate a STOP condition manually
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); // SDA low
 80020ce:	2200      	movs	r2, #0
 80020d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020d4:	480f      	ldr	r0, [pc, #60]	@ (8002114 <I2C_Bus_Recovery+0xe4>)
 80020d6:	f003 fbf9 	bl	80058cc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80020da:	2001      	movs	r0, #1
 80020dc:	f002 fbae 	bl	800483c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   // SCL high
 80020e0:	2201      	movs	r2, #1
 80020e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020e6:	480b      	ldr	r0, [pc, #44]	@ (8002114 <I2C_Bus_Recovery+0xe4>)
 80020e8:	f003 fbf0 	bl	80058cc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f002 fba5 	bl	800483c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);   // SDA high
 80020f2:	2201      	movs	r2, #1
 80020f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020f8:	4806      	ldr	r0, [pc, #24]	@ (8002114 <I2C_Bus_Recovery+0xe4>)
 80020fa:	f003 fbe7 	bl	80058cc <HAL_GPIO_WritePin>

    // 5. Re-init I2C peripheral
    MX_I2C2_Init();
 80020fe:	f7ff f95b 	bl	80013b8 <MX_I2C2_Init>
}
 8002102:	bf00      	nop
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000288 	.word	0x20000288
 8002110:	40023800 	.word	0x40023800
 8002114:	40020400 	.word	0x40020400

08002118 <icm20948_init>:

void icm20948_init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af04      	add	r7, sp, #16
    uint8_t data;
    uint8_t who_am_i;

    I2C_Bus_Recovery();
 800211e:	f7ff ff87 	bl	8002030 <I2C_Bus_Recovery>

    // Select bank 0 (just to be safe)
	data = 0x00;
 8002122:	2300      	movs	r3, #0
 8002124:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, 0x68 << 1, 0x7F, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 8002126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	2301      	movs	r3, #1
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	1dfb      	adds	r3, r7, #7
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2301      	movs	r3, #1
 8002136:	227f      	movs	r2, #127	@ 0x7f
 8002138:	21d0      	movs	r1, #208	@ 0xd0
 800213a:	4841      	ldr	r0, [pc, #260]	@ (8002240 <icm20948_init+0x128>)
 800213c:	f004 f89e 	bl	800627c <HAL_I2C_Mem_Write>

	// Read WHO_AM_I (0x00) - should be 0xEA
	HAL_I2C_Mem_Read(&hi2c2, 0x68 << 1, 0x00, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, 1000);
 8002140:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002144:	9302      	str	r3, [sp, #8]
 8002146:	2301      	movs	r3, #1
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	1dbb      	adds	r3, r7, #6
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2301      	movs	r3, #1
 8002150:	2200      	movs	r2, #0
 8002152:	21d0      	movs	r1, #208	@ 0xd0
 8002154:	483a      	ldr	r0, [pc, #232]	@ (8002240 <icm20948_init+0x128>)
 8002156:	f004 f98b 	bl	8006470 <HAL_I2C_Mem_Read>
	if (HAL_I2C_Mem_Read(&hi2c2, 0x68<<1, 0x00, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, 1000) == HAL_OK) {
 800215a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	2301      	movs	r3, #1
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	1dbb      	adds	r3, r7, #6
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2301      	movs	r3, #1
 800216a:	2200      	movs	r2, #0
 800216c:	21d0      	movs	r1, #208	@ 0xd0
 800216e:	4834      	ldr	r0, [pc, #208]	@ (8002240 <icm20948_init+0x128>)
 8002170:	f004 f97e 	bl	8006470 <HAL_I2C_Mem_Read>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10e      	bne.n	8002198 <icm20948_init+0x80>
	    if (who_am_i == 0xEA) {
 800217a:	79bb      	ldrb	r3, [r7, #6]
 800217c:	2bea      	cmp	r3, #234	@ 0xea
 800217e:	d105      	bne.n	800218c <icm20948_init+0x74>
	        OLED_ShowString(95,35,"ok");
 8002180:	4a30      	ldr	r2, [pc, #192]	@ (8002244 <icm20948_init+0x12c>)
 8002182:	2123      	movs	r1, #35	@ 0x23
 8002184:	205f      	movs	r0, #95	@ 0x5f
 8002186:	f00b f9ef 	bl	800d568 <OLED_ShowString>
 800218a:	e00a      	b.n	80021a2 <icm20948_init+0x8a>
	    } else {
	        OLED_ShowString(95,35,"bad");
 800218c:	4a2e      	ldr	r2, [pc, #184]	@ (8002248 <icm20948_init+0x130>)
 800218e:	2123      	movs	r1, #35	@ 0x23
 8002190:	205f      	movs	r0, #95	@ 0x5f
 8002192:	f00b f9e9 	bl	800d568 <OLED_ShowString>
 8002196:	e004      	b.n	80021a2 <icm20948_init+0x8a>
	    }
	} else {
	    OLED_ShowString(95,35,"i2c");
 8002198:	4a2c      	ldr	r2, [pc, #176]	@ (800224c <icm20948_init+0x134>)
 800219a:	2123      	movs	r1, #35	@ 0x23
 800219c:	205f      	movs	r0, #95	@ 0x5f
 800219e:	f00b f9e3 	bl	800d568 <OLED_ShowString>
	}

    // Wake up
    data = 0x01;
 80021a2:	2301      	movs	r3, #1
 80021a4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c2, 0x68 << 1, 0x06, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 80021a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021aa:	9302      	str	r3, [sp, #8]
 80021ac:	2301      	movs	r3, #1
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	1dfb      	adds	r3, r7, #7
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2301      	movs	r3, #1
 80021b6:	2206      	movs	r2, #6
 80021b8:	21d0      	movs	r1, #208	@ 0xd0
 80021ba:	4821      	ldr	r0, [pc, #132]	@ (8002240 <icm20948_init+0x128>)
 80021bc:	f004 f85e 	bl	800627c <HAL_I2C_Mem_Write>

    // Enable accel & gyro
    data = 0x00;
 80021c0:	2300      	movs	r3, #0
 80021c2:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c2, 0x68 << 1, 0x07, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 80021c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	2301      	movs	r3, #1
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	1dfb      	adds	r3, r7, #7
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	2301      	movs	r3, #1
 80021d4:	2207      	movs	r2, #7
 80021d6:	21d0      	movs	r1, #208	@ 0xd0
 80021d8:	4819      	ldr	r0, [pc, #100]	@ (8002240 <icm20948_init+0x128>)
 80021da:	f004 f84f 	bl	800627c <HAL_I2C_Mem_Write>

    // Disable ICM internal I2C master (required for BYPASS)
	data = 0x00; // USER_CTRL (0x03)
 80021de:	2300      	movs	r3, #0
 80021e0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, 0x68<<1, 0x03, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 80021e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021e6:	9302      	str	r3, [sp, #8]
 80021e8:	2301      	movs	r3, #1
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	1dfb      	adds	r3, r7, #7
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2301      	movs	r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	21d0      	movs	r1, #208	@ 0xd0
 80021f6:	4812      	ldr	r0, [pc, #72]	@ (8002240 <icm20948_init+0x128>)
 80021f8:	f004 f840 	bl	800627c <HAL_I2C_Mem_Write>

	// Enable BYPASS so MCU can talk to AK09916 at 0x0C
	data = 0x02; // INT_PIN_CFG (0x0F): BYPASS_EN=1
 80021fc:	2302      	movs	r3, #2
 80021fe:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, 0x68<<1, 0x0F, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 8002200:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	2301      	movs	r3, #1
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	1dfb      	adds	r3, r7, #7
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2301      	movs	r3, #1
 8002210:	220f      	movs	r2, #15
 8002212:	21d0      	movs	r1, #208	@ 0xd0
 8002214:	480a      	ldr	r0, [pc, #40]	@ (8002240 <icm20948_init+0x128>)
 8002216:	f004 f831 	bl	800627c <HAL_I2C_Mem_Write>

	// Put AK09916 into continuous mode (e.g., 100 Hz)
	data = 0x08; // CNTL2 (0x31): 100 Hz
 800221a:	2308      	movs	r3, #8
 800221c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, 0x0C<<1, 0x31, I2C_MEMADD_SIZE_8BIT, &data, 1, 1000);
 800221e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002222:	9302      	str	r3, [sp, #8]
 8002224:	2301      	movs	r3, #1
 8002226:	9301      	str	r3, [sp, #4]
 8002228:	1dfb      	adds	r3, r7, #7
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2301      	movs	r3, #1
 800222e:	2231      	movs	r2, #49	@ 0x31
 8002230:	2118      	movs	r1, #24
 8002232:	4803      	ldr	r0, [pc, #12]	@ (8002240 <icm20948_init+0x128>)
 8002234:	f004 f822 	bl	800627c <HAL_I2C_Mem_Write>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000288 	.word	0x20000288
 8002244:	0801058c 	.word	0x0801058c
 8002248:	08010590 	.word	0x08010590
 800224c:	08010594 	.word	0x08010594

08002250 <PID_Compute>:


void PID_Compute(PID_Controller *pid, float error, float dt)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	ed87 0a02 	vstr	s0, [r7, #8]
 800225c:	edc7 0a01 	vstr	s1, [r7, #4]
	// Integral term with anti-windup
	pid->integral += error * dt;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800226c:	edd7 6a02 	vldr	s13, [r7, #8]
 8002270:	edd7 7a01 	vldr	s15, [r7, #4]
 8002274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002280:	ee17 2a90 	vmov	r2, s15
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	611a      	str	r2, [r3, #16]
	if (pid->integral > INTEGRAL_MAX_MOTOR) pid->integral = INTEGRAL_MAX_MOTOR;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002290:	dd03      	ble.n	800229a <PID_Compute+0x4a>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002298:	611a      	str	r2, [r3, #16]
	if (pid->integral < -INTEGRAL_MAX_MOTOR) pid->integral = -INTEGRAL_MAX_MOTOR;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 80022a2:	da02      	bge.n	80022aa <PID_Compute+0x5a>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002398 <PID_Compute+0x148>)
 80022a8:	611a      	str	r2, [r3, #16]

	// Derivative term
	float derivative = (error - pid->prevError) / dt;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80022ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022be:	ed97 7a01 	vldr	s14, [r7, #4]
 80022c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022c6:	edc7 7a04 	vstr	s15, [r7, #16]

	// PID output
	float output = pid->Kp * error
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	ed93 7a00 	vldr	s14, [r3]
 80022d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80022d4:	ee27 7a27 	vmul.f32	s14, s14, s15
				 + pid->Ki * pid->integral
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	edd3 6a01 	vldr	s13, [r3, #4]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	ee07 3a90 	vmov	s15, r3
 80022e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ee:	ee37 7a27 	vadd.f32	s14, s14, s15
				 + pid->Kd * derivative;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80022f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float output = pid->Kp * error
 8002300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002304:	edc7 7a05 	vstr	s15, [r7, #20]

	// Clamp to output range
	if (output > OUTPUT_MAX_MOTOR) output = OUTPUT_MAX_MOTOR;
 8002308:	edd7 7a05 	vldr	s15, [r7, #20]
 800230c:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800239c <PID_Compute+0x14c>
 8002310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002318:	dd01      	ble.n	800231e <PID_Compute+0xce>
 800231a:	4b21      	ldr	r3, [pc, #132]	@ (80023a0 <PID_Compute+0x150>)
 800231c:	617b      	str	r3, [r7, #20]
	if (output < OUTPUT_MIN_MOTOR) output = OUTPUT_MIN_MOTOR;
 800231e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002322:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80023a4 <PID_Compute+0x154>
 8002326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800232a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232e:	d501      	bpl.n	8002334 <PID_Compute+0xe4>
 8002330:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <PID_Compute+0x158>)
 8002332:	617b      	str	r3, [r7, #20]

	pid->pid_change = output;
 8002334:	edd7 7a05 	vldr	s15, [r7, #20]
 8002338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800233c:	ee17 2a90 	vmov	r2, s15
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	615a      	str	r2, [r3, #20]
	pid->prevError = error;
 8002344:	edd7 7a02 	vldr	s15, [r7, #8]
 8002348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800234c:	ee17 2a90 	vmov	r2, s15
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	60da      	str	r2, [r3, #12]
	pid->pwm_output += (int)output;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	edd7 7a05 	vldr	s15, [r7, #20]
 800235c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002360:	ee17 2a90 	vmov	r2, s15
 8002364:	441a      	add	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	619a      	str	r2, [r3, #24]
	if (pid->pwm_output > OUTPUT_MAX_MOTOR) pid->pwm_output = OUTPUT_MAX_MOTOR;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f5b3 5fe1 	cmp.w	r3, #7200	@ 0x1c20
 8002372:	dd03      	ble.n	800237c <PID_Compute+0x12c>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 800237a:	619a      	str	r2, [r3, #24]
	if (pid->pwm_output < 0) pid->pwm_output = 0;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	da02      	bge.n	800238a <PID_Compute+0x13a>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]

}
 800238a:	bf00      	nop
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	fffffe0c 	.word	0xfffffe0c
 800239c:	45e10000 	.word	0x45e10000
 80023a0:	45e10000 	.word	0x45e10000
 80023a4:	c5e10000 	.word	0xc5e10000
 80023a8:	c5e10000 	.word	0xc5e10000
 80023ac:	00000000 	.word	0x00000000

080023b0 <forward>:



void forward(float target_rpm, float target_distance, int delay, int flag){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80023ba:	edc7 0a02 	vstr	s1, [r7, #8]
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
	//-------------------- MOTOR START -----------------------
	setPID(&pid_left, 1.5f, 0.0f, 0.0f, 0);
 80023c2:	2100      	movs	r1, #0
 80023c4:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 8002570 <forward+0x1c0>
 80023c8:	eddf 0a69 	vldr	s1, [pc, #420]	@ 8002570 <forward+0x1c0>
 80023cc:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 80023d0:	4868      	ldr	r0, [pc, #416]	@ (8002574 <forward+0x1c4>)
 80023d2:	f7fe fe13 	bl	8000ffc <setPID>
	setPID(&pid_right, 1.5f, 0.0f, 0.0f, 0);
 80023d6:	2100      	movs	r1, #0
 80023d8:	ed9f 1a65 	vldr	s2, [pc, #404]	@ 8002570 <forward+0x1c0>
 80023dc:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8002570 <forward+0x1c0>
 80023e0:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 80023e4:	4864      	ldr	r0, [pc, #400]	@ (8002578 <forward+0x1c8>)
 80023e6:	f7fe fe09 	bl	8000ffc <setPID>
	MotorDrive_enable();
 80023ea:	f7fe fdd3 	bl	8000f94 <MotorDrive_enable>
	Motor_direction_both(1);
 80023ee:	2001      	movs	r0, #1
 80023f0:	f7ff fc44 	bl	8001c7c <Motor_direction_both>
	//--------------------------------------------------------

	distance_travelled = 0.0f;
 80023f4:	4b61      	ldr	r3, [pc, #388]	@ (800257c <forward+0x1cc>)
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
	total_left_encoder = 0.0f;
 80023fc:	4b60      	ldr	r3, [pc, #384]	@ (8002580 <forward+0x1d0>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]

	//-------------- Front tire correction ------------------
	if (servo_prev != SERVO_LEFT){
 8002402:	4b60      	ldr	r3, [pc, #384]	@ (8002584 <forward+0x1d4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b35      	cmp	r3, #53	@ 0x35
 8002408:	d00e      	beq.n	8002428 <forward+0x78>
		rotate_wheel(SERVO_LEFT+10);
 800240a:	203f      	movs	r0, #63	@ 0x3f
 800240c:	f000 fdf2 	bl	8002ff4 <rotate_wheel>
		osDelay(100);
 8002410:	2064      	movs	r0, #100	@ 0x64
 8002412:	f008 fa5b 	bl	800a8cc <osDelay>
		rotate_wheel(SERVO_MIDDLE);
 8002416:	204c      	movs	r0, #76	@ 0x4c
 8002418:	f000 fdec 	bl	8002ff4 <rotate_wheel>
		osDelay(100);
 800241c:	2064      	movs	r0, #100	@ 0x64
 800241e:	f008 fa55 	bl	800a8cc <osDelay>
		servo_prev = SERVO_LEFT;
 8002422:	4b58      	ldr	r3, [pc, #352]	@ (8002584 <forward+0x1d4>)
 8002424:	2235      	movs	r2, #53	@ 0x35
 8002426:	601a      	str	r2, [r3, #0]
	}
	//-------------------------------------------------------

	for (;;){
		if (emergency_stop){
 8002428:	4b57      	ldr	r3, [pc, #348]	@ (8002588 <forward+0x1d8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <forward+0x86>
			MotorStop_both();
 8002430:	f7fe fdc8 	bl	8000fc4 <MotorStop_both>
			break;
 8002434:	e08e      	b.n	8002554 <forward+0x1a4>
		}

		//--------------- PID Controller -------------------------
		  error_left_rpm = (target_rpm) - motor_left_rpm;
 8002436:	4b55      	ldr	r3, [pc, #340]	@ (800258c <forward+0x1dc>)
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002444:	4b52      	ldr	r3, [pc, #328]	@ (8002590 <forward+0x1e0>)
 8002446:	edc3 7a00 	vstr	s15, [r3]
		  error_right_rpm = (target_rpm + RPM_OFFSET) - motor_right_rpm;
 800244a:	edd7 7a03 	vldr	s15, [r7, #12]
 800244e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002452:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002456:	4b4f      	ldr	r3, [pc, #316]	@ (8002594 <forward+0x1e4>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002460:	4b4d      	ldr	r3, [pc, #308]	@ (8002598 <forward+0x1e8>)
 8002462:	edc3 7a00 	vstr	s15, [r3]

		  PID_Compute(&pid_left, error_left_rpm, (float)(delay/1000.0f));
 8002466:	4b4a      	ldr	r3, [pc, #296]	@ (8002590 <forward+0x1e0>)
 8002468:	ed93 7a00 	vldr	s14, [r3]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002476:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 800259c <forward+0x1ec>
 800247a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800247e:	eef0 0a66 	vmov.f32	s1, s13
 8002482:	eeb0 0a47 	vmov.f32	s0, s14
 8002486:	483b      	ldr	r0, [pc, #236]	@ (8002574 <forward+0x1c4>)
 8002488:	f7ff fee2 	bl	8002250 <PID_Compute>
		  PID_Compute(&pid_right, error_right_rpm, (float)(delay/1000.0f));
 800248c:	4b42      	ldr	r3, [pc, #264]	@ (8002598 <forward+0x1e8>)
 800248e:	ed93 7a00 	vldr	s14, [r3]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800249c:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 800259c <forward+0x1ec>
 80024a0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80024a4:	eef0 0a66 	vmov.f32	s1, s13
 80024a8:	eeb0 0a47 	vmov.f32	s0, s14
 80024ac:	4832      	ldr	r0, [pc, #200]	@ (8002578 <forward+0x1c8>)
 80024ae:	f7ff fecf 	bl	8002250 <PID_Compute>

		  __HAL_TIM_SetCompare(&htim9,TIM_CHANNEL_2,pid_left.pwm_output);  //Motor B (left)
 80024b2:	4b30      	ldr	r3, [pc, #192]	@ (8002574 <forward+0x1c4>)
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	4b3a      	ldr	r3, [pc, #232]	@ (80025a0 <forward+0x1f0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	639a      	str	r2, [r3, #56]	@ 0x38
		  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,pid_right.pwm_output); //Motor A (right)
 80024bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002578 <forward+0x1c8>)
 80024be:	699a      	ldr	r2, [r3, #24]
 80024c0:	4b38      	ldr	r3, [pc, #224]	@ (80025a4 <forward+0x1f4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	641a      	str	r2, [r3, #64]	@ 0x40
		//-------------------------------------------------------------

		//-------------- Distance Calculation ----------------------
		  total_revolution = total_left_encoder / 1525.0f;  //1320 OR 1405
 80024c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002580 <forward+0x1d0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024d2:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80025a8 <forward+0x1f8>
 80024d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024da:	4b34      	ldr	r3, [pc, #208]	@ (80025ac <forward+0x1fc>)
 80024dc:	edc3 7a00 	vstr	s15, [r3]
		  distance_travelled = total_revolution * 20.41f;  // wheel circumference = 20.736 OR 20.41,
 80024e0:	4b32      	ldr	r3, [pc, #200]	@ (80025ac <forward+0x1fc>)
 80024e2:	edd3 7a00 	vldr	s15, [r3]
 80024e6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80025b0 <forward+0x200>
 80024ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ee:	4b23      	ldr	r3, [pc, #140]	@ (800257c <forward+0x1cc>)
 80024f0:	edc3 7a00 	vstr	s15, [r3]

		  total_revolution_int = total_revolution;
 80024f4:	4b2d      	ldr	r3, [pc, #180]	@ (80025ac <forward+0x1fc>)
 80024f6:	edd3 7a00 	vldr	s15, [r3]
 80024fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024fe:	ee17 2a90 	vmov	r2, s15
 8002502:	4b2c      	ldr	r3, [pc, #176]	@ (80025b4 <forward+0x204>)
 8002504:	601a      	str	r2, [r3, #0]
		  distance_travelled_int = distance_travelled;
 8002506:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <forward+0x1cc>)
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002510:	ee17 2a90 	vmov	r2, s15
 8002514:	4b28      	ldr	r3, [pc, #160]	@ (80025b8 <forward+0x208>)
 8002516:	601a      	str	r2, [r3, #0]
		//-----------------------------------------------------------

		//flag = 1 is used to indicate that the function was called to stop the robot
		//-------------------- Check distance travelled ------------------
		  if (distance_travelled >= target_distance){
 8002518:	4b18      	ldr	r3, [pc, #96]	@ (800257c <forward+0x1cc>)
 800251a:	edd3 7a00 	vldr	s15, [r3]
 800251e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252a:	d80e      	bhi.n	800254a <forward+0x19a>
			  if (flag){
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <forward+0x194>
				  reverse(40.0f, 1.0f, 40, 1);
 8002532:	2101      	movs	r1, #1
 8002534:	2028      	movs	r0, #40	@ 0x28
 8002536:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 8002560 <forward+0x1b0>
 800253a:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 8002568 <forward+0x1b8>
 800253e:	f000 f947 	bl	80027d0 <reverse>
			  }
			  else{
				  MotorStop_both();
			  }
			  break;
 8002542:	e007      	b.n	8002554 <forward+0x1a4>
				  MotorStop_both();
 8002544:	f7fe fd3e 	bl	8000fc4 <MotorStop_both>
			  break;
 8002548:	e004      	b.n	8002554 <forward+0x1a4>
		  }
		//-----------------------------------------------------------------

		  osDelay(delay);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4618      	mov	r0, r3
 800254e:	f008 f9bd 	bl	800a8cc <osDelay>
		if (emergency_stop){
 8002552:	e769      	b.n	8002428 <forward+0x78>
	}
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	f3af 8000 	nop.w
 8002560:	00000000 	.word	0x00000000
 8002564:	3ff00000 	.word	0x3ff00000
 8002568:	00000000 	.word	0x00000000
 800256c:	40440000 	.word	0x40440000
 8002570:	00000000 	.word	0x00000000
 8002574:	20000700 	.word	0x20000700
 8002578:	2000071c 	.word	0x2000071c
 800257c:	200005f0 	.word	0x200005f0
 8002580:	200005e4 	.word	0x200005e4
 8002584:	20000000 	.word	0x20000000
 8002588:	200006fc 	.word	0x200006fc
 800258c:	200005fc 	.word	0x200005fc
 8002590:	2000073c 	.word	0x2000073c
 8002594:	20000600 	.word	0x20000600
 8002598:	20000740 	.word	0x20000740
 800259c:	447a0000 	.word	0x447a0000
 80025a0:	20000444 	.word	0x20000444
 80025a4:	200003b4 	.word	0x200003b4
 80025a8:	44bea000 	.word	0x44bea000
 80025ac:	200005f4 	.word	0x200005f4
 80025b0:	41a347ae 	.word	0x41a347ae
 80025b4:	200005f8 	.word	0x200005f8
 80025b8:	200005ec 	.word	0x200005ec
 80025bc:	00000000 	.word	0x00000000

080025c0 <forward_until>:

void forward_until(float target_rpm, float target_distance, int delay, int flag){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80025ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
	//-------------------- MOTOR START -----------------------
	setPID(&pid_left, 1.5f, 0.0f, 0.0f, 0);
 80025d2:	2100      	movs	r1, #0
 80025d4:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 8002780 <forward_until+0x1c0>
 80025d8:	eddf 0a69 	vldr	s1, [pc, #420]	@ 8002780 <forward_until+0x1c0>
 80025dc:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 80025e0:	4868      	ldr	r0, [pc, #416]	@ (8002784 <forward_until+0x1c4>)
 80025e2:	f7fe fd0b 	bl	8000ffc <setPID>
	setPID(&pid_right, 1.5f, 0.0f, 0.0f, 0);
 80025e6:	2100      	movs	r1, #0
 80025e8:	ed9f 1a65 	vldr	s2, [pc, #404]	@ 8002780 <forward_until+0x1c0>
 80025ec:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8002780 <forward_until+0x1c0>
 80025f0:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 80025f4:	4864      	ldr	r0, [pc, #400]	@ (8002788 <forward_until+0x1c8>)
 80025f6:	f7fe fd01 	bl	8000ffc <setPID>
	MotorDrive_enable();
 80025fa:	f7fe fccb 	bl	8000f94 <MotorDrive_enable>
	Motor_direction_both(1);
 80025fe:	2001      	movs	r0, #1
 8002600:	f7ff fb3c 	bl	8001c7c <Motor_direction_both>
	//--------------------------------------------------------

	distance_travelled = 0.0f;
 8002604:	4b61      	ldr	r3, [pc, #388]	@ (800278c <forward_until+0x1cc>)
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
	total_left_encoder = 0.0f;
 800260c:	4b60      	ldr	r3, [pc, #384]	@ (8002790 <forward_until+0x1d0>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]

	//-------------- Front tire correction ------------------
	if (servo_prev != SERVO_LEFT){
 8002612:	4b60      	ldr	r3, [pc, #384]	@ (8002794 <forward_until+0x1d4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b35      	cmp	r3, #53	@ 0x35
 8002618:	d00e      	beq.n	8002638 <forward_until+0x78>
		rotate_wheel(SERVO_LEFT);
 800261a:	2035      	movs	r0, #53	@ 0x35
 800261c:	f000 fcea 	bl	8002ff4 <rotate_wheel>
		osDelay(100);
 8002620:	2064      	movs	r0, #100	@ 0x64
 8002622:	f008 f953 	bl	800a8cc <osDelay>
		rotate_wheel(SERVO_MIDDLE);
 8002626:	204c      	movs	r0, #76	@ 0x4c
 8002628:	f000 fce4 	bl	8002ff4 <rotate_wheel>
		osDelay(100);
 800262c:	2064      	movs	r0, #100	@ 0x64
 800262e:	f008 f94d 	bl	800a8cc <osDelay>
		servo_prev = SERVO_LEFT;
 8002632:	4b58      	ldr	r3, [pc, #352]	@ (8002794 <forward_until+0x1d4>)
 8002634:	2235      	movs	r2, #53	@ 0x35
 8002636:	601a      	str	r2, [r3, #0]
	}
	//-------------------------------------------------------

	for (;;){
		if (emergency_stop){
 8002638:	4b57      	ldr	r3, [pc, #348]	@ (8002798 <forward_until+0x1d8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <forward_until+0x86>
			MotorStop_both();
 8002640:	f7fe fcc0 	bl	8000fc4 <MotorStop_both>
			break;
 8002644:	e08e      	b.n	8002764 <forward_until+0x1a4>
		}
		//--------------- PID Controller -------------------------
		error_left_rpm = (target_rpm) - motor_left_rpm;
 8002646:	4b55      	ldr	r3, [pc, #340]	@ (800279c <forward_until+0x1dc>)
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002654:	4b52      	ldr	r3, [pc, #328]	@ (80027a0 <forward_until+0x1e0>)
 8002656:	edc3 7a00 	vstr	s15, [r3]
		error_right_rpm = (target_rpm + RPM_OFFSET) - motor_right_rpm;
 800265a:	edd7 7a03 	vldr	s15, [r7, #12]
 800265e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002662:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002666:	4b4f      	ldr	r3, [pc, #316]	@ (80027a4 <forward_until+0x1e4>)
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002670:	4b4d      	ldr	r3, [pc, #308]	@ (80027a8 <forward_until+0x1e8>)
 8002672:	edc3 7a00 	vstr	s15, [r3]

		  PID_Compute(&pid_left, error_left_rpm, (float)(delay/1000.0f));
 8002676:	4b4a      	ldr	r3, [pc, #296]	@ (80027a0 <forward_until+0x1e0>)
 8002678:	ed93 7a00 	vldr	s14, [r3]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	ee07 3a90 	vmov	s15, r3
 8002682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002686:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 80027ac <forward_until+0x1ec>
 800268a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800268e:	eef0 0a66 	vmov.f32	s1, s13
 8002692:	eeb0 0a47 	vmov.f32	s0, s14
 8002696:	483b      	ldr	r0, [pc, #236]	@ (8002784 <forward_until+0x1c4>)
 8002698:	f7ff fdda 	bl	8002250 <PID_Compute>
		  PID_Compute(&pid_right, error_right_rpm, (float)(delay/1000.0f));
 800269c:	4b42      	ldr	r3, [pc, #264]	@ (80027a8 <forward_until+0x1e8>)
 800269e:	ed93 7a00 	vldr	s14, [r3]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ac:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 80027ac <forward_until+0x1ec>
 80026b0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80026b4:	eef0 0a66 	vmov.f32	s1, s13
 80026b8:	eeb0 0a47 	vmov.f32	s0, s14
 80026bc:	4832      	ldr	r0, [pc, #200]	@ (8002788 <forward_until+0x1c8>)
 80026be:	f7ff fdc7 	bl	8002250 <PID_Compute>

		  __HAL_TIM_SetCompare(&htim9,TIM_CHANNEL_2,pid_left.pwm_output);  //Motor B (left)
 80026c2:	4b30      	ldr	r3, [pc, #192]	@ (8002784 <forward_until+0x1c4>)
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	4b3a      	ldr	r3, [pc, #232]	@ (80027b0 <forward_until+0x1f0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	639a      	str	r2, [r3, #56]	@ 0x38
		  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,pid_right.pwm_output); //Motor A (right)
 80026cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002788 <forward_until+0x1c8>)
 80026ce:	699a      	ldr	r2, [r3, #24]
 80026d0:	4b38      	ldr	r3, [pc, #224]	@ (80027b4 <forward_until+0x1f4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	641a      	str	r2, [r3, #64]	@ 0x40
		//-------------------------------------------------------------

		//-------------- Distance Calculation ----------------------
		  total_revolution = total_left_encoder / 1525.0f;  //1320 OR 1405
 80026d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002790 <forward_until+0x1d0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026e2:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80027b8 <forward_until+0x1f8>
 80026e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ea:	4b34      	ldr	r3, [pc, #208]	@ (80027bc <forward_until+0x1fc>)
 80026ec:	edc3 7a00 	vstr	s15, [r3]
		  distance_travelled = total_revolution * 20.41f;  // wheel circumference = 20.736 OR 20.41,
 80026f0:	4b32      	ldr	r3, [pc, #200]	@ (80027bc <forward_until+0x1fc>)
 80026f2:	edd3 7a00 	vldr	s15, [r3]
 80026f6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80027c0 <forward_until+0x200>
 80026fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026fe:	4b23      	ldr	r3, [pc, #140]	@ (800278c <forward_until+0x1cc>)
 8002700:	edc3 7a00 	vstr	s15, [r3]

		  total_revolution_int = total_revolution;
 8002704:	4b2d      	ldr	r3, [pc, #180]	@ (80027bc <forward_until+0x1fc>)
 8002706:	edd3 7a00 	vldr	s15, [r3]
 800270a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800270e:	ee17 2a90 	vmov	r2, s15
 8002712:	4b2c      	ldr	r3, [pc, #176]	@ (80027c4 <forward_until+0x204>)
 8002714:	601a      	str	r2, [r3, #0]
		  distance_travelled_int = distance_travelled;
 8002716:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <forward_until+0x1cc>)
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002720:	ee17 2a90 	vmov	r2, s15
 8002724:	4b28      	ldr	r3, [pc, #160]	@ (80027c8 <forward_until+0x208>)
 8002726:	601a      	str	r2, [r3, #0]
		//----------- End of Distance Calculation ------------------


		//-------------------- Check distance travelled ------------------
		  if (us_dist <= target_distance){
 8002728:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <forward_until+0x20c>)
 800272a:	edd3 7a00 	vldr	s15, [r3]
 800272e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273a:	db0e      	blt.n	800275a <forward_until+0x19a>
			  if (flag){
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <forward_until+0x194>
				  reverse(40.0f, 1.0f, 40, 1);
 8002742:	2101      	movs	r1, #1
 8002744:	2028      	movs	r0, #40	@ 0x28
 8002746:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 8002770 <forward_until+0x1b0>
 800274a:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 8002778 <forward_until+0x1b8>
 800274e:	f000 f83f 	bl	80027d0 <reverse>
			  }
			  else{
				  MotorStop_both();
			  }
			  break;
 8002752:	e007      	b.n	8002764 <forward_until+0x1a4>
				  MotorStop_both();
 8002754:	f7fe fc36 	bl	8000fc4 <MotorStop_both>
			  break;
 8002758:	e004      	b.n	8002764 <forward_until+0x1a4>
		  }
		//-----------------------------------------------------------------


		  osDelay(delay);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4618      	mov	r0, r3
 800275e:	f008 f8b5 	bl	800a8cc <osDelay>
		if (emergency_stop){
 8002762:	e769      	b.n	8002638 <forward_until+0x78>
	}
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	f3af 8000 	nop.w
 8002770:	00000000 	.word	0x00000000
 8002774:	3ff00000 	.word	0x3ff00000
 8002778:	00000000 	.word	0x00000000
 800277c:	40440000 	.word	0x40440000
 8002780:	00000000 	.word	0x00000000
 8002784:	20000700 	.word	0x20000700
 8002788:	2000071c 	.word	0x2000071c
 800278c:	200005f0 	.word	0x200005f0
 8002790:	200005e4 	.word	0x200005e4
 8002794:	20000000 	.word	0x20000000
 8002798:	200006fc 	.word	0x200006fc
 800279c:	200005fc 	.word	0x200005fc
 80027a0:	2000073c 	.word	0x2000073c
 80027a4:	20000600 	.word	0x20000600
 80027a8:	20000740 	.word	0x20000740
 80027ac:	447a0000 	.word	0x447a0000
 80027b0:	20000444 	.word	0x20000444
 80027b4:	200003b4 	.word	0x200003b4
 80027b8:	44bea000 	.word	0x44bea000
 80027bc:	200005f4 	.word	0x200005f4
 80027c0:	41a347ae 	.word	0x41a347ae
 80027c4:	200005f8 	.word	0x200005f8
 80027c8:	200005ec 	.word	0x200005ec
 80027cc:	200005bc 	.word	0x200005bc

080027d0 <reverse>:

void reverse(float target_rpm, float target_distance, int delay, int flag){
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	ed87 0a03 	vstr	s0, [r7, #12]
 80027da:	edc7 0a02 	vstr	s1, [r7, #8]
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
	//-------------------- MOTOR START -----------------------
	setPID(&pid_left, 1.5f, 0.0f, 0.0f, 0);
 80027e2:	2100      	movs	r1, #0
 80027e4:	ed9f 1a65 	vldr	s2, [pc, #404]	@ 800297c <reverse+0x1ac>
 80027e8:	eddf 0a64 	vldr	s1, [pc, #400]	@ 800297c <reverse+0x1ac>
 80027ec:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 80027f0:	4863      	ldr	r0, [pc, #396]	@ (8002980 <reverse+0x1b0>)
 80027f2:	f7fe fc03 	bl	8000ffc <setPID>
	setPID(&pid_right, 1.5f, 0.0f, 0.0f, 0);
 80027f6:	2100      	movs	r1, #0
 80027f8:	ed9f 1a60 	vldr	s2, [pc, #384]	@ 800297c <reverse+0x1ac>
 80027fc:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 800297c <reverse+0x1ac>
 8002800:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8002804:	485f      	ldr	r0, [pc, #380]	@ (8002984 <reverse+0x1b4>)
 8002806:	f7fe fbf9 	bl	8000ffc <setPID>
	MotorDrive_enable();
 800280a:	f7fe fbc3 	bl	8000f94 <MotorDrive_enable>
	Motor_direction_both(0);
 800280e:	2000      	movs	r0, #0
 8002810:	f7ff fa34 	bl	8001c7c <Motor_direction_both>
	//--------------------------------------------------------

	distance_travelled = 0.0f;
 8002814:	4b5c      	ldr	r3, [pc, #368]	@ (8002988 <reverse+0x1b8>)
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
	total_left_encoder = 0;
 800281c:	4b5b      	ldr	r3, [pc, #364]	@ (800298c <reverse+0x1bc>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]

	//-------------- Front tire correction ------------------
	if (servo_prev != SERVO_LEFT){
 8002822:	4b5b      	ldr	r3, [pc, #364]	@ (8002990 <reverse+0x1c0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b35      	cmp	r3, #53	@ 0x35
 8002828:	d00e      	beq.n	8002848 <reverse+0x78>
		rotate_wheel(SERVO_LEFT);
 800282a:	2035      	movs	r0, #53	@ 0x35
 800282c:	f000 fbe2 	bl	8002ff4 <rotate_wheel>
		osDelay(100);
 8002830:	2064      	movs	r0, #100	@ 0x64
 8002832:	f008 f84b 	bl	800a8cc <osDelay>
		rotate_wheel(SERVO_MIDDLE);
 8002836:	204c      	movs	r0, #76	@ 0x4c
 8002838:	f000 fbdc 	bl	8002ff4 <rotate_wheel>
		osDelay(100);
 800283c:	2064      	movs	r0, #100	@ 0x64
 800283e:	f008 f845 	bl	800a8cc <osDelay>
		servo_prev = SERVO_LEFT;
 8002842:	4b53      	ldr	r3, [pc, #332]	@ (8002990 <reverse+0x1c0>)
 8002844:	2235      	movs	r2, #53	@ 0x35
 8002846:	601a      	str	r2, [r3, #0]
	}
	//-------------------------------------------------------

	for (;;){
		if (emergency_stop){
 8002848:	4b52      	ldr	r3, [pc, #328]	@ (8002994 <reverse+0x1c4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <reverse+0x86>
			MotorStop_both();
 8002850:	f7fe fbb8 	bl	8000fc4 <MotorStop_both>
			break;
 8002854:	e08e      	b.n	8002974 <reverse+0x1a4>
		}
		//--------------- PID Controller -------------------------
		error_left_rpm = (target_rpm) - motor_left_rpm;
 8002856:	4b50      	ldr	r3, [pc, #320]	@ (8002998 <reverse+0x1c8>)
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002864:	4b4d      	ldr	r3, [pc, #308]	@ (800299c <reverse+0x1cc>)
 8002866:	edc3 7a00 	vstr	s15, [r3]
		error_right_rpm = (target_rpm + RPM_BACK_OFFSET) - motor_right_rpm;
 800286a:	edd7 7a03 	vldr	s15, [r7, #12]
 800286e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002872:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002876:	4b4a      	ldr	r3, [pc, #296]	@ (80029a0 <reverse+0x1d0>)
 8002878:	edd3 7a00 	vldr	s15, [r3]
 800287c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002880:	4b48      	ldr	r3, [pc, #288]	@ (80029a4 <reverse+0x1d4>)
 8002882:	edc3 7a00 	vstr	s15, [r3]

		  PID_Compute(&pid_left, error_left_rpm, (float)(delay/1000.0f));
 8002886:	4b45      	ldr	r3, [pc, #276]	@ (800299c <reverse+0x1cc>)
 8002888:	ed93 7a00 	vldr	s14, [r3]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002896:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 80029a8 <reverse+0x1d8>
 800289a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800289e:	eef0 0a66 	vmov.f32	s1, s13
 80028a2:	eeb0 0a47 	vmov.f32	s0, s14
 80028a6:	4836      	ldr	r0, [pc, #216]	@ (8002980 <reverse+0x1b0>)
 80028a8:	f7ff fcd2 	bl	8002250 <PID_Compute>
		  PID_Compute(&pid_right, error_right_rpm, (float)(delay/1000.0f));
 80028ac:	4b3d      	ldr	r3, [pc, #244]	@ (80029a4 <reverse+0x1d4>)
 80028ae:	ed93 7a00 	vldr	s14, [r3]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028bc:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 80029a8 <reverse+0x1d8>
 80028c0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80028c4:	eef0 0a66 	vmov.f32	s1, s13
 80028c8:	eeb0 0a47 	vmov.f32	s0, s14
 80028cc:	482d      	ldr	r0, [pc, #180]	@ (8002984 <reverse+0x1b4>)
 80028ce:	f7ff fcbf 	bl	8002250 <PID_Compute>

		  __HAL_TIM_SetCompare(&htim9,TIM_CHANNEL_1,pid_left.pwm_output);  //Motor B (left)
 80028d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <reverse+0x1b0>)
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	4b35      	ldr	r3, [pc, #212]	@ (80029ac <reverse+0x1dc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,pid_right.pwm_output); //Motor A (right)
 80028dc:	4b29      	ldr	r3, [pc, #164]	@ (8002984 <reverse+0x1b4>)
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	4b33      	ldr	r3, [pc, #204]	@ (80029b0 <reverse+0x1e0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	63da      	str	r2, [r3, #60]	@ 0x3c
		//-------------------------------------------------------------

		//-------------- Distance Calculation ----------------------
		  total_revolution = total_left_encoder / 1525.0f;  //1320 OR 1405
 80028e6:	4b29      	ldr	r3, [pc, #164]	@ (800298c <reverse+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028f2:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80029b4 <reverse+0x1e4>
 80028f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028fa:	4b2f      	ldr	r3, [pc, #188]	@ (80029b8 <reverse+0x1e8>)
 80028fc:	edc3 7a00 	vstr	s15, [r3]
		  distance_travelled = total_revolution * 20.41f;  // wheel circumference = 20.736 OR 20.41,
 8002900:	4b2d      	ldr	r3, [pc, #180]	@ (80029b8 <reverse+0x1e8>)
 8002902:	edd3 7a00 	vldr	s15, [r3]
 8002906:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80029bc <reverse+0x1ec>
 800290a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800290e:	4b1e      	ldr	r3, [pc, #120]	@ (8002988 <reverse+0x1b8>)
 8002910:	edc3 7a00 	vstr	s15, [r3]

		  total_revolution_int = total_revolution;
 8002914:	4b28      	ldr	r3, [pc, #160]	@ (80029b8 <reverse+0x1e8>)
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800291e:	ee17 2a90 	vmov	r2, s15
 8002922:	4b27      	ldr	r3, [pc, #156]	@ (80029c0 <reverse+0x1f0>)
 8002924:	601a      	str	r2, [r3, #0]
		  distance_travelled_int = distance_travelled;
 8002926:	4b18      	ldr	r3, [pc, #96]	@ (8002988 <reverse+0x1b8>)
 8002928:	edd3 7a00 	vldr	s15, [r3]
 800292c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002930:	ee17 2a90 	vmov	r2, s15
 8002934:	4b23      	ldr	r3, [pc, #140]	@ (80029c4 <reverse+0x1f4>)
 8002936:	601a      	str	r2, [r3, #0]
		//----------------------------------------------------------


		//-------------------- Check distance travelled ------------------
		  if (distance_travelled >= target_distance){
 8002938:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <reverse+0x1b8>)
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294a:	d80e      	bhi.n	800296a <reverse+0x19a>
			  if (flag){
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <reverse+0x194>
				  forward(40.0f, 1.0f, 40, 1);
 8002952:	2101      	movs	r1, #1
 8002954:	2028      	movs	r0, #40	@ 0x28
 8002956:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800295a:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 80029c8 <reverse+0x1f8>
 800295e:	f7ff fd27 	bl	80023b0 <forward>
			  }
			  else{
				  MotorStop_both();
			  }
			  break;
 8002962:	e007      	b.n	8002974 <reverse+0x1a4>
				  MotorStop_both();
 8002964:	f7fe fb2e 	bl	8000fc4 <MotorStop_both>
			  break;
 8002968:	e004      	b.n	8002974 <reverse+0x1a4>
		  }
		//-----------------------------------------------------------------

		  osDelay(delay);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4618      	mov	r0, r3
 800296e:	f007 ffad 	bl	800a8cc <osDelay>
		if (emergency_stop){
 8002972:	e769      	b.n	8002848 <reverse+0x78>
	}
}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	00000000 	.word	0x00000000
 8002980:	20000700 	.word	0x20000700
 8002984:	2000071c 	.word	0x2000071c
 8002988:	200005f0 	.word	0x200005f0
 800298c:	200005e4 	.word	0x200005e4
 8002990:	20000000 	.word	0x20000000
 8002994:	200006fc 	.word	0x200006fc
 8002998:	200005fc 	.word	0x200005fc
 800299c:	2000073c 	.word	0x2000073c
 80029a0:	20000600 	.word	0x20000600
 80029a4:	20000740 	.word	0x20000740
 80029a8:	447a0000 	.word	0x447a0000
 80029ac:	20000444 	.word	0x20000444
 80029b0:	200003b4 	.word	0x200003b4
 80029b4:	44bea000 	.word	0x44bea000
 80029b8:	200005f4 	.word	0x200005f4
 80029bc:	41a347ae 	.word	0x41a347ae
 80029c0:	200005f8 	.word	0x200005f8
 80029c4:	200005ec 	.word	0x200005ec
 80029c8:	42200000 	.word	0x42200000

080029cc <reverse_until>:

void reverse_until(float target_rpm, float target_distance, int delay, int flag){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	ed87 0a03 	vstr	s0, [r7, #12]
 80029d6:	edc7 0a02 	vstr	s1, [r7, #8]
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
	//-------------------- MOTOR START -----------------------
	setPID(&pid_left, 1.5f, 0.0f, 0.0f, 0);
 80029de:	2100      	movs	r1, #0
 80029e0:	ed9f 1a65 	vldr	s2, [pc, #404]	@ 8002b78 <reverse_until+0x1ac>
 80029e4:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8002b78 <reverse_until+0x1ac>
 80029e8:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 80029ec:	4863      	ldr	r0, [pc, #396]	@ (8002b7c <reverse_until+0x1b0>)
 80029ee:	f7fe fb05 	bl	8000ffc <setPID>
	setPID(&pid_right, 1.5f, 0.0f, 0.0f, 0);
 80029f2:	2100      	movs	r1, #0
 80029f4:	ed9f 1a60 	vldr	s2, [pc, #384]	@ 8002b78 <reverse_until+0x1ac>
 80029f8:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8002b78 <reverse_until+0x1ac>
 80029fc:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8002a00:	485f      	ldr	r0, [pc, #380]	@ (8002b80 <reverse_until+0x1b4>)
 8002a02:	f7fe fafb 	bl	8000ffc <setPID>
	MotorDrive_enable();
 8002a06:	f7fe fac5 	bl	8000f94 <MotorDrive_enable>
	Motor_direction_both(0);
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7ff f936 	bl	8001c7c <Motor_direction_both>
	//--------------------------------------------------------

	distance_travelled = 0.0f;
 8002a10:	4b5c      	ldr	r3, [pc, #368]	@ (8002b84 <reverse_until+0x1b8>)
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
	total_left_encoder = 0;
 8002a18:	4b5b      	ldr	r3, [pc, #364]	@ (8002b88 <reverse_until+0x1bc>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

	//-------------- Front tire correction ------------------
	if (servo_prev != SERVO_LEFT){
 8002a1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002b8c <reverse_until+0x1c0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b35      	cmp	r3, #53	@ 0x35
 8002a24:	d00e      	beq.n	8002a44 <reverse_until+0x78>
		rotate_wheel(SERVO_LEFT);
 8002a26:	2035      	movs	r0, #53	@ 0x35
 8002a28:	f000 fae4 	bl	8002ff4 <rotate_wheel>
		osDelay(100);
 8002a2c:	2064      	movs	r0, #100	@ 0x64
 8002a2e:	f007 ff4d 	bl	800a8cc <osDelay>
		rotate_wheel(SERVO_MIDDLE);
 8002a32:	204c      	movs	r0, #76	@ 0x4c
 8002a34:	f000 fade 	bl	8002ff4 <rotate_wheel>
		osDelay(100);
 8002a38:	2064      	movs	r0, #100	@ 0x64
 8002a3a:	f007 ff47 	bl	800a8cc <osDelay>
		servo_prev = SERVO_LEFT;
 8002a3e:	4b53      	ldr	r3, [pc, #332]	@ (8002b8c <reverse_until+0x1c0>)
 8002a40:	2235      	movs	r2, #53	@ 0x35
 8002a42:	601a      	str	r2, [r3, #0]
	}
	//-------------------------------------------------------

	for (;;){
		if (emergency_stop){
 8002a44:	4b52      	ldr	r3, [pc, #328]	@ (8002b90 <reverse_until+0x1c4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <reverse_until+0x86>
			MotorStop_both();
 8002a4c:	f7fe faba 	bl	8000fc4 <MotorStop_both>
			break;
 8002a50:	e08e      	b.n	8002b70 <reverse_until+0x1a4>
		}
		//--------------- PID Controller -------------------------
		error_left_rpm = (target_rpm) - motor_left_rpm;
 8002a52:	4b50      	ldr	r3, [pc, #320]	@ (8002b94 <reverse_until+0x1c8>)
 8002a54:	edd3 7a00 	vldr	s15, [r3]
 8002a58:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a60:	4b4d      	ldr	r3, [pc, #308]	@ (8002b98 <reverse_until+0x1cc>)
 8002a62:	edc3 7a00 	vstr	s15, [r3]
		error_right_rpm = (target_rpm + RPM_BACK_OFFSET) - motor_right_rpm;
 8002a66:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a6a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a72:	4b4a      	ldr	r3, [pc, #296]	@ (8002b9c <reverse_until+0x1d0>)
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7c:	4b48      	ldr	r3, [pc, #288]	@ (8002ba0 <reverse_until+0x1d4>)
 8002a7e:	edc3 7a00 	vstr	s15, [r3]

		  PID_Compute(&pid_left, error_left_rpm, (float)(delay/1000.0f));
 8002a82:	4b45      	ldr	r3, [pc, #276]	@ (8002b98 <reverse_until+0x1cc>)
 8002a84:	ed93 7a00 	vldr	s14, [r3]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a92:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8002ba4 <reverse_until+0x1d8>
 8002a96:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002a9a:	eef0 0a66 	vmov.f32	s1, s13
 8002a9e:	eeb0 0a47 	vmov.f32	s0, s14
 8002aa2:	4836      	ldr	r0, [pc, #216]	@ (8002b7c <reverse_until+0x1b0>)
 8002aa4:	f7ff fbd4 	bl	8002250 <PID_Compute>
		  PID_Compute(&pid_right, error_right_rpm, (float)(delay/1000.0f));
 8002aa8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba0 <reverse_until+0x1d4>)
 8002aaa:	ed93 7a00 	vldr	s14, [r3]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	ee07 3a90 	vmov	s15, r3
 8002ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab8:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 8002ba4 <reverse_until+0x1d8>
 8002abc:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002ac0:	eef0 0a66 	vmov.f32	s1, s13
 8002ac4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ac8:	482d      	ldr	r0, [pc, #180]	@ (8002b80 <reverse_until+0x1b4>)
 8002aca:	f7ff fbc1 	bl	8002250 <PID_Compute>

		  __HAL_TIM_SetCompare(&htim9,TIM_CHANNEL_1,pid_left.pwm_output);  //Motor B (left)
 8002ace:	4b2b      	ldr	r3, [pc, #172]	@ (8002b7c <reverse_until+0x1b0>)
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	4b35      	ldr	r3, [pc, #212]	@ (8002ba8 <reverse_until+0x1dc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,pid_right.pwm_output); //Motor A (right)
 8002ad8:	4b29      	ldr	r3, [pc, #164]	@ (8002b80 <reverse_until+0x1b4>)
 8002ada:	699a      	ldr	r2, [r3, #24]
 8002adc:	4b33      	ldr	r3, [pc, #204]	@ (8002bac <reverse_until+0x1e0>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	63da      	str	r2, [r3, #60]	@ 0x3c
		//-------------------------------------------------------------

		//-------------- Distance Calculation ----------------------
		  total_revolution = total_left_encoder / 1525.0f;  //1320 OR 1405
 8002ae2:	4b29      	ldr	r3, [pc, #164]	@ (8002b88 <reverse_until+0x1bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002aee:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8002bb0 <reverse_until+0x1e4>
 8002af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002af6:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb4 <reverse_until+0x1e8>)
 8002af8:	edc3 7a00 	vstr	s15, [r3]
		  distance_travelled = total_revolution * 20.41f;  // wheel circumference = 20.736 OR 20.41,
 8002afc:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb4 <reverse_until+0x1e8>)
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002bb8 <reverse_until+0x1ec>
 8002b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b84 <reverse_until+0x1b8>)
 8002b0c:	edc3 7a00 	vstr	s15, [r3]

		  total_revolution_int = total_revolution;
 8002b10:	4b28      	ldr	r3, [pc, #160]	@ (8002bb4 <reverse_until+0x1e8>)
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b1a:	ee17 2a90 	vmov	r2, s15
 8002b1e:	4b27      	ldr	r3, [pc, #156]	@ (8002bbc <reverse_until+0x1f0>)
 8002b20:	601a      	str	r2, [r3, #0]
		  distance_travelled_int = distance_travelled;
 8002b22:	4b18      	ldr	r3, [pc, #96]	@ (8002b84 <reverse_until+0x1b8>)
 8002b24:	edd3 7a00 	vldr	s15, [r3]
 8002b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b2c:	ee17 2a90 	vmov	r2, s15
 8002b30:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <reverse_until+0x1f4>)
 8002b32:	601a      	str	r2, [r3, #0]
		//----------------------------------------------------------


		//-------------------- Check distance travelled ------------------
		  if (us_dist >= target_distance){
 8002b34:	4b23      	ldr	r3, [pc, #140]	@ (8002bc4 <reverse_until+0x1f8>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b46:	d80e      	bhi.n	8002b66 <reverse_until+0x19a>
			  if (flag){
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <reverse_until+0x194>
				  forward(40.0f, 1.0f, 40, 1);
 8002b4e:	2101      	movs	r1, #1
 8002b50:	2028      	movs	r0, #40	@ 0x28
 8002b52:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002b56:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8002bc8 <reverse_until+0x1fc>
 8002b5a:	f7ff fc29 	bl	80023b0 <forward>
			  }
			  else{
				  MotorStop_both();
			  }
			  break;
 8002b5e:	e007      	b.n	8002b70 <reverse_until+0x1a4>
				  MotorStop_both();
 8002b60:	f7fe fa30 	bl	8000fc4 <MotorStop_both>
			  break;
 8002b64:	e004      	b.n	8002b70 <reverse_until+0x1a4>
		  }
		//-----------------------------------------------------------------

		  osDelay(delay);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f007 feaf 	bl	800a8cc <osDelay>
		if (emergency_stop){
 8002b6e:	e769      	b.n	8002a44 <reverse_until+0x78>
	}
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	00000000 	.word	0x00000000
 8002b7c:	20000700 	.word	0x20000700
 8002b80:	2000071c 	.word	0x2000071c
 8002b84:	200005f0 	.word	0x200005f0
 8002b88:	200005e4 	.word	0x200005e4
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	200006fc 	.word	0x200006fc
 8002b94:	200005fc 	.word	0x200005fc
 8002b98:	2000073c 	.word	0x2000073c
 8002b9c:	20000600 	.word	0x20000600
 8002ba0:	20000740 	.word	0x20000740
 8002ba4:	447a0000 	.word	0x447a0000
 8002ba8:	20000444 	.word	0x20000444
 8002bac:	200003b4 	.word	0x200003b4
 8002bb0:	44bea000 	.word	0x44bea000
 8002bb4:	200005f4 	.word	0x200005f4
 8002bb8:	41a347ae 	.word	0x41a347ae
 8002bbc:	200005f8 	.word	0x200005f8
 8002bc0:	200005ec 	.word	0x200005ec
 8002bc4:	200005bc 	.word	0x200005bc
 8002bc8:	42200000 	.word	0x42200000

08002bcc <forwardTurn>:

void forwardTurn(int dir, float target_angle, float target_rpm, int delay){
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002bd8:	edc7 0a01 	vstr	s1, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
	//-------------------- Servo Init -----------------------
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002bde:	2100      	movs	r1, #0
 8002be0:	4868      	ldr	r0, [pc, #416]	@ (8002d84 <forwardTurn+0x1b8>)
 8002be2:	f005 f9af 	bl	8007f44 <HAL_TIM_PWM_Start>
	htim12.Instance->CCR1 = dir;
 8002be6:	4b67      	ldr	r3, [pc, #412]	@ (8002d84 <forwardTurn+0x1b8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	635a      	str	r2, [r3, #52]	@ 0x34
	if (dir < SERVO_MIDDLE){
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b4b      	cmp	r3, #75	@ 0x4b
 8002bf2:	dc03      	bgt.n	8002bfc <forwardTurn+0x30>
		servo_prev = SERVO_LEFT;
 8002bf4:	4b64      	ldr	r3, [pc, #400]	@ (8002d88 <forwardTurn+0x1bc>)
 8002bf6:	2235      	movs	r2, #53	@ 0x35
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e002      	b.n	8002c02 <forwardTurn+0x36>
	}
	else{
		servo_prev = SERVO_RIGHT;
 8002bfc:	4b62      	ldr	r3, [pc, #392]	@ (8002d88 <forwardTurn+0x1bc>)
 8002bfe:	2273      	movs	r2, #115	@ 0x73
 8002c00:	601a      	str	r2, [r3, #0]
	}
	//--------------------------------------------------------

	//-------------------- MOTOR START -----------------------
	setPID(&pid_left, 1.0f, 0.0f, 0.0f, 0);
 8002c02:	2100      	movs	r1, #0
 8002c04:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8002d8c <forwardTurn+0x1c0>
 8002c08:	eddf 0a60 	vldr	s1, [pc, #384]	@ 8002d8c <forwardTurn+0x1c0>
 8002c0c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002c10:	485f      	ldr	r0, [pc, #380]	@ (8002d90 <forwardTurn+0x1c4>)
 8002c12:	f7fe f9f3 	bl	8000ffc <setPID>
	setPID(&pid_right, 1.0f, 0.0f, 0.0f, 0);
 8002c16:	2100      	movs	r1, #0
 8002c18:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 8002d8c <forwardTurn+0x1c0>
 8002c1c:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8002d8c <forwardTurn+0x1c0>
 8002c20:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002c24:	485b      	ldr	r0, [pc, #364]	@ (8002d94 <forwardTurn+0x1c8>)
 8002c26:	f7fe f9e9 	bl	8000ffc <setPID>
	MotorDrive_enable();
 8002c2a:	f7fe f9b3 	bl	8000f94 <MotorDrive_enable>
	Motor_direction_both(1);
 8002c2e:	2001      	movs	r0, #1
 8002c30:	f7ff f824 	bl	8001c7c <Motor_direction_both>
	//--------------------------------------------------------

	osDelay(100);
 8002c34:	2064      	movs	r0, #100	@ 0x64
 8002c36:	f007 fe49 	bl	800a8cc <osDelay>
	prev_angle_direction = 0.0f;
 8002c3a:	4b57      	ldr	r3, [pc, #348]	@ (8002d98 <forwardTurn+0x1cc>)
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
	angle_direction = 0.0f;
 8002c42:	4b56      	ldr	r3, [pc, #344]	@ (8002d9c <forwardTurn+0x1d0>)
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]


	for (;;){
		if (emergency_stop){
 8002c4a:	4b55      	ldr	r3, [pc, #340]	@ (8002da0 <forwardTurn+0x1d4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <forwardTurn+0x8c>
			MotorStop_both();
 8002c52:	f7fe f9b7 	bl	8000fc4 <MotorStop_both>
			break;
 8002c56:	e090      	b.n	8002d7a <forwardTurn+0x1ae>
		}
		//------------- Turning motion -------------------------
		  error_angle = target_angle - fabsf(angle_direction);
 8002c58:	4b50      	ldr	r3, [pc, #320]	@ (8002d9c <forwardTurn+0x1d0>)
 8002c5a:	edd3 7a00 	vldr	s15, [r3]
 8002c5e:	eef0 7ae7 	vabs.f32	s15, s15
 8002c62:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8002da4 <forwardTurn+0x1d8>)
 8002c6c:	edc3 7a00 	vstr	s15, [r3]
		  error_angle_int = error_angle;
 8002c70:	4b4c      	ldr	r3, [pc, #304]	@ (8002da4 <forwardTurn+0x1d8>)
 8002c72:	edd3 7a00 	vldr	s15, [r3]
 8002c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c7a:	ee17 2a90 	vmov	r2, s15
 8002c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002da8 <forwardTurn+0x1dc>)
 8002c80:	601a      	str	r2, [r3, #0]
		//------------------------------------------------------

		//--------------- PID Controller -------------------------
		  if (dir > SERVO_MIDDLE){
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b4c      	cmp	r3, #76	@ 0x4c
 8002c86:	dd18      	ble.n	8002cba <forwardTurn+0xee>
			  error_left_rpm = (target_rpm) - motor_left_rpm;          //60rpm
 8002c88:	4b48      	ldr	r3, [pc, #288]	@ (8002dac <forwardTurn+0x1e0>)
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c96:	4b46      	ldr	r3, [pc, #280]	@ (8002db0 <forwardTurn+0x1e4>)
 8002c98:	edc3 7a00 	vstr	s15, [r3]
			  error_right_rpm = (target_rpm-15.0f) - motor_right_rpm;  //40rpm
 8002c9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ca0:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8002ca4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002ca8:	4b42      	ldr	r3, [pc, #264]	@ (8002db4 <forwardTurn+0x1e8>)
 8002caa:	edd3 7a00 	vldr	s15, [r3]
 8002cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb2:	4b41      	ldr	r3, [pc, #260]	@ (8002db8 <forwardTurn+0x1ec>)
 8002cb4:	edc3 7a00 	vstr	s15, [r3]
 8002cb8:	e017      	b.n	8002cea <forwardTurn+0x11e>
		  }
		  else{
			  error_left_rpm = (target_rpm-15.0f) - motor_left_rpm;
 8002cba:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cbe:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8002cc2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002cc6:	4b39      	ldr	r3, [pc, #228]	@ (8002dac <forwardTurn+0x1e0>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd0:	4b37      	ldr	r3, [pc, #220]	@ (8002db0 <forwardTurn+0x1e4>)
 8002cd2:	edc3 7a00 	vstr	s15, [r3]
			  error_right_rpm = (target_rpm) - motor_right_rpm;
 8002cd6:	4b37      	ldr	r3, [pc, #220]	@ (8002db4 <forwardTurn+0x1e8>)
 8002cd8:	edd3 7a00 	vldr	s15, [r3]
 8002cdc:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce4:	4b34      	ldr	r3, [pc, #208]	@ (8002db8 <forwardTurn+0x1ec>)
 8002ce6:	edc3 7a00 	vstr	s15, [r3]
		  }

		  PID_Compute(&pid_left, error_left_rpm, (float)(delay/1000.0f));
 8002cea:	4b31      	ldr	r3, [pc, #196]	@ (8002db0 <forwardTurn+0x1e4>)
 8002cec:	ed93 7a00 	vldr	s14, [r3]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cfa:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8002dbc <forwardTurn+0x1f0>
 8002cfe:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002d02:	eef0 0a66 	vmov.f32	s1, s13
 8002d06:	eeb0 0a47 	vmov.f32	s0, s14
 8002d0a:	4821      	ldr	r0, [pc, #132]	@ (8002d90 <forwardTurn+0x1c4>)
 8002d0c:	f7ff faa0 	bl	8002250 <PID_Compute>
		  PID_Compute(&pid_right, error_right_rpm, (float)(delay/1000.0f));
 8002d10:	4b29      	ldr	r3, [pc, #164]	@ (8002db8 <forwardTurn+0x1ec>)
 8002d12:	ed93 7a00 	vldr	s14, [r3]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	ee07 3a90 	vmov	s15, r3
 8002d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d20:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8002dbc <forwardTurn+0x1f0>
 8002d24:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002d28:	eef0 0a66 	vmov.f32	s1, s13
 8002d2c:	eeb0 0a47 	vmov.f32	s0, s14
 8002d30:	4818      	ldr	r0, [pc, #96]	@ (8002d94 <forwardTurn+0x1c8>)
 8002d32:	f7ff fa8d 	bl	8002250 <PID_Compute>

		  __HAL_TIM_SetCompare(&htim9,TIM_CHANNEL_2,pid_left.pwm_output);  //Motor B (left)
 8002d36:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <forwardTurn+0x1c4>)
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	4b21      	ldr	r3, [pc, #132]	@ (8002dc0 <forwardTurn+0x1f4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	639a      	str	r2, [r3, #56]	@ 0x38
		  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,pid_right.pwm_output); //Motor A (right)
 8002d40:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <forwardTurn+0x1c8>)
 8002d42:	699a      	ldr	r2, [r3, #24]
 8002d44:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc4 <forwardTurn+0x1f8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	641a      	str	r2, [r3, #64]	@ 0x40
		//-------------------------------------------------------------

		//------------------ Check angle turned --------------------------
		  if ((error_angle) <= 0.0f){
 8002d4a:	4b16      	ldr	r3, [pc, #88]	@ (8002da4 <forwardTurn+0x1d8>)
 8002d4c:	edd3 7a00 	vldr	s15, [r3]
 8002d50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d58:	d80a      	bhi.n	8002d70 <forwardTurn+0x1a4>
			  MotorStop_both();
 8002d5a:	f7fe f933 	bl	8000fc4 <MotorStop_both>
			  osDelay(300);
 8002d5e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002d62:	f007 fdb3 	bl	800a8cc <osDelay>
			  htim12.Instance->CCR1 = SERVO_MIDDLE;
 8002d66:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <forwardTurn+0x1b8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	224c      	movs	r2, #76	@ 0x4c
 8002d6c:	635a      	str	r2, [r3, #52]	@ 0x34
			  break;
 8002d6e:	e004      	b.n	8002d7a <forwardTurn+0x1ae>
		  }
		//----------------------------------------------------------------

		  osDelay(delay);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f007 fdaa 	bl	800a8cc <osDelay>
	for (;;){
 8002d78:	e767      	b.n	8002c4a <forwardTurn+0x7e>
	}

}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	2000048c 	.word	0x2000048c
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	00000000 	.word	0x00000000
 8002d90:	20000700 	.word	0x20000700
 8002d94:	2000071c 	.word	0x2000071c
 8002d98:	200005b4 	.word	0x200005b4
 8002d9c:	200005ac 	.word	0x200005ac
 8002da0:	200006fc 	.word	0x200006fc
 8002da4:	20000744 	.word	0x20000744
 8002da8:	20000748 	.word	0x20000748
 8002dac:	200005fc 	.word	0x200005fc
 8002db0:	2000073c 	.word	0x2000073c
 8002db4:	20000600 	.word	0x20000600
 8002db8:	20000740 	.word	0x20000740
 8002dbc:	447a0000 	.word	0x447a0000
 8002dc0:	20000444 	.word	0x20000444
 8002dc4:	200003b4 	.word	0x200003b4

08002dc8 <reverseTurn>:

void reverseTurn(int dir, float target_angle, float target_rpm, int delay){
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002dd4:	edc7 0a01 	vstr	s1, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
	//-------------------- Servo Init -----------------------
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4868      	ldr	r0, [pc, #416]	@ (8002f80 <reverseTurn+0x1b8>)
 8002dde:	f005 f8b1 	bl	8007f44 <HAL_TIM_PWM_Start>
	htim12.Instance->CCR1 = dir;
 8002de2:	4b67      	ldr	r3, [pc, #412]	@ (8002f80 <reverseTurn+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	635a      	str	r2, [r3, #52]	@ 0x34
	if (dir < SERVO_MIDDLE){
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b4b      	cmp	r3, #75	@ 0x4b
 8002dee:	dc03      	bgt.n	8002df8 <reverseTurn+0x30>
		servo_prev = SERVO_LEFT;
 8002df0:	4b64      	ldr	r3, [pc, #400]	@ (8002f84 <reverseTurn+0x1bc>)
 8002df2:	2235      	movs	r2, #53	@ 0x35
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e002      	b.n	8002dfe <reverseTurn+0x36>
	}
	else{
		servo_prev = SERVO_RIGHT;
 8002df8:	4b62      	ldr	r3, [pc, #392]	@ (8002f84 <reverseTurn+0x1bc>)
 8002dfa:	2273      	movs	r2, #115	@ 0x73
 8002dfc:	601a      	str	r2, [r3, #0]
	}
	//--------------------------------------------------------

	//-------------------- MOTOR START -----------------------
	setPID(&pid_left, 1.0f, 0.0f, 0.0f, 0);
 8002dfe:	2100      	movs	r1, #0
 8002e00:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8002f88 <reverseTurn+0x1c0>
 8002e04:	eddf 0a60 	vldr	s1, [pc, #384]	@ 8002f88 <reverseTurn+0x1c0>
 8002e08:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002e0c:	485f      	ldr	r0, [pc, #380]	@ (8002f8c <reverseTurn+0x1c4>)
 8002e0e:	f7fe f8f5 	bl	8000ffc <setPID>
	setPID(&pid_right, 1.0f, 0.0f, 0.0f, 0);
 8002e12:	2100      	movs	r1, #0
 8002e14:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 8002f88 <reverseTurn+0x1c0>
 8002e18:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8002f88 <reverseTurn+0x1c0>
 8002e1c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002e20:	485b      	ldr	r0, [pc, #364]	@ (8002f90 <reverseTurn+0x1c8>)
 8002e22:	f7fe f8eb 	bl	8000ffc <setPID>
	MotorDrive_enable();
 8002e26:	f7fe f8b5 	bl	8000f94 <MotorDrive_enable>
	Motor_direction_both(0);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fe ff26 	bl	8001c7c <Motor_direction_both>
	//--------------------------------------------------------

	osDelay(100);
 8002e30:	2064      	movs	r0, #100	@ 0x64
 8002e32:	f007 fd4b 	bl	800a8cc <osDelay>
	prev_angle_direction = 0.0f;
 8002e36:	4b57      	ldr	r3, [pc, #348]	@ (8002f94 <reverseTurn+0x1cc>)
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
	angle_direction = 0.0f;
 8002e3e:	4b56      	ldr	r3, [pc, #344]	@ (8002f98 <reverseTurn+0x1d0>)
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]

	for (;;){
		if (emergency_stop){
 8002e46:	4b55      	ldr	r3, [pc, #340]	@ (8002f9c <reverseTurn+0x1d4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <reverseTurn+0x8c>
			MotorStop_both();
 8002e4e:	f7fe f8b9 	bl	8000fc4 <MotorStop_both>
			break;
 8002e52:	e090      	b.n	8002f76 <reverseTurn+0x1ae>
		}
		//------------- Turning motion -------------------------
		  error_angle = target_angle - fabsf(angle_direction);
 8002e54:	4b50      	ldr	r3, [pc, #320]	@ (8002f98 <reverseTurn+0x1d0>)
 8002e56:	edd3 7a00 	vldr	s15, [r3]
 8002e5a:	eef0 7ae7 	vabs.f32	s15, s15
 8002e5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e66:	4b4e      	ldr	r3, [pc, #312]	@ (8002fa0 <reverseTurn+0x1d8>)
 8002e68:	edc3 7a00 	vstr	s15, [r3]
		  error_angle_int = error_angle;
 8002e6c:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa0 <reverseTurn+0x1d8>)
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e76:	ee17 2a90 	vmov	r2, s15
 8002e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa4 <reverseTurn+0x1dc>)
 8002e7c:	601a      	str	r2, [r3, #0]
		//------------------------------------------------------

		//--------------- PID Controller -------------------------
		  if (dir > SERVO_MIDDLE){
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b4c      	cmp	r3, #76	@ 0x4c
 8002e82:	dd18      	ble.n	8002eb6 <reverseTurn+0xee>
			  error_left_rpm = (target_rpm) - motor_left_rpm;          //60rpm
 8002e84:	4b48      	ldr	r3, [pc, #288]	@ (8002fa8 <reverseTurn+0x1e0>)
 8002e86:	edd3 7a00 	vldr	s15, [r3]
 8002e8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e92:	4b46      	ldr	r3, [pc, #280]	@ (8002fac <reverseTurn+0x1e4>)
 8002e94:	edc3 7a00 	vstr	s15, [r3]
			  error_right_rpm = (target_rpm-15.0f) - motor_right_rpm;  //40rpm
 8002e98:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e9c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8002ea0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002ea4:	4b42      	ldr	r3, [pc, #264]	@ (8002fb0 <reverseTurn+0x1e8>)
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eae:	4b41      	ldr	r3, [pc, #260]	@ (8002fb4 <reverseTurn+0x1ec>)
 8002eb0:	edc3 7a00 	vstr	s15, [r3]
 8002eb4:	e017      	b.n	8002ee6 <reverseTurn+0x11e>
		  }
		  else{
			  error_left_rpm = (target_rpm-15.0f) - motor_left_rpm;
 8002eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eba:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8002ebe:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002ec2:	4b39      	ldr	r3, [pc, #228]	@ (8002fa8 <reverseTurn+0x1e0>)
 8002ec4:	edd3 7a00 	vldr	s15, [r3]
 8002ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ecc:	4b37      	ldr	r3, [pc, #220]	@ (8002fac <reverseTurn+0x1e4>)
 8002ece:	edc3 7a00 	vstr	s15, [r3]
			  error_right_rpm = (target_rpm) - motor_right_rpm;
 8002ed2:	4b37      	ldr	r3, [pc, #220]	@ (8002fb0 <reverseTurn+0x1e8>)
 8002ed4:	edd3 7a00 	vldr	s15, [r3]
 8002ed8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002edc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee0:	4b34      	ldr	r3, [pc, #208]	@ (8002fb4 <reverseTurn+0x1ec>)
 8002ee2:	edc3 7a00 	vstr	s15, [r3]
		  }

		  PID_Compute(&pid_left, error_left_rpm, (float)(delay/1000.0f));
 8002ee6:	4b31      	ldr	r3, [pc, #196]	@ (8002fac <reverseTurn+0x1e4>)
 8002ee8:	ed93 7a00 	vldr	s14, [r3]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef6:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8002fb8 <reverseTurn+0x1f0>
 8002efa:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002efe:	eef0 0a66 	vmov.f32	s1, s13
 8002f02:	eeb0 0a47 	vmov.f32	s0, s14
 8002f06:	4821      	ldr	r0, [pc, #132]	@ (8002f8c <reverseTurn+0x1c4>)
 8002f08:	f7ff f9a2 	bl	8002250 <PID_Compute>
		  PID_Compute(&pid_right, error_right_rpm, (float)(delay/1000.0f));
 8002f0c:	4b29      	ldr	r3, [pc, #164]	@ (8002fb4 <reverseTurn+0x1ec>)
 8002f0e:	ed93 7a00 	vldr	s14, [r3]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f1c:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 8002fb8 <reverseTurn+0x1f0>
 8002f20:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002f24:	eef0 0a66 	vmov.f32	s1, s13
 8002f28:	eeb0 0a47 	vmov.f32	s0, s14
 8002f2c:	4818      	ldr	r0, [pc, #96]	@ (8002f90 <reverseTurn+0x1c8>)
 8002f2e:	f7ff f98f 	bl	8002250 <PID_Compute>

		  __HAL_TIM_SetCompare(&htim9,TIM_CHANNEL_1,pid_left.pwm_output);  //Motor B (left)
 8002f32:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <reverseTurn+0x1c4>)
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	4b21      	ldr	r3, [pc, #132]	@ (8002fbc <reverseTurn+0x1f4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,pid_right.pwm_output); //Motor A (right)
 8002f3c:	4b14      	ldr	r3, [pc, #80]	@ (8002f90 <reverseTurn+0x1c8>)
 8002f3e:	699a      	ldr	r2, [r3, #24]
 8002f40:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc0 <reverseTurn+0x1f8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	63da      	str	r2, [r3, #60]	@ 0x3c
		//-------------------------------------------------------------

		//------------------ Check angle turned --------------------------
		  if ((error_angle) <= 0.0f){
 8002f46:	4b16      	ldr	r3, [pc, #88]	@ (8002fa0 <reverseTurn+0x1d8>)
 8002f48:	edd3 7a00 	vldr	s15, [r3]
 8002f4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f54:	d80a      	bhi.n	8002f6c <reverseTurn+0x1a4>
			  MotorStop_both();
 8002f56:	f7fe f835 	bl	8000fc4 <MotorStop_both>
			  osDelay(300);
 8002f5a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002f5e:	f007 fcb5 	bl	800a8cc <osDelay>
			  htim12.Instance->CCR1 = SERVO_MIDDLE;
 8002f62:	4b07      	ldr	r3, [pc, #28]	@ (8002f80 <reverseTurn+0x1b8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	224c      	movs	r2, #76	@ 0x4c
 8002f68:	635a      	str	r2, [r3, #52]	@ 0x34
			  break;
 8002f6a:	e004      	b.n	8002f76 <reverseTurn+0x1ae>
		  }
		//----------------------------------------------------------------

		  osDelay(delay);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f007 fcac 	bl	800a8cc <osDelay>
	for (;;){
 8002f74:	e767      	b.n	8002e46 <reverseTurn+0x7e>
	}

}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	2000048c 	.word	0x2000048c
 8002f84:	20000000 	.word	0x20000000
 8002f88:	00000000 	.word	0x00000000
 8002f8c:	20000700 	.word	0x20000700
 8002f90:	2000071c 	.word	0x2000071c
 8002f94:	200005b4 	.word	0x200005b4
 8002f98:	200005ac 	.word	0x200005ac
 8002f9c:	200006fc 	.word	0x200006fc
 8002fa0:	20000744 	.word	0x20000744
 8002fa4:	20000748 	.word	0x20000748
 8002fa8:	200005fc 	.word	0x200005fc
 8002fac:	2000073c 	.word	0x2000073c
 8002fb0:	20000600 	.word	0x20000600
 8002fb4:	20000740 	.word	0x20000740
 8002fb8:	447a0000 	.word	0x447a0000
 8002fbc:	20000444 	.word	0x20000444
 8002fc0:	200003b4 	.word	0x200003b4

08002fc4 <buzzerOn>:

void buzzerOn(int delay){
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002fcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fd0:	4807      	ldr	r0, [pc, #28]	@ (8002ff0 <buzzerOn+0x2c>)
 8002fd2:	f002 fc94 	bl	80058fe <HAL_GPIO_TogglePin>
	osDelay(delay);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f007 fc77 	bl	800a8cc <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002fde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fe2:	4803      	ldr	r0, [pc, #12]	@ (8002ff0 <buzzerOn+0x2c>)
 8002fe4:	f002 fc8b 	bl	80058fe <HAL_GPIO_TogglePin>
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40020000 	.word	0x40020000

08002ff4 <rotate_wheel>:

void rotate_wheel(int side){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4805      	ldr	r0, [pc, #20]	@ (8003014 <rotate_wheel+0x20>)
 8003000:	f004 ffa0 	bl	8007f44 <HAL_TIM_PWM_Start>
	htim12.Instance->CCR1 = side;
 8003004:	4b03      	ldr	r3, [pc, #12]	@ (8003014 <rotate_wheel+0x20>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	2000048c 	.word	0x2000048c

08003018 <convert_from_angle>:
//67 - 10
//63 - 15
//60 - 20
//55 ~ 25
//53 - 30
void convert_from_angle(int angle){
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	switch (angle){
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	331e      	adds	r3, #30
 8003024:	2b3c      	cmp	r3, #60	@ 0x3c
 8003026:	f200 80a9 	bhi.w	800317c <convert_from_angle+0x164>
 800302a:	a201      	add	r2, pc, #4	@ (adr r2, 8003030 <convert_from_angle+0x18>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	08003175 	.word	0x08003175
 8003034:	0800317d 	.word	0x0800317d
 8003038:	0800317d 	.word	0x0800317d
 800303c:	0800317d 	.word	0x0800317d
 8003040:	0800317d 	.word	0x0800317d
 8003044:	0800316d 	.word	0x0800316d
 8003048:	0800317d 	.word	0x0800317d
 800304c:	0800317d 	.word	0x0800317d
 8003050:	0800317d 	.word	0x0800317d
 8003054:	0800317d 	.word	0x0800317d
 8003058:	08003165 	.word	0x08003165
 800305c:	0800317d 	.word	0x0800317d
 8003060:	0800317d 	.word	0x0800317d
 8003064:	0800317d 	.word	0x0800317d
 8003068:	0800317d 	.word	0x0800317d
 800306c:	0800315d 	.word	0x0800315d
 8003070:	0800317d 	.word	0x0800317d
 8003074:	0800317d 	.word	0x0800317d
 8003078:	0800317d 	.word	0x0800317d
 800307c:	0800317d 	.word	0x0800317d
 8003080:	08003155 	.word	0x08003155
 8003084:	0800317d 	.word	0x0800317d
 8003088:	0800317d 	.word	0x0800317d
 800308c:	0800317d 	.word	0x0800317d
 8003090:	0800317d 	.word	0x0800317d
 8003094:	0800317d 	.word	0x0800317d
 8003098:	0800317d 	.word	0x0800317d
 800309c:	0800317d 	.word	0x0800317d
 80030a0:	0800317d 	.word	0x0800317d
 80030a4:	0800317d 	.word	0x0800317d
 80030a8:	0800314d 	.word	0x0800314d
 80030ac:	0800317d 	.word	0x0800317d
 80030b0:	0800317d 	.word	0x0800317d
 80030b4:	0800317d 	.word	0x0800317d
 80030b8:	0800317d 	.word	0x0800317d
 80030bc:	0800317d 	.word	0x0800317d
 80030c0:	0800317d 	.word	0x0800317d
 80030c4:	0800317d 	.word	0x0800317d
 80030c8:	0800317d 	.word	0x0800317d
 80030cc:	0800317d 	.word	0x0800317d
 80030d0:	08003145 	.word	0x08003145
 80030d4:	0800317d 	.word	0x0800317d
 80030d8:	0800317d 	.word	0x0800317d
 80030dc:	0800317d 	.word	0x0800317d
 80030e0:	0800317d 	.word	0x0800317d
 80030e4:	0800313d 	.word	0x0800313d
 80030e8:	0800317d 	.word	0x0800317d
 80030ec:	0800317d 	.word	0x0800317d
 80030f0:	0800317d 	.word	0x0800317d
 80030f4:	0800317d 	.word	0x0800317d
 80030f8:	08003135 	.word	0x08003135
 80030fc:	0800317d 	.word	0x0800317d
 8003100:	0800317d 	.word	0x0800317d
 8003104:	0800317d 	.word	0x0800317d
 8003108:	0800317d 	.word	0x0800317d
 800310c:	0800312d 	.word	0x0800312d
 8003110:	0800317d 	.word	0x0800317d
 8003114:	0800317d 	.word	0x0800317d
 8003118:	0800317d 	.word	0x0800317d
 800311c:	0800317d 	.word	0x0800317d
 8003120:	08003125 	.word	0x08003125
		case 30:
			servo_curr = 115;
 8003124:	4b18      	ldr	r3, [pc, #96]	@ (8003188 <convert_from_angle+0x170>)
 8003126:	2273      	movs	r2, #115	@ 0x73
 8003128:	601a      	str	r2, [r3, #0]
			break;
 800312a:	e027      	b.n	800317c <convert_from_angle+0x164>
		case 25:
			servo_curr = 102;
 800312c:	4b16      	ldr	r3, [pc, #88]	@ (8003188 <convert_from_angle+0x170>)
 800312e:	2266      	movs	r2, #102	@ 0x66
 8003130:	601a      	str	r2, [r3, #0]
			break;
 8003132:	e023      	b.n	800317c <convert_from_angle+0x164>
		case 20:
			servo_curr = 95;
 8003134:	4b14      	ldr	r3, [pc, #80]	@ (8003188 <convert_from_angle+0x170>)
 8003136:	225f      	movs	r2, #95	@ 0x5f
 8003138:	601a      	str	r2, [r3, #0]
			break;
 800313a:	e01f      	b.n	800317c <convert_from_angle+0x164>
		case 15:
			servo_curr = 90;
 800313c:	4b12      	ldr	r3, [pc, #72]	@ (8003188 <convert_from_angle+0x170>)
 800313e:	225a      	movs	r2, #90	@ 0x5a
 8003140:	601a      	str	r2, [r3, #0]
			break;
 8003142:	e01b      	b.n	800317c <convert_from_angle+0x164>
		case 10:
			servo_curr = 86;
 8003144:	4b10      	ldr	r3, [pc, #64]	@ (8003188 <convert_from_angle+0x170>)
 8003146:	2256      	movs	r2, #86	@ 0x56
 8003148:	601a      	str	r2, [r3, #0]
			break;
 800314a:	e017      	b.n	800317c <convert_from_angle+0x164>
		case 0:
			servo_curr = 76;
 800314c:	4b0e      	ldr	r3, [pc, #56]	@ (8003188 <convert_from_angle+0x170>)
 800314e:	224c      	movs	r2, #76	@ 0x4c
 8003150:	601a      	str	r2, [r3, #0]
			break;
 8003152:	e013      	b.n	800317c <convert_from_angle+0x164>
		case -10:
			servo_curr = 67;
 8003154:	4b0c      	ldr	r3, [pc, #48]	@ (8003188 <convert_from_angle+0x170>)
 8003156:	2243      	movs	r2, #67	@ 0x43
 8003158:	601a      	str	r2, [r3, #0]
			break;
 800315a:	e00f      	b.n	800317c <convert_from_angle+0x164>
		case -15:
			servo_curr = 63;
 800315c:	4b0a      	ldr	r3, [pc, #40]	@ (8003188 <convert_from_angle+0x170>)
 800315e:	223f      	movs	r2, #63	@ 0x3f
 8003160:	601a      	str	r2, [r3, #0]
			break;
 8003162:	e00b      	b.n	800317c <convert_from_angle+0x164>
		case -20:
			servo_curr = 60;
 8003164:	4b08      	ldr	r3, [pc, #32]	@ (8003188 <convert_from_angle+0x170>)
 8003166:	223c      	movs	r2, #60	@ 0x3c
 8003168:	601a      	str	r2, [r3, #0]
			break;
 800316a:	e007      	b.n	800317c <convert_from_angle+0x164>
		case -25:
			servo_curr = 55;
 800316c:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <convert_from_angle+0x170>)
 800316e:	2237      	movs	r2, #55	@ 0x37
 8003170:	601a      	str	r2, [r3, #0]
			break;
 8003172:	e003      	b.n	800317c <convert_from_angle+0x164>
		case -30:
			servo_curr = 53;
 8003174:	4b04      	ldr	r3, [pc, #16]	@ (8003188 <convert_from_angle+0x170>)
 8003176:	2235      	movs	r2, #53	@ 0x35
 8003178:	601a      	str	r2, [r3, #0]
			break;
 800317a:	bf00      	nop
	}
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	20000738 	.word	0x20000738

0800318c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	// Toggle LED every 1s to show that STM not stuck in loop and still running
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8003194:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003198:	4804      	ldr	r0, [pc, #16]	@ (80031ac <StartDefaultTask+0x20>)
 800319a:	f002 fbb0 	bl	80058fe <HAL_GPIO_TogglePin>
	osDelay(1000);
 800319e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031a2:	f007 fb93 	bl	800a8cc <osDelay>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80031a6:	bf00      	nop
 80031a8:	e7f4      	b.n	8003194 <StartDefaultTask+0x8>
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000

080031b0 <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void *argument)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	char buffer[20];

  /* Infinite loop */
  for(;;)
  {
	  sprintf(buffer, "Motor L:%2d R:%2d", motor_left_rpm_int, motor_right_rpm_int);
 80031b8:	4b22      	ldr	r3, [pc, #136]	@ (8003244 <show+0x94>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4b22      	ldr	r3, [pc, #136]	@ (8003248 <show+0x98>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f107 000c 	add.w	r0, r7, #12
 80031c4:	4921      	ldr	r1, [pc, #132]	@ (800324c <show+0x9c>)
 80031c6:	f00a ffa7 	bl	800e118 <siprintf>
	  OLED_ShowString(5, 5, buffer);
 80031ca:	f107 030c 	add.w	r3, r7, #12
 80031ce:	461a      	mov	r2, r3
 80031d0:	2105      	movs	r1, #5
 80031d2:	2005      	movs	r0, #5
 80031d4:	f00a f9c8 	bl	800d568 <OLED_ShowString>

	  sprintf(buffer, "Dist:%4d", distance_travelled_int);
 80031d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003250 <show+0xa0>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	f107 030c 	add.w	r3, r7, #12
 80031e0:	491c      	ldr	r1, [pc, #112]	@ (8003254 <show+0xa4>)
 80031e2:	4618      	mov	r0, r3
 80031e4:	f00a ff98 	bl	800e118 <siprintf>
	  OLED_ShowString(5, 15, buffer);
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	461a      	mov	r2, r3
 80031ee:	210f      	movs	r1, #15
 80031f0:	2005      	movs	r0, #5
 80031f2:	f00a f9b9 	bl	800d568 <OLED_ShowString>

	  sprintf(buffer, "IR L:%2d R:%2d", ir_dist_left_int, ir_dist_right_int);
 80031f6:	4b18      	ldr	r3, [pc, #96]	@ (8003258 <show+0xa8>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b18      	ldr	r3, [pc, #96]	@ (800325c <show+0xac>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f107 000c 	add.w	r0, r7, #12
 8003202:	4917      	ldr	r1, [pc, #92]	@ (8003260 <show+0xb0>)
 8003204:	f00a ff88 	bl	800e118 <siprintf>
	  OLED_ShowString(5, 25, buffer);
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	461a      	mov	r2, r3
 800320e:	2119      	movs	r1, #25
 8003210:	2005      	movs	r0, #5
 8003212:	f00a f9a9 	bl	800d568 <OLED_ShowString>

	  sprintf(buffer, "US:%3d", us_dist_int);
 8003216:	4b13      	ldr	r3, [pc, #76]	@ (8003264 <show+0xb4>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	f107 030c 	add.w	r3, r7, #12
 800321e:	4912      	ldr	r1, [pc, #72]	@ (8003268 <show+0xb8>)
 8003220:	4618      	mov	r0, r3
 8003222:	f00a ff79 	bl	800e118 <siprintf>
	  OLED_ShowString(5, 35, buffer);
 8003226:	f107 030c 	add.w	r3, r7, #12
 800322a:	461a      	mov	r2, r3
 800322c:	2123      	movs	r1, #35	@ 0x23
 800322e:	2005      	movs	r0, #5
 8003230:	f00a f99a 	bl	800d568 <OLED_ShowString>
//	  OLED_ShowString(5, 45, buffer);


	// Refreshes the OLED screen every 0.5s
	// This is the only refresh function call in all the tasks
	OLED_Refresh_Gram();
 8003234:	f00a f820 	bl	800d278 <OLED_Refresh_Gram>

    osDelay(250);
 8003238:	20fa      	movs	r0, #250	@ 0xfa
 800323a:	f007 fb47 	bl	800a8cc <osDelay>
	  sprintf(buffer, "Motor L:%2d R:%2d", motor_left_rpm_int, motor_right_rpm_int);
 800323e:	bf00      	nop
 8003240:	e7ba      	b.n	80031b8 <show+0x8>
 8003242:	bf00      	nop
 8003244:	20000604 	.word	0x20000604
 8003248:	20000608 	.word	0x20000608
 800324c:	08010598 	.word	0x08010598
 8003250:	200005ec 	.word	0x200005ec
 8003254:	080105ac 	.word	0x080105ac
 8003258:	2000059c 	.word	0x2000059c
 800325c:	20000598 	.word	0x20000598
 8003260:	080105b8 	.word	0x080105b8
 8003264:	200005c8 	.word	0x200005c8
 8003268:	080105c8 	.word	0x080105c8

0800326c <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void *argument)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motors */

	int flag = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
	int count = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]
	int image_check;
	int start = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]


	//---------- Starting ----------
	//start only when user button pressed
	osDelay(2000);//delay for ultrasonic init
 8003280:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003284:	f007 fb22 	bl	800a8cc <osDelay>
	rotate_wheel(SERVO_LEFT+10);
 8003288:	203f      	movs	r0, #63	@ 0x3f
 800328a:	f7ff feb3 	bl	8002ff4 <rotate_wheel>
	osDelay(500);
 800328e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003292:	f007 fb1b 	bl	800a8cc <osDelay>
	rotate_wheel(SERVO_MIDDLE);
 8003296:	204c      	movs	r0, #76	@ 0x4c
 8003298:	f7ff feac 	bl	8002ff4 <rotate_wheel>
	osDelay(500);
 800329c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80032a0:	f007 fb14 	bl	800a8cc <osDelay>
//	  osDelay(1000);
//	  continue;
	  //*****************************

	  //------------- Checklist (Movement around object) ------------------------
	  if (flag){
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d004      	beq.n	80032b4 <motors+0x48>
		  osDelay(1000);
 80032aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032ae:	f007 fb0d 	bl	800a8cc <osDelay>
		  continue;
 80032b2:	e124      	b.n	80034fe <motors+0x292>
	  //-------------------------------------------------------------------------


	  //---------------- Receiving Instruction from RPi ----------------------
      // Add emergency stop check at the TOP of the loop
      if (emergency_stop) {
 80032b4:	4b92      	ldr	r3, [pc, #584]	@ (8003500 <motors+0x294>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <motors+0x5c>
          MotorStop_both();
 80032bc:	f7fd fe82 	bl	8000fc4 <MotorStop_both>
          osDelay(100);
 80032c0:	2064      	movs	r0, #100	@ 0x64
 80032c2:	f007 fb03 	bl	800a8cc <osDelay>
          continue;  // Skip rest of iteration
 80032c6:	e11a      	b.n	80034fe <motors+0x292>
      }

	  osDelay(10);
 80032c8:	200a      	movs	r0, #10
 80032ca:	f007 faff 	bl	800a8cc <osDelay>
	  if (!have_instruction){
 80032ce:	4b8d      	ldr	r3, [pc, #564]	@ (8003504 <motors+0x298>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <motors+0x70>
		  MotorStop_both();
 80032d6:	f7fd fe75 	bl	8000fc4 <MotorStop_both>
		  continue;
 80032da:	e110      	b.n	80034fe <motors+0x292>
		//W - forward_until
		//t - reverse
		//w - reverse_until
	    //{flag}{speed}|{angle}|{value}
	  else{
		  if (instruction[0] == 'S'){
 80032dc:	4b8a      	ldr	r3, [pc, #552]	@ (8003508 <motors+0x29c>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b53      	cmp	r3, #83	@ 0x53
 80032e2:	d108      	bne.n	80032f6 <motors+0x8a>
			  buzzerOn(500);
 80032e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80032e8:	f7ff fe6c 	bl	8002fc4 <buzzerOn>
			  osDelay(2000);
 80032ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80032f0:	f007 faec 	bl	800a8cc <osDelay>
 80032f4:	e0f1      	b.n	80034da <motors+0x26e>
		  }


		  else if (instruction[0] == 'F'){
 80032f6:	4b84      	ldr	r3, [pc, #528]	@ (8003508 <motors+0x29c>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b46      	cmp	r3, #70	@ 0x46
 80032fc:	d106      	bne.n	800330c <motors+0xa0>
			  buzzerOn(2000);
 80032fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003302:	f7ff fe5f 	bl	8002fc4 <buzzerOn>
			  flag = 1;
 8003306:	2301      	movs	r3, #1
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e0e6      	b.n	80034da <motors+0x26e>
		  }

		  else{
			  convert_instruction(&instruction);
 800330c:	487e      	ldr	r0, [pc, #504]	@ (8003508 <motors+0x29c>)
 800330e:	f7fe fe07 	bl	8001f20 <convert_instruction>
			  if (i_angle == 0){  //forward or backward
 8003312:	4b7e      	ldr	r3, [pc, #504]	@ (800350c <motors+0x2a0>)
 8003314:	edd3 7a00 	vldr	s15, [r3]
 8003318:	eef5 7a40 	vcmp.f32	s15, #0.0
 800331c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003320:	d15c      	bne.n	80033dc <motors+0x170>
				  switch (i_flag){
 8003322:	4b7b      	ldr	r3, [pc, #492]	@ (8003510 <motors+0x2a4>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b77      	cmp	r3, #119	@ 0x77
 8003328:	d045      	beq.n	80033b6 <motors+0x14a>
 800332a:	2b77      	cmp	r3, #119	@ 0x77
 800332c:	f300 80d5 	bgt.w	80034da <motors+0x26e>
 8003330:	2b74      	cmp	r3, #116	@ 0x74
 8003332:	d01a      	beq.n	800336a <motors+0xfe>
 8003334:	2b74      	cmp	r3, #116	@ 0x74
 8003336:	f300 80d0 	bgt.w	80034da <motors+0x26e>
 800333a:	2b54      	cmp	r3, #84	@ 0x54
 800333c:	d002      	beq.n	8003344 <motors+0xd8>
 800333e:	2b57      	cmp	r3, #87	@ 0x57
 8003340:	d026      	beq.n	8003390 <motors+0x124>
 8003342:	e0ca      	b.n	80034da <motors+0x26e>
					  case 'T':
						  forward(i_speed+10, i_value, 40, 0);
 8003344:	4b73      	ldr	r3, [pc, #460]	@ (8003514 <motors+0x2a8>)
 8003346:	edd3 7a00 	vldr	s15, [r3]
 800334a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800334e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003352:	4b71      	ldr	r3, [pc, #452]	@ (8003518 <motors+0x2ac>)
 8003354:	ed93 7a00 	vldr	s14, [r3]
 8003358:	2100      	movs	r1, #0
 800335a:	2028      	movs	r0, #40	@ 0x28
 800335c:	eef0 0a47 	vmov.f32	s1, s14
 8003360:	eeb0 0a67 	vmov.f32	s0, s15
 8003364:	f7ff f824 	bl	80023b0 <forward>
						  break;
 8003368:	e0b7      	b.n	80034da <motors+0x26e>
					  case 't':
						  reverse(i_speed+10, i_value, 40, 0);
 800336a:	4b6a      	ldr	r3, [pc, #424]	@ (8003514 <motors+0x2a8>)
 800336c:	edd3 7a00 	vldr	s15, [r3]
 8003370:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003374:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003378:	4b67      	ldr	r3, [pc, #412]	@ (8003518 <motors+0x2ac>)
 800337a:	ed93 7a00 	vldr	s14, [r3]
 800337e:	2100      	movs	r1, #0
 8003380:	2028      	movs	r0, #40	@ 0x28
 8003382:	eef0 0a47 	vmov.f32	s1, s14
 8003386:	eeb0 0a67 	vmov.f32	s0, s15
 800338a:	f7ff fa21 	bl	80027d0 <reverse>
						  break;
 800338e:	e0a4      	b.n	80034da <motors+0x26e>
					  case 'W':
						  forward_until(i_speed+10, i_value, 40, 0);
 8003390:	4b60      	ldr	r3, [pc, #384]	@ (8003514 <motors+0x2a8>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800339a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800339e:	4b5e      	ldr	r3, [pc, #376]	@ (8003518 <motors+0x2ac>)
 80033a0:	ed93 7a00 	vldr	s14, [r3]
 80033a4:	2100      	movs	r1, #0
 80033a6:	2028      	movs	r0, #40	@ 0x28
 80033a8:	eef0 0a47 	vmov.f32	s1, s14
 80033ac:	eeb0 0a67 	vmov.f32	s0, s15
 80033b0:	f7ff f906 	bl	80025c0 <forward_until>
						  break;
 80033b4:	e091      	b.n	80034da <motors+0x26e>
					  case 'w':
						  reverse_until(i_speed+10, i_value, 40, 0);
 80033b6:	4b57      	ldr	r3, [pc, #348]	@ (8003514 <motors+0x2a8>)
 80033b8:	edd3 7a00 	vldr	s15, [r3]
 80033bc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80033c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033c4:	4b54      	ldr	r3, [pc, #336]	@ (8003518 <motors+0x2ac>)
 80033c6:	ed93 7a00 	vldr	s14, [r3]
 80033ca:	2100      	movs	r1, #0
 80033cc:	2028      	movs	r0, #40	@ 0x28
 80033ce:	eef0 0a47 	vmov.f32	s1, s14
 80033d2:	eeb0 0a67 	vmov.f32	s0, s15
 80033d6:	f7ff faf9 	bl	80029cc <reverse_until>
						  break;
 80033da:	e07e      	b.n	80034da <motors+0x26e>
				  }
			  }

			  else if (i_angle > 0){ //turn right
 80033dc:	4b4b      	ldr	r3, [pc, #300]	@ (800350c <motors+0x2a0>)
 80033de:	edd3 7a00 	vldr	s15, [r3]
 80033e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ea:	dd35      	ble.n	8003458 <motors+0x1ec>
				  if (i_angle > 30) i_angle = 30;
 80033ec:	4b47      	ldr	r3, [pc, #284]	@ (800350c <motors+0x2a0>)
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80033f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fe:	dd02      	ble.n	8003406 <motors+0x19a>
 8003400:	4b42      	ldr	r3, [pc, #264]	@ (800350c <motors+0x2a0>)
 8003402:	4a46      	ldr	r2, [pc, #280]	@ (800351c <motors+0x2b0>)
 8003404:	601a      	str	r2, [r3, #0]
				  convert_from_angle(i_angle);
 8003406:	4b41      	ldr	r3, [pc, #260]	@ (800350c <motors+0x2a0>)
 8003408:	edd3 7a00 	vldr	s15, [r3]
 800340c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003410:	ee17 0a90 	vmov	r0, s15
 8003414:	f7ff fe00 	bl	8003018 <convert_from_angle>
				  if (i_flag == 'T') {
 8003418:	4b3d      	ldr	r3, [pc, #244]	@ (8003510 <motors+0x2a4>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b54      	cmp	r3, #84	@ 0x54
 800341e:	d10d      	bne.n	800343c <motors+0x1d0>
					  forwardTurn(servo_curr, i_value, 50.0f, 40);
 8003420:	4b3f      	ldr	r3, [pc, #252]	@ (8003520 <motors+0x2b4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a3c      	ldr	r2, [pc, #240]	@ (8003518 <motors+0x2ac>)
 8003426:	edd2 7a00 	vldr	s15, [r2]
 800342a:	2128      	movs	r1, #40	@ 0x28
 800342c:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8003524 <motors+0x2b8>
 8003430:	eeb0 0a67 	vmov.f32	s0, s15
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fbc9 	bl	8002bcc <forwardTurn>
 800343a:	e04e      	b.n	80034da <motors+0x26e>
				  }
				  else{
					  reverseTurn(servo_curr, i_value, 50.0f, 40);
 800343c:	4b38      	ldr	r3, [pc, #224]	@ (8003520 <motors+0x2b4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a35      	ldr	r2, [pc, #212]	@ (8003518 <motors+0x2ac>)
 8003442:	edd2 7a00 	vldr	s15, [r2]
 8003446:	2128      	movs	r1, #40	@ 0x28
 8003448:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8003524 <motors+0x2b8>
 800344c:	eeb0 0a67 	vmov.f32	s0, s15
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fcb9 	bl	8002dc8 <reverseTurn>
 8003456:	e040      	b.n	80034da <motors+0x26e>
				  }
			  }

			  else{ //turn left
				  if (i_angle < -30) i_angle = -30;
 8003458:	4b2c      	ldr	r3, [pc, #176]	@ (800350c <motors+0x2a0>)
 800345a:	edd3 7a00 	vldr	s15, [r3]
 800345e:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8003462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346a:	d502      	bpl.n	8003472 <motors+0x206>
 800346c:	4b27      	ldr	r3, [pc, #156]	@ (800350c <motors+0x2a0>)
 800346e:	4a2e      	ldr	r2, [pc, #184]	@ (8003528 <motors+0x2bc>)
 8003470:	601a      	str	r2, [r3, #0]
				  convert_from_angle(i_angle);
 8003472:	4b26      	ldr	r3, [pc, #152]	@ (800350c <motors+0x2a0>)
 8003474:	edd3 7a00 	vldr	s15, [r3]
 8003478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800347c:	ee17 0a90 	vmov	r0, s15
 8003480:	f7ff fdca 	bl	8003018 <convert_from_angle>
				  sprintf(buffer, "%3d", servo_curr);
 8003484:	4b26      	ldr	r3, [pc, #152]	@ (8003520 <motors+0x2b4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4928      	ldr	r1, [pc, #160]	@ (800352c <motors+0x2c0>)
 800348c:	4828      	ldr	r0, [pc, #160]	@ (8003530 <motors+0x2c4>)
 800348e:	f00a fe43 	bl	800e118 <siprintf>
				  OLED_ShowString(70, 35, buffer);
 8003492:	4a27      	ldr	r2, [pc, #156]	@ (8003530 <motors+0x2c4>)
 8003494:	2123      	movs	r1, #35	@ 0x23
 8003496:	2046      	movs	r0, #70	@ 0x46
 8003498:	f00a f866 	bl	800d568 <OLED_ShowString>
				  if (i_flag == 'T'){
 800349c:	4b1c      	ldr	r3, [pc, #112]	@ (8003510 <motors+0x2a4>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b54      	cmp	r3, #84	@ 0x54
 80034a2:	d10d      	bne.n	80034c0 <motors+0x254>
					  forwardTurn(servo_curr, i_value, 50.0f, 40);
 80034a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003520 <motors+0x2b4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003518 <motors+0x2ac>)
 80034aa:	edd2 7a00 	vldr	s15, [r2]
 80034ae:	2128      	movs	r1, #40	@ 0x28
 80034b0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8003524 <motors+0x2b8>
 80034b4:	eeb0 0a67 	vmov.f32	s0, s15
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fb87 	bl	8002bcc <forwardTurn>
 80034be:	e00c      	b.n	80034da <motors+0x26e>
				  }
				  else{
					  reverseTurn(servo_curr, i_value, 50.0f, 40);
 80034c0:	4b17      	ldr	r3, [pc, #92]	@ (8003520 <motors+0x2b4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a14      	ldr	r2, [pc, #80]	@ (8003518 <motors+0x2ac>)
 80034c6:	edd2 7a00 	vldr	s15, [r2]
 80034ca:	2128      	movs	r1, #40	@ 0x28
 80034cc:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8003524 <motors+0x2b8>
 80034d0:	eeb0 0a67 	vmov.f32	s0, s15
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fc77 	bl	8002dc8 <reverseTurn>
				  }
			  }
		  }

//		  sprintf(buffer, "%c,%d,%d,%d,FIN\r\n", i_flag, (int)i_speed, (int)i_angle, (int)i_value);
		  sprintf(buffer, "FIN\r\n");
 80034da:	4916      	ldr	r1, [pc, #88]	@ (8003534 <motors+0x2c8>)
 80034dc:	4814      	ldr	r0, [pc, #80]	@ (8003530 <motors+0x2c4>)
 80034de:	f00a fe1b 	bl	800e118 <siprintf>
		  HAL_UART_Transmit(&huart3, buffer, strlen(buffer), 0xFFFF);
 80034e2:	4813      	ldr	r0, [pc, #76]	@ (8003530 <motors+0x2c4>)
 80034e4:	f7fc fed4 	bl	8000290 <strlen>
 80034e8:	4603      	mov	r3, r0
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034f0:	490f      	ldr	r1, [pc, #60]	@ (8003530 <motors+0x2c4>)
 80034f2:	4811      	ldr	r0, [pc, #68]	@ (8003538 <motors+0x2cc>)
 80034f4:	f006 f8ae 	bl	8009654 <HAL_UART_Transmit>
		  have_instruction = 0;
 80034f8:	4b02      	ldr	r3, [pc, #8]	@ (8003504 <motors+0x298>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
	  if (flag){
 80034fe:	e6d1      	b.n	80032a4 <motors+0x38>
 8003500:	200006fc 	.word	0x200006fc
 8003504:	200006a8 	.word	0x200006a8
 8003508:	20000688 	.word	0x20000688
 800350c:	200006f4 	.word	0x200006f4
 8003510:	200006ec 	.word	0x200006ec
 8003514:	200006f0 	.word	0x200006f0
 8003518:	200006f8 	.word	0x200006f8
 800351c:	41f00000 	.word	0x41f00000
 8003520:	20000738 	.word	0x20000738
 8003524:	42480000 	.word	0x42480000
 8003528:	c1f00000 	.word	0xc1f00000
 800352c:	080105d0 	.word	0x080105d0
 8003530:	200006ac 	.word	0x200006ac
 8003534:	080105d4 	.word	0x080105d4
 8003538:	2000051c 	.word	0x2000051c

0800353c <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b092      	sub	sp, #72	@ 0x48
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  /* Infinite loop */
  // --------------- Right Motor (Motor A) --------------------------
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003544:	2104      	movs	r1, #4
 8003546:	4862      	ldr	r0, [pc, #392]	@ (80036d0 <encoder+0x194>)
 8003548:	f004 fcfc 	bl	8007f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800354c:	2100      	movs	r1, #0
 800354e:	4860      	ldr	r0, [pc, #384]	@ (80036d0 <encoder+0x194>)
 8003550:	f004 fcf8 	bl	8007f44 <HAL_TIM_PWM_Start>

  int cnt1A, cnt2A;
  uint32_t tickA;

  cnt1A = __HAL_TIM_GET_COUNTER(&htim2);
 8003554:	4b5e      	ldr	r3, [pc, #376]	@ (80036d0 <encoder+0x194>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	647b      	str	r3, [r7, #68]	@ 0x44
  tickA = HAL_GetTick();
 800355c:	f001 f962 	bl	8004824 <HAL_GetTick>
 8003560:	6438      	str	r0, [r7, #64]	@ 0x40
  uint8_t display1[20];
  uint8_t display2[20];
  uint16_t dirA;
  float a = 0.95f;
 8003562:	4b5c      	ldr	r3, [pc, #368]	@ (80036d4 <encoder+0x198>)
 8003564:	63fb      	str	r3, [r7, #60]	@ 0x3c

  for(;;)
  {
    if (HAL_GetTick() - tickA > 40L){
 8003566:	f001 f95d 	bl	8004824 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b28      	cmp	r3, #40	@ 0x28
 8003572:	d9f8      	bls.n	8003566 <encoder+0x2a>
    	cnt2A = __HAL_TIM_GET_COUNTER(&htim2);
 8003574:	4b56      	ldr	r3, [pc, #344]	@ (80036d0 <encoder+0x194>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357a:	63bb      	str	r3, [r7, #56]	@ 0x38
    	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 800357c:	4b54      	ldr	r3, [pc, #336]	@ (80036d0 <encoder+0x194>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b10      	cmp	r3, #16
 8003588:	d112      	bne.n	80035b0 <encoder+0x74>
    		if (cnt2A < cnt1A)
 800358a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800358c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800358e:	429a      	cmp	r2, r3
 8003590:	da05      	bge.n	800359e <encoder+0x62>
    			motor_right_encoder = cnt1A - cnt2A;
 8003592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	4a4f      	ldr	r2, [pc, #316]	@ (80036d8 <encoder+0x19c>)
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	e01a      	b.n	80035d4 <encoder+0x98>
    		else
    			motor_right_encoder = (65535 - cnt2A) + cnt1A;
 800359e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a0:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 80035a4:	33ff      	adds	r3, #255	@ 0xff
 80035a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035a8:	4413      	add	r3, r2
 80035aa:	4a4b      	ldr	r2, [pc, #300]	@ (80036d8 <encoder+0x19c>)
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e011      	b.n	80035d4 <encoder+0x98>
    	}
    	else{
    		if (cnt2A > cnt1A)
 80035b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b4:	429a      	cmp	r2, r3
 80035b6:	dd05      	ble.n	80035c4 <encoder+0x88>
    			motor_right_encoder = cnt2A - cnt1A;
 80035b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	4a46      	ldr	r2, [pc, #280]	@ (80036d8 <encoder+0x19c>)
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e007      	b.n	80035d4 <encoder+0x98>
    		else
    			motor_right_encoder = (65535 - cnt1A) + cnt2A;
 80035c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035c6:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 80035ca:	33ff      	adds	r3, #255	@ 0xff
 80035cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035ce:	4413      	add	r3, r2
 80035d0:	4a41      	ldr	r2, [pc, #260]	@ (80036d8 <encoder+0x19c>)
 80035d2:	6013      	str	r3, [r2, #0]
    	}

    	//------------------------------- with LPF ---------------------------------------
    	if (motor_right_encoder > 250){
 80035d4:	4b40      	ldr	r3, [pc, #256]	@ (80036d8 <encoder+0x19c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2bfa      	cmp	r3, #250	@ 0xfa
 80035da:	dd06      	ble.n	80035ea <encoder+0xae>
    		motor_right_encoder = 0;
 80035dc:	4b3e      	ldr	r3, [pc, #248]	@ (80036d8 <encoder+0x19c>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
    		motor_right_encoder_lpf = 0;
 80035e2:	4b3e      	ldr	r3, [pc, #248]	@ (80036dc <encoder+0x1a0>)
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
    	}
    	total_right_encoder += motor_right_encoder;
 80035ea:	4b3d      	ldr	r3, [pc, #244]	@ (80036e0 <encoder+0x1a4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a3a      	ldr	r2, [pc, #232]	@ (80036d8 <encoder+0x19c>)
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	4413      	add	r3, r2
 80035f4:	4a3a      	ldr	r2, [pc, #232]	@ (80036e0 <encoder+0x1a4>)
 80035f6:	6013      	str	r3, [r2, #0]
    	motor_right_encoder *= 25;
 80035f8:	4b37      	ldr	r3, [pc, #220]	@ (80036d8 <encoder+0x19c>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	009a      	lsls	r2, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	4a34      	ldr	r2, [pc, #208]	@ (80036d8 <encoder+0x19c>)
 8003608:	6013      	str	r3, [r2, #0]
    	motor_right_rpm = motor_right_encoder / 22.0f; // 60/1320 = 1/22
 800360a:	4b33      	ldr	r3, [pc, #204]	@ (80036d8 <encoder+0x19c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003616:	eef3 6a06 	vmov.f32	s13, #54	@ 0x41b00000  22.0
 800361a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800361e:	4b31      	ldr	r3, [pc, #196]	@ (80036e4 <encoder+0x1a8>)
 8003620:	edc3 7a00 	vstr	s15, [r3]

    	motor_right_encoder_lpf = (motor_right_encoder * (1-a)) + (prev_right_encoder * a);
 8003624:	4b2c      	ldr	r3, [pc, #176]	@ (80036d8 <encoder+0x19c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	ee07 3a90 	vmov	s15, r3
 800362c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003630:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003634:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003638:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800363c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003640:	4b29      	ldr	r3, [pc, #164]	@ (80036e8 <encoder+0x1ac>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	ee07 3a90 	vmov	s15, r3
 8003648:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800364c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003658:	4b20      	ldr	r3, [pc, #128]	@ (80036dc <encoder+0x1a0>)
 800365a:	edc3 7a00 	vstr	s15, [r3]
    	prev_right_encoder = motor_right_encoder_lpf;  // for LPF
 800365e:	4b1f      	ldr	r3, [pc, #124]	@ (80036dc <encoder+0x1a0>)
 8003660:	edd3 7a00 	vldr	s15, [r3]
 8003664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003668:	ee17 2a90 	vmov	r2, s15
 800366c:	4b1e      	ldr	r3, [pc, #120]	@ (80036e8 <encoder+0x1ac>)
 800366e:	601a      	str	r2, [r3, #0]
    	motor_right_rpm_lpf = motor_right_encoder_lpf / 22.0f; // 60/1320 = 1/22
 8003670:	4b1a      	ldr	r3, [pc, #104]	@ (80036dc <encoder+0x1a0>)
 8003672:	ed93 7a00 	vldr	s14, [r3]
 8003676:	eef3 6a06 	vmov.f32	s13, #54	@ 0x41b00000  22.0
 800367a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800367e:	4b1b      	ldr	r3, [pc, #108]	@ (80036ec <encoder+0x1b0>)
 8003680:	edc3 7a00 	vstr	s15, [r3]
    	motor_right_rpm_lpf_int = motor_right_rpm_lpf;
 8003684:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <encoder+0x1b0>)
 8003686:	edd3 7a00 	vldr	s15, [r3]
 800368a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800368e:	ee17 2a90 	vmov	r2, s15
 8003692:	4b17      	ldr	r3, [pc, #92]	@ (80036f0 <encoder+0x1b4>)
 8003694:	601a      	str	r2, [r3, #0]
    	//---------------------------------------------------------------------------------

    	motor_right_rpm_int = motor_right_rpm;
 8003696:	4b13      	ldr	r3, [pc, #76]	@ (80036e4 <encoder+0x1a8>)
 8003698:	edd3 7a00 	vldr	s15, [r3]
 800369c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036a0:	ee17 2a90 	vmov	r2, s15
 80036a4:	4b13      	ldr	r3, [pc, #76]	@ (80036f4 <encoder+0x1b8>)
 80036a6:	601a      	str	r2, [r3, #0]
    	dirA = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 80036a8:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <encoder+0x194>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b10      	cmp	r3, #16
 80036b4:	bf0c      	ite	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	2300      	movne	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	86fb      	strh	r3, [r7, #54]	@ 0x36

    	//---------- Reset Procedure ------------
    	cnt1A = __HAL_TIM_GET_COUNTER(&htim2);
 80036be:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <encoder+0x194>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	647b      	str	r3, [r7, #68]	@ 0x44
	    tickA = HAL_GetTick();
 80036c6:	f001 f8ad 	bl	8004824 <HAL_GetTick>
 80036ca:	6438      	str	r0, [r7, #64]	@ 0x40
    if (HAL_GetTick() - tickA > 40L){
 80036cc:	e74b      	b.n	8003566 <encoder+0x2a>
 80036ce:	bf00      	nop
 80036d0:	20000324 	.word	0x20000324
 80036d4:	3f733333 	.word	0x3f733333
 80036d8:	200005d0 	.word	0x200005d0
 80036dc:	200005e0 	.word	0x200005e0
 80036e0:	200005e8 	.word	0x200005e8
 80036e4:	20000600 	.word	0x20000600
 80036e8:	200005d8 	.word	0x200005d8
 80036ec:	20000610 	.word	0x20000610
 80036f0:	20000618 	.word	0x20000618
 80036f4:	20000608 	.word	0x20000608

080036f8 <encoder_B>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_B */
void encoder_B(void *argument)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b0a2      	sub	sp, #136	@ 0x88
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_B */
	// --------------- Left Motor (Motor B) --------------------------
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003700:	2104      	movs	r1, #4
 8003702:	486c      	ldr	r0, [pc, #432]	@ (80038b4 <encoder_B+0x1bc>)
 8003704:	f004 fc1e 	bl	8007f44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003708:	2100      	movs	r1, #0
 800370a:	486a      	ldr	r0, [pc, #424]	@ (80038b4 <encoder_B+0x1bc>)
 800370c:	f004 fc1a 	bl	8007f44 <HAL_TIM_PWM_Start>

	int cnt1A, cnt2A;
	uint32_t tickA;

	cnt1A = __HAL_TIM_GET_COUNTER(&htim3);
 8003710:	4b68      	ldr	r3, [pc, #416]	@ (80038b4 <encoder_B+0x1bc>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	tickA = HAL_GetTick();
 800371a:	f001 f883 	bl	8004824 <HAL_GetTick>
 800371e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	uint8_t display1[20];
	uint8_t display2[20];
	uint16_t dirA;
	float a = 0.95f;
 8003722:	4b65      	ldr	r3, [pc, #404]	@ (80038b8 <encoder_B+0x1c0>)
 8003724:	67fb      	str	r3, [r7, #124]	@ 0x7c

	char sbuf[64];

	for(;;)
	{
	if (HAL_GetTick() - tickA > 40L){
 8003726:	f001 f87d 	bl	8004824 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b28      	cmp	r3, #40	@ 0x28
 8003734:	d9f7      	bls.n	8003726 <encoder_B+0x2e>
		cnt2A = __HAL_TIM_GET_COUNTER(&htim3);
 8003736:	4b5f      	ldr	r3, [pc, #380]	@ (80038b4 <encoder_B+0x1bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	67bb      	str	r3, [r7, #120]	@ 0x78
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 800373e:	4b5d      	ldr	r3, [pc, #372]	@ (80038b4 <encoder_B+0x1bc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b10      	cmp	r3, #16
 800374a:	d115      	bne.n	8003778 <encoder_B+0x80>
			if (cnt2A < cnt1A)
 800374c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800374e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003752:	429a      	cmp	r2, r3
 8003754:	da06      	bge.n	8003764 <encoder_B+0x6c>
				motor_left_encoder = cnt1A - cnt2A;
 8003756:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800375a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	4a57      	ldr	r2, [pc, #348]	@ (80038bc <encoder_B+0x1c4>)
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e01e      	b.n	80037a2 <encoder_B+0xaa>
			else
				motor_left_encoder = (65535 - cnt2A) + cnt1A;
 8003764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003766:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800376a:	33ff      	adds	r3, #255	@ 0xff
 800376c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003770:	4413      	add	r3, r2
 8003772:	4a52      	ldr	r2, [pc, #328]	@ (80038bc <encoder_B+0x1c4>)
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e014      	b.n	80037a2 <encoder_B+0xaa>
		}
		else{
			if (cnt2A > cnt1A)
 8003778:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800377a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800377e:	429a      	cmp	r2, r3
 8003780:	dd06      	ble.n	8003790 <encoder_B+0x98>
				motor_left_encoder = cnt2A - cnt1A;
 8003782:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003784:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	4a4c      	ldr	r2, [pc, #304]	@ (80038bc <encoder_B+0x1c4>)
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e008      	b.n	80037a2 <encoder_B+0xaa>
			else
				motor_left_encoder = (65535 - cnt1A) + cnt2A;
 8003790:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003794:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8003798:	33ff      	adds	r3, #255	@ 0xff
 800379a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800379c:	4413      	add	r3, r2
 800379e:	4a47      	ldr	r2, [pc, #284]	@ (80038bc <encoder_B+0x1c4>)
 80037a0:	6013      	str	r3, [r2, #0]
		}


		//---------------------- with LPF --------------------------
		if (motor_left_encoder > 250){
 80037a2:	4b46      	ldr	r3, [pc, #280]	@ (80038bc <encoder_B+0x1c4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2bfa      	cmp	r3, #250	@ 0xfa
 80037a8:	dd06      	ble.n	80037b8 <encoder_B+0xc0>
			motor_left_encoder = 0;
 80037aa:	4b44      	ldr	r3, [pc, #272]	@ (80038bc <encoder_B+0x1c4>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
			motor_left_encoder_lpf = 0;
 80037b0:	4b43      	ldr	r3, [pc, #268]	@ (80038c0 <encoder_B+0x1c8>)
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
		}
		total_left_encoder += motor_left_encoder;
 80037b8:	4b42      	ldr	r3, [pc, #264]	@ (80038c4 <encoder_B+0x1cc>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a3f      	ldr	r2, [pc, #252]	@ (80038bc <encoder_B+0x1c4>)
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	4413      	add	r3, r2
 80037c2:	4a40      	ldr	r2, [pc, #256]	@ (80038c4 <encoder_B+0x1cc>)
 80037c4:	6013      	str	r3, [r2, #0]
		motor_left_encoder *= 25;
 80037c6:	4b3d      	ldr	r3, [pc, #244]	@ (80038bc <encoder_B+0x1c4>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	009a      	lsls	r2, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	4a39      	ldr	r2, [pc, #228]	@ (80038bc <encoder_B+0x1c4>)
 80037d6:	6013      	str	r3, [r2, #0]
		motor_left_rpm = motor_left_encoder / 22.0f;  //  60/1320 = 1/22
 80037d8:	4b38      	ldr	r3, [pc, #224]	@ (80038bc <encoder_B+0x1c4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	ee07 3a90 	vmov	s15, r3
 80037e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037e4:	eef3 6a06 	vmov.f32	s13, #54	@ 0x41b00000  22.0
 80037e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037ec:	4b36      	ldr	r3, [pc, #216]	@ (80038c8 <encoder_B+0x1d0>)
 80037ee:	edc3 7a00 	vstr	s15, [r3]

		motor_left_encoder_lpf = (motor_left_encoder * (1-a)) + (prev_left_encoder * a);  //for LPF
 80037f2:	4b32      	ldr	r3, [pc, #200]	@ (80038bc <encoder_B+0x1c4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	ee07 3a90 	vmov	s15, r3
 80037fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003802:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003806:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800380a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800380e:	4b2f      	ldr	r3, [pc, #188]	@ (80038cc <encoder_B+0x1d4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800381a:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800381e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003826:	4b26      	ldr	r3, [pc, #152]	@ (80038c0 <encoder_B+0x1c8>)
 8003828:	edc3 7a00 	vstr	s15, [r3]
		prev_left_encoder = motor_left_encoder_lpf;  //for LPF
 800382c:	4b24      	ldr	r3, [pc, #144]	@ (80038c0 <encoder_B+0x1c8>)
 800382e:	edd3 7a00 	vldr	s15, [r3]
 8003832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003836:	ee17 2a90 	vmov	r2, s15
 800383a:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <encoder_B+0x1d4>)
 800383c:	601a      	str	r2, [r3, #0]
		motor_left_rpm_lpf = motor_left_encoder_lpf / 22.0f;  //  60/1320 = 1/22
 800383e:	4b20      	ldr	r3, [pc, #128]	@ (80038c0 <encoder_B+0x1c8>)
 8003840:	ed93 7a00 	vldr	s14, [r3]
 8003844:	eef3 6a06 	vmov.f32	s13, #54	@ 0x41b00000  22.0
 8003848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800384c:	4b20      	ldr	r3, [pc, #128]	@ (80038d0 <encoder_B+0x1d8>)
 800384e:	edc3 7a00 	vstr	s15, [r3]
		motor_left_rpm_lpf_int = motor_left_rpm_lpf;
 8003852:	4b1f      	ldr	r3, [pc, #124]	@ (80038d0 <encoder_B+0x1d8>)
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800385c:	ee17 2a90 	vmov	r2, s15
 8003860:	4b1c      	ldr	r3, [pc, #112]	@ (80038d4 <encoder_B+0x1dc>)
 8003862:	601a      	str	r2, [r3, #0]
		//-----------------------------------------------------------

		motor_left_rpm_int = motor_left_rpm;
 8003864:	4b18      	ldr	r3, [pc, #96]	@ (80038c8 <encoder_B+0x1d0>)
 8003866:	edd3 7a00 	vldr	s15, [r3]
 800386a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800386e:	ee17 2a90 	vmov	r2, s15
 8003872:	4b19      	ldr	r3, [pc, #100]	@ (80038d8 <encoder_B+0x1e0>)
 8003874:	601a      	str	r2, [r3, #0]
		dirA = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 8003876:	4b0f      	ldr	r3, [pc, #60]	@ (80038b4 <encoder_B+0x1bc>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b10      	cmp	r3, #16
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		dirA = !(dirA);
 800388e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8003892:	2b00      	cmp	r3, #0
 8003894:	bf0c      	ite	eq
 8003896:	2301      	moveq	r3, #1
 8003898:	2300      	movne	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

		//------------ Reset Procedure -------------
		cnt1A = __HAL_TIM_GET_COUNTER(&htim3);
 80038a0:	4b04      	ldr	r3, [pc, #16]	@ (80038b4 <encoder_B+0x1bc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		tickA = HAL_GetTick();
 80038aa:	f000 ffbb 	bl	8004824 <HAL_GetTick>
 80038ae:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
	if (HAL_GetTick() - tickA > 40L){
 80038b2:	e738      	b.n	8003726 <encoder_B+0x2e>
 80038b4:	2000036c 	.word	0x2000036c
 80038b8:	3f733333 	.word	0x3f733333
 80038bc:	200005cc 	.word	0x200005cc
 80038c0:	200005dc 	.word	0x200005dc
 80038c4:	200005e4 	.word	0x200005e4
 80038c8:	200005fc 	.word	0x200005fc
 80038cc:	200005d4 	.word	0x200005d4
 80038d0:	2000060c 	.word	0x2000060c
 80038d4:	20000614 	.word	0x20000614
 80038d8:	20000604 	.word	0x20000604
 80038dc:	00000000 	.word	0x00000000

080038e0 <ultra_sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ultra_sensor */
void ultra_sensor(void *argument)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ultra_sensor */
	char buf[20];
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(TRIG_Port, TRIG_Pin, GPIO_PIN_RESET);
 80038e8:	2200      	movs	r2, #0
 80038ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038ee:	482c      	ldr	r0, [pc, #176]	@ (80039a0 <ultra_sensor+0xc0>)
 80038f0:	f001 ffec 	bl	80058cc <HAL_GPIO_WritePin>
	  osDelay(50);
 80038f4:	2032      	movs	r0, #50	@ 0x32
 80038f6:	f006 ffe9 	bl	800a8cc <osDelay>

	  //Output 1us of Trig
	  HAL_GPIO_WritePin(TRIG_Port, TRIG_Pin, GPIO_PIN_SET);
 80038fa:	2201      	movs	r2, #1
 80038fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003900:	4827      	ldr	r0, [pc, #156]	@ (80039a0 <ultra_sensor+0xc0>)
 8003902:	f001 ffe3 	bl	80058cc <HAL_GPIO_WritePin>
	  delay_us(10);
 8003906:	200a      	movs	r0, #10
 8003908:	f7fe f952 	bl	8001bb0 <delay_us>
	  HAL_GPIO_WritePin(TRIG_Port, TRIG_Pin, GPIO_PIN_RESET);
 800390c:	2200      	movs	r2, #0
 800390e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003912:	4823      	ldr	r0, [pc, #140]	@ (80039a0 <ultra_sensor+0xc0>)
 8003914:	f001 ffda 	bl	80058cc <HAL_GPIO_WritePin>
	  osDelay(50);
 8003918:	2032      	movs	r0, #50	@ 0x32
 800391a:	f006 ffd7 	bl	800a8cc <osDelay>

	  //wait for rising edge
	  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 800391e:	2104      	movs	r1, #4
 8003920:	4820      	ldr	r0, [pc, #128]	@ (80039a4 <ultra_sensor+0xc4>)
 8003922:	f004 fc31 	bl	8008188 <HAL_TIM_IC_Start_IT>
	  HAL_TIM_IC_CaptureCallback(&htim8);
 8003926:	481f      	ldr	r0, [pc, #124]	@ (80039a4 <ultra_sensor+0xc4>)
 8003928:	f7fe f95c 	bl	8001be4 <HAL_TIM_IC_CaptureCallback>

	  us_dist = us_echo * 0.01715;
 800392c:	4b1e      	ldr	r3, [pc, #120]	@ (80039a8 <ultra_sensor+0xc8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7fc fe07 	bl	8000544 <__aeabi_i2d>
 8003936:	a318      	add	r3, pc, #96	@ (adr r3, 8003998 <ultra_sensor+0xb8>)
 8003938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393c:	f7fc fe6c 	bl	8000618 <__aeabi_dmul>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	f7fd f93e 	bl	8000bc8 <__aeabi_d2f>
 800394c:	4603      	mov	r3, r0
 800394e:	4a17      	ldr	r2, [pc, #92]	@ (80039ac <ultra_sensor+0xcc>)
 8003950:	6013      	str	r3, [r2, #0]
	  if (us_dist > 400.0f) us_dist = 400.0f;
 8003952:	4b16      	ldr	r3, [pc, #88]	@ (80039ac <ultra_sensor+0xcc>)
 8003954:	edd3 7a00 	vldr	s15, [r3]
 8003958:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80039b0 <ultra_sensor+0xd0>
 800395c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003964:	dd02      	ble.n	800396c <ultra_sensor+0x8c>
 8003966:	4b11      	ldr	r3, [pc, #68]	@ (80039ac <ultra_sensor+0xcc>)
 8003968:	4a12      	ldr	r2, [pc, #72]	@ (80039b4 <ultra_sensor+0xd4>)
 800396a:	601a      	str	r2, [r3, #0]
	  if (us_dist < 0.0f) us_dist = 0.0f;
 800396c:	4b0f      	ldr	r3, [pc, #60]	@ (80039ac <ultra_sensor+0xcc>)
 800396e:	edd3 7a00 	vldr	s15, [r3]
 8003972:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397a:	d503      	bpl.n	8003984 <ultra_sensor+0xa4>
 800397c:	4b0b      	ldr	r3, [pc, #44]	@ (80039ac <ultra_sensor+0xcc>)
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
	  us_dist_int = us_dist;
 8003984:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <ultra_sensor+0xcc>)
 8003986:	edd3 7a00 	vldr	s15, [r3]
 800398a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800398e:	ee17 2a90 	vmov	r2, s15
 8003992:	4b09      	ldr	r3, [pc, #36]	@ (80039b8 <ultra_sensor+0xd8>)
 8003994:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(TRIG_Port, TRIG_Pin, GPIO_PIN_RESET);
 8003996:	e7a7      	b.n	80038e8 <ultra_sensor+0x8>
 8003998:	04816f00 	.word	0x04816f00
 800399c:	3f918fc5 	.word	0x3f918fc5
 80039a0:	40020800 	.word	0x40020800
 80039a4:	200003fc 	.word	0x200003fc
 80039a8:	200005b8 	.word	0x200005b8
 80039ac:	200005bc 	.word	0x200005bc
 80039b0:	43c80000 	.word	0x43c80000
 80039b4:	43c80000 	.word	0x43c80000
 80039b8:	200005c8 	.word	0x200005c8

080039bc <sensor_reading>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensor_reading */
void sensor_reading(void *argument)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b092      	sub	sp, #72	@ 0x48
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensor_reading */
	uint8_t reg_addr = 0x37;    // start from GYRO_ZOUT_H
 80039c4:	2337      	movs	r3, #55	@ 0x37
 80039c6:	737b      	strb	r3, [r7, #13]
	uint8_t rawData[2];         // to store MSB and LSB
	float B = 0.9f;
 80039c8:	4b77      	ldr	r3, [pc, #476]	@ (8003ba8 <sensor_reading+0x1ec>)
 80039ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

	int16_t drift_raw, drift_total=0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	857b      	strh	r3, [r7, #42]	@ 0x2a
	float drift_degrees;

	int delay = 10;
 80039d0:	230a      	movs	r3, #10
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
	float dt;
	double offset = 0;
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double trash = 0;
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t tick1, tick2;

	icm20948_init();
 80039f0:	f7fe fb92 	bl	8002118 <icm20948_init>
	osDelay(100); //delay to make sure ICM 20948 power up
 80039f4:	2064      	movs	r0, #100	@ 0x64
 80039f6:	f006 ff69 	bl	800a8cc <osDelay>

	tick1 = HAL_GetTick();
 80039fa:	f000 ff13 	bl	8004824 <HAL_GetTick>
 80039fe:	6338      	str	r0, [r7, #48]	@ 0x30

	while (i < 1000){
 8003a00:	e033      	b.n	8003a6a <sensor_reading+0xae>
		osDelay(1);
 8003a02:	2001      	movs	r0, #1
 8003a04:	f006 ff62 	bl	800a8cc <osDelay>
		HAL_I2C_Master_Transmit(&hi2c2, 0x68 << 1, &reg_addr, 1, 1000);
 8003a08:	f107 020d 	add.w	r2, r7, #13
 8003a0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2301      	movs	r3, #1
 8003a14:	21d0      	movs	r1, #208	@ 0xd0
 8003a16:	4865      	ldr	r0, [pc, #404]	@ (8003bac <sensor_reading+0x1f0>)
 8003a18:	f002 f900 	bl	8005c1c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, 0x68 << 1, rawData, 2, 1000);
 8003a1c:	f107 0208 	add.w	r2, r7, #8
 8003a20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2302      	movs	r3, #2
 8003a28:	21d0      	movs	r1, #208	@ 0xd0
 8003a2a:	4860      	ldr	r0, [pc, #384]	@ (8003bac <sensor_reading+0x1f0>)
 8003a2c:	f002 f9f4 	bl	8005e18 <HAL_I2C_Master_Receive>
		drift_raw = (int16_t)((rawData[0] << 8) | rawData[1]);
 8003a30:	7a3b      	ldrb	r3, [r7, #8]
 8003a32:	b21b      	sxth	r3, r3
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	b21a      	sxth	r2, r3
 8003a38:	7a7b      	ldrb	r3, [r7, #9]
 8003a3a:	b21b      	sxth	r3, r3
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	81fb      	strh	r3, [r7, #14]
		offset += drift_raw;
 8003a40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fc fd7d 	bl	8000544 <__aeabi_i2d>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003a52:	f7fc fc2b 	bl	80002ac <__adddf3>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
		tick1 = HAL_GetTick();
 8003a5e:	f000 fee1 	bl	8004824 <HAL_GetTick>
 8003a62:	6338      	str	r0, [r7, #48]	@ 0x30
		i++;
 8003a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a66:	3301      	adds	r3, #1
 8003a68:	637b      	str	r3, [r7, #52]	@ 0x34
	while (i < 1000){
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a70:	dbc7      	blt.n	8003a02 <sensor_reading+0x46>
	}
	offset = offset/i;
 8003a72:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003a74:	f7fc fd66 	bl	8000544 <__aeabi_i2d>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003a80:	f7fc fef4 	bl	800086c <__aeabi_ddiv>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38


	tick1 = HAL_GetTick();
 8003a8c:	f000 feca 	bl	8004824 <HAL_GetTick>
 8003a90:	6338      	str	r0, [r7, #48]	@ 0x30
  /* Infinite loop */
  for(;;)
  {
	//------------------- Gyroscope Readings ---------------------------------------
	// Step 1: Tell sensor which register to read
	if(HAL_I2C_Master_Transmit(&hi2c2, 0x68 << 1, &reg_addr, 1, 1000)!= HAL_OK){
 8003a92:	f107 020d 	add.w	r2, r7, #13
 8003a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	21d0      	movs	r1, #208	@ 0xd0
 8003aa0:	4842      	ldr	r0, [pc, #264]	@ (8003bac <sensor_reading+0x1f0>)
 8003aa2:	f002 f8bb 	bl	8005c1c <HAL_I2C_Master_Transmit>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <sensor_reading+0xfa>
		OLED_ShowString(5, 5, "0");
 8003aac:	4a40      	ldr	r2, [pc, #256]	@ (8003bb0 <sensor_reading+0x1f4>)
 8003aae:	2105      	movs	r1, #5
 8003ab0:	2005      	movs	r0, #5
 8003ab2:	f009 fd59 	bl	800d568 <OLED_ShowString>
	}

	// Step 2: Read 2 bytes (MSB + LSB)
	if (HAL_I2C_Master_Receive(&hi2c2, 0x68 << 1, rawData, 2, 1000)!=HAL_OK){
 8003ab6:	f107 0208 	add.w	r2, r7, #8
 8003aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	21d0      	movs	r1, #208	@ 0xd0
 8003ac4:	4839      	ldr	r0, [pc, #228]	@ (8003bac <sensor_reading+0x1f0>)
 8003ac6:	f002 f9a7 	bl	8005e18 <HAL_I2C_Master_Receive>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d004      	beq.n	8003ada <sensor_reading+0x11e>
		OLED_ShowString(5, 5, "1");
 8003ad0:	4a38      	ldr	r2, [pc, #224]	@ (8003bb4 <sensor_reading+0x1f8>)
 8003ad2:	2105      	movs	r1, #5
 8003ad4:	2005      	movs	r0, #5
 8003ad6:	f009 fd47 	bl	800d568 <OLED_ShowString>
	}
	// Combine into signed 16-bit value
	gyro_z_raw = (int16_t)((rawData[0] << 8) | rawData[1]);
 8003ada:	7a3b      	ldrb	r3, [r7, #8]
 8003adc:	b21b      	sxth	r3, r3
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	b21a      	sxth	r2, r3
 8003ae2:	7a7b      	ldrb	r3, [r7, #9]
 8003ae4:	b21b      	sxth	r3, r3
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	b21a      	sxth	r2, r3
 8003aea:	4b33      	ldr	r3, [pc, #204]	@ (8003bb8 <sensor_reading+0x1fc>)
 8003aec:	801a      	strh	r2, [r3, #0]
	gyro_z_raw -= offset;
 8003aee:	4b32      	ldr	r3, [pc, #200]	@ (8003bb8 <sensor_reading+0x1fc>)
 8003af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fc fd25 	bl	8000544 <__aeabi_i2d>
 8003afa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003afe:	f7fc fbd3 	bl	80002a8 <__aeabi_dsub>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f7fd f835 	bl	8000b78 <__aeabi_d2iz>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	b21a      	sxth	r2, r3
 8003b12:	4b29      	ldr	r3, [pc, #164]	@ (8003bb8 <sensor_reading+0x1fc>)
 8003b14:	801a      	strh	r2, [r3, #0]
	gyro_z_dps = gyro_z_raw / 131.0f;
 8003b16:	4b28      	ldr	r3, [pc, #160]	@ (8003bb8 <sensor_reading+0x1fc>)
 8003b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b1c:	ee07 3a90 	vmov	s15, r3
 8003b20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b24:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8003bbc <sensor_reading+0x200>
 8003b28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b2c:	4b24      	ldr	r3, [pc, #144]	@ (8003bc0 <sensor_reading+0x204>)
 8003b2e:	edc3 7a00 	vstr	s15, [r3]
	gyro_z_dps_int = gyro_z_dps;
 8003b32:	4b23      	ldr	r3, [pc, #140]	@ (8003bc0 <sensor_reading+0x204>)
 8003b34:	edd3 7a00 	vldr	s15, [r3]
 8003b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b3c:	ee17 2a90 	vmov	r2, s15
 8003b40:	4b20      	ldr	r3, [pc, #128]	@ (8003bc4 <sensor_reading+0x208>)
 8003b42:	601a      	str	r2, [r3, #0]
	// -----------------------------------------------------------------------------

	//-------------------- Angle Calculation -----------------------
	tick2 = HAL_GetTick();
 8003b44:	f000 fe6e 	bl	8004824 <HAL_GetTick>
 8003b48:	6178      	str	r0, [r7, #20]
	dt = (tick2-tick1) / 1000.0f;
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	ee07 3a90 	vmov	s15, r3
 8003b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b58:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8003bc8 <sensor_reading+0x20c>
 8003b5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b60:	edc7 7a04 	vstr	s15, [r7, #16]
	angle_direction = prev_angle_direction + (gyro_z_dps * dt);
 8003b64:	4b16      	ldr	r3, [pc, #88]	@ (8003bc0 <sensor_reading+0x204>)
 8003b66:	ed93 7a00 	vldr	s14, [r3]
 8003b6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b72:	4b16      	ldr	r3, [pc, #88]	@ (8003bcc <sensor_reading+0x210>)
 8003b74:	edd3 7a00 	vldr	s15, [r3]
 8003b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b7c:	4b14      	ldr	r3, [pc, #80]	@ (8003bd0 <sensor_reading+0x214>)
 8003b7e:	edc3 7a00 	vstr	s15, [r3]
	prev_angle_direction = angle_direction;
 8003b82:	4b13      	ldr	r3, [pc, #76]	@ (8003bd0 <sensor_reading+0x214>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a11      	ldr	r2, [pc, #68]	@ (8003bcc <sensor_reading+0x210>)
 8003b88:	6013      	str	r3, [r2, #0]
	angle_direction_int = angle_direction;
 8003b8a:	4b11      	ldr	r3, [pc, #68]	@ (8003bd0 <sensor_reading+0x214>)
 8003b8c:	edd3 7a00 	vldr	s15, [r3]
 8003b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b94:	ee17 2a90 	vmov	r2, s15
 8003b98:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <sensor_reading+0x218>)
 8003b9a:	601a      	str	r2, [r3, #0]
	//--------------------------------------------------------------

	tick1 = tick2;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	633b      	str	r3, [r7, #48]	@ 0x30

	osDelay(1);
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	f006 fe93 	bl	800a8cc <osDelay>
	if(HAL_I2C_Master_Transmit(&hi2c2, 0x68 << 1, &reg_addr, 1, 1000)!= HAL_OK){
 8003ba6:	e774      	b.n	8003a92 <sensor_reading+0xd6>
 8003ba8:	3f666666 	.word	0x3f666666
 8003bac:	20000288 	.word	0x20000288
 8003bb0:	080105dc 	.word	0x080105dc
 8003bb4:	080105e0 	.word	0x080105e0
 8003bb8:	200005a0 	.word	0x200005a0
 8003bbc:	43030000 	.word	0x43030000
 8003bc0:	200005a4 	.word	0x200005a4
 8003bc4:	200005a8 	.word	0x200005a8
 8003bc8:	447a0000 	.word	0x447a0000
 8003bcc:	200005b4 	.word	0x200005b4
 8003bd0:	200005ac 	.word	0x200005ac
 8003bd4:	200005b0 	.word	0x200005b0

08003bd8 <ir_dist>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ir_dist */
void ir_dist(void *argument)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	// ---------------- IR Sensor Left Readings ------------------------
	HAL_ADC_Start(&hadc1);
 8003be0:	4849      	ldr	r0, [pc, #292]	@ (8003d08 <ir_dist+0x130>)
 8003be2:	f000 fe93 	bl	800490c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 20);
 8003be6:	2114      	movs	r1, #20
 8003be8:	4847      	ldr	r0, [pc, #284]	@ (8003d08 <ir_dist+0x130>)
 8003bea:	f000 ff94 	bl	8004b16 <HAL_ADC_PollForConversion>
	ir_raw_left = HAL_ADC_GetValue(&hadc1);
 8003bee:	4846      	ldr	r0, [pc, #280]	@ (8003d08 <ir_dist+0x130>)
 8003bf0:	f001 f81c 	bl	8004c2c <HAL_ADC_GetValue>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	4b44      	ldr	r3, [pc, #272]	@ (8003d0c <ir_dist+0x134>)
 8003bfa:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8003bfc:	4842      	ldr	r0, [pc, #264]	@ (8003d08 <ir_dist+0x130>)
 8003bfe:	f000 ff57 	bl	8004ab0 <HAL_ADC_Stop>

	//  40483.4058f / (raw + 50.8020f) - 4.6692f;
	ir_dist_left = (40483.4058f / (ir_raw_left + 50.8020f)) - 4.6692f;
 8003c02:	4b42      	ldr	r3, [pc, #264]	@ (8003d0c <ir_dist+0x134>)
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c0e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8003d10 <ir_dist+0x138>
 8003c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c16:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8003d14 <ir_dist+0x13c>
 8003c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c1e:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003d18 <ir_dist+0x140>
 8003c22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c26:	4b3d      	ldr	r3, [pc, #244]	@ (8003d1c <ir_dist+0x144>)
 8003c28:	edc3 7a00 	vstr	s15, [r3]
	if (ir_dist_left > 40.0f) ir_dist_left = 40.0;
 8003c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d1c <ir_dist+0x144>)
 8003c2e:	edd3 7a00 	vldr	s15, [r3]
 8003c32:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8003d20 <ir_dist+0x148>
 8003c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3e:	dd02      	ble.n	8003c46 <ir_dist+0x6e>
 8003c40:	4b36      	ldr	r3, [pc, #216]	@ (8003d1c <ir_dist+0x144>)
 8003c42:	4a38      	ldr	r2, [pc, #224]	@ (8003d24 <ir_dist+0x14c>)
 8003c44:	601a      	str	r2, [r3, #0]
	if (ir_dist_left < 0.0f) ir_dist_left = 0.0f;
 8003c46:	4b35      	ldr	r3, [pc, #212]	@ (8003d1c <ir_dist+0x144>)
 8003c48:	edd3 7a00 	vldr	s15, [r3]
 8003c4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c54:	d503      	bpl.n	8003c5e <ir_dist+0x86>
 8003c56:	4b31      	ldr	r3, [pc, #196]	@ (8003d1c <ir_dist+0x144>)
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
	ir_dist_left_int = ir_dist_left;
 8003c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d1c <ir_dist+0x144>)
 8003c60:	edd3 7a00 	vldr	s15, [r3]
 8003c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c68:	ee17 2a90 	vmov	r2, s15
 8003c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d28 <ir_dist+0x150>)
 8003c6e:	601a      	str	r2, [r3, #0]
	// -------------------------------------------------------------------

	// ------------------ IR Sensor Right Readings  -----------------------
	HAL_ADC_Start(&hadc2);
 8003c70:	482e      	ldr	r0, [pc, #184]	@ (8003d2c <ir_dist+0x154>)
 8003c72:	f000 fe4b 	bl	800490c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 20);
 8003c76:	2114      	movs	r1, #20
 8003c78:	482c      	ldr	r0, [pc, #176]	@ (8003d2c <ir_dist+0x154>)
 8003c7a:	f000 ff4c 	bl	8004b16 <HAL_ADC_PollForConversion>
	ir_raw_right = HAL_ADC_GetValue(&hadc2);
 8003c7e:	482b      	ldr	r0, [pc, #172]	@ (8003d2c <ir_dist+0x154>)
 8003c80:	f000 ffd4 	bl	8004c2c <HAL_ADC_GetValue>
 8003c84:	4603      	mov	r3, r0
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	4b29      	ldr	r3, [pc, #164]	@ (8003d30 <ir_dist+0x158>)
 8003c8a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 8003c8c:	4827      	ldr	r0, [pc, #156]	@ (8003d2c <ir_dist+0x154>)
 8003c8e:	f000 ff0f 	bl	8004ab0 <HAL_ADC_Stop>

	// 44430.9618f / (raw + 109.84988f) - 5.72134f;
	ir_dist_right = (44430.9618f / (ir_raw_right + 109.84988f)) - 5.72134f;
 8003c92:	4b27      	ldr	r3, [pc, #156]	@ (8003d30 <ir_dist+0x158>)
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c9e:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8003d34 <ir_dist+0x15c>
 8003ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ca6:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8003d38 <ir_dist+0x160>
 8003caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cae:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8003d3c <ir_dist+0x164>
 8003cb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cb6:	4b22      	ldr	r3, [pc, #136]	@ (8003d40 <ir_dist+0x168>)
 8003cb8:	edc3 7a00 	vstr	s15, [r3]
	if (ir_dist_right > 40.0f) ir_dist_right = 40.0;
 8003cbc:	4b20      	ldr	r3, [pc, #128]	@ (8003d40 <ir_dist+0x168>)
 8003cbe:	edd3 7a00 	vldr	s15, [r3]
 8003cc2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003d20 <ir_dist+0x148>
 8003cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cce:	dd02      	ble.n	8003cd6 <ir_dist+0xfe>
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d40 <ir_dist+0x168>)
 8003cd2:	4a14      	ldr	r2, [pc, #80]	@ (8003d24 <ir_dist+0x14c>)
 8003cd4:	601a      	str	r2, [r3, #0]
 	if (ir_dist_right < 0.0f) ir_dist_right = 0.0f;
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ir_dist+0x168>)
 8003cd8:	edd3 7a00 	vldr	s15, [r3]
 8003cdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce4:	d503      	bpl.n	8003cee <ir_dist+0x116>
 8003ce6:	4b16      	ldr	r3, [pc, #88]	@ (8003d40 <ir_dist+0x168>)
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
	ir_dist_right_int = ir_dist_right;
 8003cee:	4b14      	ldr	r3, [pc, #80]	@ (8003d40 <ir_dist+0x168>)
 8003cf0:	edd3 7a00 	vldr	s15, [r3]
 8003cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cf8:	ee17 2a90 	vmov	r2, s15
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ir_dist+0x16c>)
 8003cfe:	601a      	str	r2, [r3, #0]
	//---------------------------------------------------------------------


    osDelay(200);
 8003d00:	20c8      	movs	r0, #200	@ 0xc8
 8003d02:	f006 fde3 	bl	800a8cc <osDelay>
	HAL_ADC_Start(&hadc1);
 8003d06:	e76b      	b.n	8003be0 <ir_dist+0x8>
 8003d08:	200001f8 	.word	0x200001f8
 8003d0c:	20000594 	.word	0x20000594
 8003d10:	424b353f 	.word	0x424b353f
 8003d14:	471e2368 	.word	0x471e2368
 8003d18:	40956a16 	.word	0x40956a16
 8003d1c:	2000058c 	.word	0x2000058c
 8003d20:	42200000 	.word	0x42200000
 8003d24:	42200000 	.word	0x42200000
 8003d28:	2000059c 	.word	0x2000059c
 8003d2c:	20000240 	.word	0x20000240
 8003d30:	20000596 	.word	0x20000596
 8003d34:	42dbb323 	.word	0x42dbb323
 8003d38:	472d8ef6 	.word	0x472d8ef6
 8003d3c:	40b71538 	.word	0x40b71538
 8003d40:	20000590 	.word	0x20000590
 8003d44:	20000598 	.word	0x20000598

08003d48 <transmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit */
void transmit(void *argument)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b094      	sub	sp, #80	@ 0x50
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit */
  char sbuf[64];
  int target_rpm = 60;
 8003d50:	233c      	movs	r3, #60	@ 0x3c
 8003d52:	64fb      	str	r3, [r7, #76]	@ 0x4c

//	  HAL_UART_Transmit(&huart3, sbuf, strlen(sbuf), 0xFFFF);



    osDelay(200);
 8003d54:	20c8      	movs	r0, #200	@ 0xc8
 8003d56:	f006 fdb9 	bl	800a8cc <osDelay>
 8003d5a:	e7fb      	b.n	8003d54 <transmit+0xc>

08003d5c <encoder_diff>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_diff */
void encoder_diff(void *argument)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_diff */
	int left, right;
  /* Infinite loop */
  for(;;)
  {
    left = 65535 - __HAL_TIM_GET_COUNTER(&htim3);
 8003d64:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <encoder_diff+0x34>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8003d6e:	33ff      	adds	r3, #255	@ 0xff
 8003d70:	60fb      	str	r3, [r7, #12]
	right = __HAL_TIM_GET_COUNTER(&htim2);
 8003d72:	4b08      	ldr	r3, [pc, #32]	@ (8003d94 <encoder_diff+0x38>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d78:	60bb      	str	r3, [r7, #8]
	encoder_difference = left - right;
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	4a05      	ldr	r2, [pc, #20]	@ (8003d98 <encoder_diff+0x3c>)
 8003d82:	6013      	str	r3, [r2, #0]

	osDelay(20);
 8003d84:	2014      	movs	r0, #20
 8003d86:	f006 fda1 	bl	800a8cc <osDelay>
    left = 65535 - __HAL_TIM_GET_COUNTER(&htim3);
 8003d8a:	bf00      	nop
 8003d8c:	e7ea      	b.n	8003d64 <encoder_diff+0x8>
 8003d8e:	bf00      	nop
 8003d90:	2000036c 	.word	0x2000036c
 8003d94:	20000324 	.word	0x20000324
 8003d98:	2000061c 	.word	0x2000061c

08003d9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a04      	ldr	r2, [pc, #16]	@ (8003dbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d101      	bne.n	8003db2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003dae:	f000 fd25 	bl	80047fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40001000 	.word	0x40001000

08003dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dc4:	b672      	cpsid	i
}
 8003dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003dc8:	bf00      	nop
 8003dca:	e7fd      	b.n	8003dc8 <Error_Handler+0x8>

08003dcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	607b      	str	r3, [r7, #4]
 8003dd6:	4b12      	ldr	r3, [pc, #72]	@ (8003e20 <HAL_MspInit+0x54>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dda:	4a11      	ldr	r2, [pc, #68]	@ (8003e20 <HAL_MspInit+0x54>)
 8003ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003de2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e20 <HAL_MspInit+0x54>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dea:	607b      	str	r3, [r7, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e20 <HAL_MspInit+0x54>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	4a0a      	ldr	r2, [pc, #40]	@ (8003e20 <HAL_MspInit+0x54>)
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dfe:	4b08      	ldr	r3, [pc, #32]	@ (8003e20 <HAL_MspInit+0x54>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	210f      	movs	r1, #15
 8003e0e:	f06f 0001 	mvn.w	r0, #1
 8003e12:	f001 f9ef 	bl	80051f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800

08003e24 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08c      	sub	sp, #48	@ 0x30
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2c:	f107 031c 	add.w	r3, r7, #28
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a2e      	ldr	r2, [pc, #184]	@ (8003efc <HAL_ADC_MspInit+0xd8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d128      	bne.n	8003e98 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f00 <HAL_ADC_MspInit+0xdc>)
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f00 <HAL_ADC_MspInit+0xdc>)
 8003e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e56:	4b2a      	ldr	r3, [pc, #168]	@ (8003f00 <HAL_ADC_MspInit+0xdc>)
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	4b26      	ldr	r3, [pc, #152]	@ (8003f00 <HAL_ADC_MspInit+0xdc>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	4a25      	ldr	r2, [pc, #148]	@ (8003f00 <HAL_ADC_MspInit+0xdc>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e72:	4b23      	ldr	r3, [pc, #140]	@ (8003f00 <HAL_ADC_MspInit+0xdc>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e7e:	2304      	movs	r3, #4
 8003e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e82:	2303      	movs	r3, #3
 8003e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8a:	f107 031c 	add.w	r3, r7, #28
 8003e8e:	4619      	mov	r1, r3
 8003e90:	481c      	ldr	r0, [pc, #112]	@ (8003f04 <HAL_ADC_MspInit+0xe0>)
 8003e92:	f001 fa6b 	bl	800536c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003e96:	e02c      	b.n	8003ef2 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8003f08 <HAL_ADC_MspInit+0xe4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d127      	bne.n	8003ef2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	4b16      	ldr	r3, [pc, #88]	@ (8003f00 <HAL_ADC_MspInit+0xdc>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eaa:	4a15      	ldr	r2, [pc, #84]	@ (8003f00 <HAL_ADC_MspInit+0xdc>)
 8003eac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003eb2:	4b13      	ldr	r3, [pc, #76]	@ (8003f00 <HAL_ADC_MspInit+0xdc>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f00 <HAL_ADC_MspInit+0xdc>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8003f00 <HAL_ADC_MspInit+0xdc>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ece:	4b0c      	ldr	r3, [pc, #48]	@ (8003f00 <HAL_ADC_MspInit+0xdc>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003eda:	2308      	movs	r3, #8
 8003edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee6:	f107 031c 	add.w	r3, r7, #28
 8003eea:	4619      	mov	r1, r3
 8003eec:	4805      	ldr	r0, [pc, #20]	@ (8003f04 <HAL_ADC_MspInit+0xe0>)
 8003eee:	f001 fa3d 	bl	800536c <HAL_GPIO_Init>
}
 8003ef2:	bf00      	nop
 8003ef4:	3730      	adds	r7, #48	@ 0x30
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40012000 	.word	0x40012000
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40020000 	.word	0x40020000
 8003f08:	40012100 	.word	0x40012100

08003f0c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	@ 0x28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a19      	ldr	r2, [pc, #100]	@ (8003f90 <HAL_I2C_MspInit+0x84>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d12c      	bne.n	8003f88 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	4b18      	ldr	r3, [pc, #96]	@ (8003f94 <HAL_I2C_MspInit+0x88>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f36:	4a17      	ldr	r2, [pc, #92]	@ (8003f94 <HAL_I2C_MspInit+0x88>)
 8003f38:	f043 0302 	orr.w	r3, r3, #2
 8003f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f3e:	4b15      	ldr	r3, [pc, #84]	@ (8003f94 <HAL_I2C_MspInit+0x88>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f4a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f50:	2312      	movs	r3, #18
 8003f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f60:	f107 0314 	add.w	r3, r7, #20
 8003f64:	4619      	mov	r1, r3
 8003f66:	480c      	ldr	r0, [pc, #48]	@ (8003f98 <HAL_I2C_MspInit+0x8c>)
 8003f68:	f001 fa00 	bl	800536c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	4b08      	ldr	r3, [pc, #32]	@ (8003f94 <HAL_I2C_MspInit+0x88>)
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	4a07      	ldr	r2, [pc, #28]	@ (8003f94 <HAL_I2C_MspInit+0x88>)
 8003f76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <HAL_I2C_MspInit+0x88>)
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003f88:	bf00      	nop
 8003f8a:	3728      	adds	r7, #40	@ 0x28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40005800 	.word	0x40005800
 8003f94:	40023800 	.word	0x40023800
 8003f98:	40020400 	.word	0x40020400

08003f9c <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8003fd8 <HAL_I2C_MspDeInit+0x3c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10f      	bne.n	8003fce <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003fae:	4b0b      	ldr	r3, [pc, #44]	@ (8003fdc <HAL_I2C_MspDeInit+0x40>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003fdc <HAL_I2C_MspDeInit+0x40>)
 8003fb4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003fb8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8003fba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003fbe:	4808      	ldr	r0, [pc, #32]	@ (8003fe0 <HAL_I2C_MspDeInit+0x44>)
 8003fc0:	f001 fb70 	bl	80056a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8003fc4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003fc8:	4805      	ldr	r0, [pc, #20]	@ (8003fe0 <HAL_I2C_MspDeInit+0x44>)
 8003fca:	f001 fb6b 	bl	80056a4 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40005800 	.word	0x40005800
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40020400 	.word	0x40020400

08003fe4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08e      	sub	sp, #56	@ 0x38
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
 8003ff8:	60da      	str	r2, [r3, #12]
 8003ffa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a4f      	ldr	r2, [pc, #316]	@ (8004140 <HAL_TIM_Base_MspInit+0x15c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10e      	bne.n	8004024 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	623b      	str	r3, [r7, #32]
 800400a:	4b4e      	ldr	r3, [pc, #312]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400e:	4a4d      	ldr	r2, [pc, #308]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6453      	str	r3, [r2, #68]	@ 0x44
 8004016:	4b4b      	ldr	r3, [pc, #300]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	623b      	str	r3, [r7, #32]
 8004020:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004022:	e088      	b.n	8004136 <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM4)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a47      	ldr	r2, [pc, #284]	@ (8004148 <HAL_TIM_Base_MspInit+0x164>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d10e      	bne.n	800404c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	4b44      	ldr	r3, [pc, #272]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	4a43      	ldr	r2, [pc, #268]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 8004038:	f043 0304 	orr.w	r3, r3, #4
 800403c:	6413      	str	r3, [r2, #64]	@ 0x40
 800403e:	4b41      	ldr	r3, [pc, #260]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	61fb      	str	r3, [r7, #28]
 8004048:	69fb      	ldr	r3, [r7, #28]
}
 800404a:	e074      	b.n	8004136 <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM8)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a3e      	ldr	r2, [pc, #248]	@ (800414c <HAL_TIM_Base_MspInit+0x168>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d134      	bne.n	80040c0 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	4b3a      	ldr	r3, [pc, #232]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 800405c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405e:	4a39      	ldr	r2, [pc, #228]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 8004060:	f043 0302 	orr.w	r3, r3, #2
 8004064:	6453      	str	r3, [r2, #68]	@ 0x44
 8004066:	4b37      	ldr	r3, [pc, #220]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	4b33      	ldr	r3, [pc, #204]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	4a32      	ldr	r2, [pc, #200]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 800407c:	f043 0304 	orr.w	r3, r3, #4
 8004080:	6313      	str	r3, [r2, #48]	@ 0x30
 8004082:	4b30      	ldr	r3, [pc, #192]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800408e:	2380      	movs	r3, #128	@ 0x80
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004092:	2302      	movs	r3, #2
 8004094:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004096:	2300      	movs	r3, #0
 8004098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800409a:	2300      	movs	r3, #0
 800409c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800409e:	2303      	movs	r3, #3
 80040a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040a6:	4619      	mov	r1, r3
 80040a8:	4829      	ldr	r0, [pc, #164]	@ (8004150 <HAL_TIM_Base_MspInit+0x16c>)
 80040aa:	f001 f95f 	bl	800536c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80040ae:	2200      	movs	r2, #0
 80040b0:	2105      	movs	r1, #5
 80040b2:	202e      	movs	r0, #46	@ 0x2e
 80040b4:	f001 f89e 	bl	80051f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80040b8:	202e      	movs	r0, #46	@ 0x2e
 80040ba:	f001 f8b7 	bl	800522c <HAL_NVIC_EnableIRQ>
}
 80040be:	e03a      	b.n	8004136 <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM9)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a23      	ldr	r2, [pc, #140]	@ (8004154 <HAL_TIM_Base_MspInit+0x170>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d10e      	bne.n	80040e8 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80040da:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	693b      	ldr	r3, [r7, #16]
}
 80040e6:	e026      	b.n	8004136 <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM12)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004158 <HAL_TIM_Base_MspInit+0x174>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d10e      	bne.n	8004110 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	4b13      	ldr	r3, [pc, #76]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	4a12      	ldr	r2, [pc, #72]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 80040fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004100:	6413      	str	r3, [r2, #64]	@ 0x40
 8004102:	4b10      	ldr	r3, [pc, #64]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
}
 800410e:	e012      	b.n	8004136 <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM14)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a11      	ldr	r2, [pc, #68]	@ (800415c <HAL_TIM_Base_MspInit+0x178>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d10d      	bne.n	8004136 <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	4a08      	ldr	r2, [pc, #32]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 8004124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004128:	6413      	str	r3, [r2, #64]	@ 0x40
 800412a:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <HAL_TIM_Base_MspInit+0x160>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	68bb      	ldr	r3, [r7, #8]
}
 8004136:	bf00      	nop
 8004138:	3738      	adds	r7, #56	@ 0x38
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40010000 	.word	0x40010000
 8004144:	40023800 	.word	0x40023800
 8004148:	40000800 	.word	0x40000800
 800414c:	40010400 	.word	0x40010400
 8004150:	40020800 	.word	0x40020800
 8004154:	40014000 	.word	0x40014000
 8004158:	40001800 	.word	0x40001800
 800415c:	40002000 	.word	0x40002000

08004160 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08c      	sub	sp, #48	@ 0x30
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004168:	f107 031c 	add.w	r3, r7, #28
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004180:	d14b      	bne.n	800421a <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	4b3f      	ldr	r3, [pc, #252]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	4a3e      	ldr	r2, [pc, #248]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6413      	str	r3, [r2, #64]	@ 0x40
 8004192:	4b3c      	ldr	r3, [pc, #240]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	61bb      	str	r3, [r7, #24]
 800419c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	4b38      	ldr	r3, [pc, #224]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a6:	4a37      	ldr	r2, [pc, #220]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ae:	4b35      	ldr	r3, [pc, #212]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	4b31      	ldr	r3, [pc, #196]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c2:	4a30      	ldr	r2, [pc, #192]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80041d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041dc:	2302      	movs	r3, #2
 80041de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e4:	2300      	movs	r3, #0
 80041e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041e8:	2301      	movs	r3, #1
 80041ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ec:	f107 031c 	add.w	r3, r7, #28
 80041f0:	4619      	mov	r1, r3
 80041f2:	4825      	ldr	r0, [pc, #148]	@ (8004288 <HAL_TIM_Encoder_MspInit+0x128>)
 80041f4:	f001 f8ba 	bl	800536c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80041f8:	2308      	movs	r3, #8
 80041fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fc:	2302      	movs	r3, #2
 80041fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004200:	2300      	movs	r3, #0
 8004202:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004204:	2300      	movs	r3, #0
 8004206:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004208:	2301      	movs	r3, #1
 800420a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420c:	f107 031c 	add.w	r3, r7, #28
 8004210:	4619      	mov	r1, r3
 8004212:	481e      	ldr	r0, [pc, #120]	@ (800428c <HAL_TIM_Encoder_MspInit+0x12c>)
 8004214:	f001 f8aa 	bl	800536c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004218:	e030      	b.n	800427c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1c      	ldr	r2, [pc, #112]	@ (8004290 <HAL_TIM_Encoder_MspInit+0x130>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d12b      	bne.n	800427c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	4b16      	ldr	r3, [pc, #88]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422c:	4a15      	ldr	r2, [pc, #84]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 800422e:	f043 0302 	orr.w	r3, r3, #2
 8004232:	6413      	str	r3, [r2, #64]	@ 0x40
 8004234:	4b13      	ldr	r3, [pc, #76]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004240:	2300      	movs	r3, #0
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	4b0f      	ldr	r3, [pc, #60]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 8004246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004248:	4a0e      	ldr	r2, [pc, #56]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 800424a:	f043 0302 	orr.w	r3, r3, #2
 800424e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004250:	4b0c      	ldr	r3, [pc, #48]	@ (8004284 <HAL_TIM_Encoder_MspInit+0x124>)
 8004252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800425c:	2330      	movs	r3, #48	@ 0x30
 800425e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004260:	2302      	movs	r3, #2
 8004262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004264:	2300      	movs	r3, #0
 8004266:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004268:	2300      	movs	r3, #0
 800426a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800426c:	2302      	movs	r3, #2
 800426e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004270:	f107 031c 	add.w	r3, r7, #28
 8004274:	4619      	mov	r1, r3
 8004276:	4805      	ldr	r0, [pc, #20]	@ (800428c <HAL_TIM_Encoder_MspInit+0x12c>)
 8004278:	f001 f878 	bl	800536c <HAL_GPIO_Init>
}
 800427c:	bf00      	nop
 800427e:	3730      	adds	r7, #48	@ 0x30
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40023800 	.word	0x40023800
 8004288:	40020000 	.word	0x40020000
 800428c:	40020400 	.word	0x40020400
 8004290:	40000400 	.word	0x40000400

08004294 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08a      	sub	sp, #40	@ 0x28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800429c:	f107 0314 	add.w	r3, r7, #20
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	609a      	str	r2, [r3, #8]
 80042a8:	60da      	str	r2, [r3, #12]
 80042aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a37      	ldr	r2, [pc, #220]	@ (8004390 <HAL_TIM_MspPostInit+0xfc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d11f      	bne.n	80042f6 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	4b36      	ldr	r3, [pc, #216]	@ (8004394 <HAL_TIM_MspPostInit+0x100>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	4a35      	ldr	r2, [pc, #212]	@ (8004394 <HAL_TIM_MspPostInit+0x100>)
 80042c0:	f043 0302 	orr.w	r3, r3, #2
 80042c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042c6:	4b33      	ldr	r3, [pc, #204]	@ (8004394 <HAL_TIM_MspPostInit+0x100>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80042d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80042d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d8:	2302      	movs	r3, #2
 80042da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e0:	2300      	movs	r3, #0
 80042e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80042e4:	2302      	movs	r3, #2
 80042e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e8:	f107 0314 	add.w	r3, r7, #20
 80042ec:	4619      	mov	r1, r3
 80042ee:	482a      	ldr	r0, [pc, #168]	@ (8004398 <HAL_TIM_MspPostInit+0x104>)
 80042f0:	f001 f83c 	bl	800536c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80042f4:	e047      	b.n	8004386 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM9)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a28      	ldr	r2, [pc, #160]	@ (800439c <HAL_TIM_MspPostInit+0x108>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d11e      	bne.n	800433e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	4b23      	ldr	r3, [pc, #140]	@ (8004394 <HAL_TIM_MspPostInit+0x100>)
 8004306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004308:	4a22      	ldr	r2, [pc, #136]	@ (8004394 <HAL_TIM_MspPostInit+0x100>)
 800430a:	f043 0310 	orr.w	r3, r3, #16
 800430e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004310:	4b20      	ldr	r3, [pc, #128]	@ (8004394 <HAL_TIM_MspPostInit+0x100>)
 8004312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800431c:	2360      	movs	r3, #96	@ 0x60
 800431e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004320:	2302      	movs	r3, #2
 8004322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004328:	2300      	movs	r3, #0
 800432a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800432c:	2303      	movs	r3, #3
 800432e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004330:	f107 0314 	add.w	r3, r7, #20
 8004334:	4619      	mov	r1, r3
 8004336:	481a      	ldr	r0, [pc, #104]	@ (80043a0 <HAL_TIM_MspPostInit+0x10c>)
 8004338:	f001 f818 	bl	800536c <HAL_GPIO_Init>
}
 800433c:	e023      	b.n	8004386 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM12)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a18      	ldr	r2, [pc, #96]	@ (80043a4 <HAL_TIM_MspPostInit+0x110>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d11e      	bne.n	8004386 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004348:	2300      	movs	r3, #0
 800434a:	60bb      	str	r3, [r7, #8]
 800434c:	4b11      	ldr	r3, [pc, #68]	@ (8004394 <HAL_TIM_MspPostInit+0x100>)
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	4a10      	ldr	r2, [pc, #64]	@ (8004394 <HAL_TIM_MspPostInit+0x100>)
 8004352:	f043 0302 	orr.w	r3, r3, #2
 8004356:	6313      	str	r3, [r2, #48]	@ 0x30
 8004358:	4b0e      	ldr	r3, [pc, #56]	@ (8004394 <HAL_TIM_MspPostInit+0x100>)
 800435a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004364:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436a:	2302      	movs	r3, #2
 800436c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004372:	2300      	movs	r3, #0
 8004374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004376:	2309      	movs	r3, #9
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800437a:	f107 0314 	add.w	r3, r7, #20
 800437e:	4619      	mov	r1, r3
 8004380:	4805      	ldr	r0, [pc, #20]	@ (8004398 <HAL_TIM_MspPostInit+0x104>)
 8004382:	f000 fff3 	bl	800536c <HAL_GPIO_Init>
}
 8004386:	bf00      	nop
 8004388:	3728      	adds	r7, #40	@ 0x28
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40000800 	.word	0x40000800
 8004394:	40023800 	.word	0x40023800
 8004398:	40020400 	.word	0x40020400
 800439c:	40014000 	.word	0x40014000
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40001800 	.word	0x40001800

080043a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	@ 0x28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b0:	f107 0314 	add.w	r3, r7, #20
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1d      	ldr	r2, [pc, #116]	@ (800443c <HAL_UART_MspInit+0x94>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d134      	bne.n	8004434 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004440 <HAL_UART_MspInit+0x98>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004440 <HAL_UART_MspInit+0x98>)
 80043d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043da:	4b19      	ldr	r3, [pc, #100]	@ (8004440 <HAL_UART_MspInit+0x98>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <HAL_UART_MspInit+0x98>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	4a14      	ldr	r2, [pc, #80]	@ (8004440 <HAL_UART_MspInit+0x98>)
 80043f0:	f043 0308 	orr.w	r3, r3, #8
 80043f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80043f6:	4b12      	ldr	r3, [pc, #72]	@ (8004440 <HAL_UART_MspInit+0x98>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004402:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004408:	2302      	movs	r3, #2
 800440a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440c:	2300      	movs	r3, #0
 800440e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004410:	2303      	movs	r3, #3
 8004412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004414:	2307      	movs	r3, #7
 8004416:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004418:	f107 0314 	add.w	r3, r7, #20
 800441c:	4619      	mov	r1, r3
 800441e:	4809      	ldr	r0, [pc, #36]	@ (8004444 <HAL_UART_MspInit+0x9c>)
 8004420:	f000 ffa4 	bl	800536c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004424:	2200      	movs	r2, #0
 8004426:	2105      	movs	r1, #5
 8004428:	2027      	movs	r0, #39	@ 0x27
 800442a:	f000 fee3 	bl	80051f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800442e:	2027      	movs	r0, #39	@ 0x27
 8004430:	f000 fefc 	bl	800522c <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8004434:	bf00      	nop
 8004436:	3728      	adds	r7, #40	@ 0x28
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40004800 	.word	0x40004800
 8004440:	40023800 	.word	0x40023800
 8004444:	40020c00 	.word	0x40020c00

08004448 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08e      	sub	sp, #56	@ 0x38
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	4b33      	ldr	r3, [pc, #204]	@ (800452c <HAL_InitTick+0xe4>)
 800445e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004460:	4a32      	ldr	r2, [pc, #200]	@ (800452c <HAL_InitTick+0xe4>)
 8004462:	f043 0310 	orr.w	r3, r3, #16
 8004466:	6413      	str	r3, [r2, #64]	@ 0x40
 8004468:	4b30      	ldr	r3, [pc, #192]	@ (800452c <HAL_InitTick+0xe4>)
 800446a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004474:	f107 0210 	add.w	r2, r7, #16
 8004478:	f107 0314 	add.w	r3, r7, #20
 800447c:	4611      	mov	r1, r2
 800447e:	4618      	mov	r0, r3
 8004480:	f003 fbac 	bl	8007bdc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d103      	bne.n	8004496 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800448e:	f003 fb7d 	bl	8007b8c <HAL_RCC_GetPCLK1Freq>
 8004492:	6378      	str	r0, [r7, #52]	@ 0x34
 8004494:	e004      	b.n	80044a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004496:	f003 fb79 	bl	8007b8c <HAL_RCC_GetPCLK1Freq>
 800449a:	4603      	mov	r3, r0
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80044a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a2:	4a23      	ldr	r2, [pc, #140]	@ (8004530 <HAL_InitTick+0xe8>)
 80044a4:	fba2 2303 	umull	r2, r3, r2, r3
 80044a8:	0c9b      	lsrs	r3, r3, #18
 80044aa:	3b01      	subs	r3, #1
 80044ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80044ae:	4b21      	ldr	r3, [pc, #132]	@ (8004534 <HAL_InitTick+0xec>)
 80044b0:	4a21      	ldr	r2, [pc, #132]	@ (8004538 <HAL_InitTick+0xf0>)
 80044b2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80044b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004534 <HAL_InitTick+0xec>)
 80044b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80044ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80044bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004534 <HAL_InitTick+0xec>)
 80044be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80044c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004534 <HAL_InitTick+0xec>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004534 <HAL_InitTick+0xec>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044ce:	4b19      	ldr	r3, [pc, #100]	@ (8004534 <HAL_InitTick+0xec>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80044d4:	4817      	ldr	r0, [pc, #92]	@ (8004534 <HAL_InitTick+0xec>)
 80044d6:	f003 fbb3 	bl	8007c40 <HAL_TIM_Base_Init>
 80044da:	4603      	mov	r3, r0
 80044dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80044e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d11b      	bne.n	8004520 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80044e8:	4812      	ldr	r0, [pc, #72]	@ (8004534 <HAL_InitTick+0xec>)
 80044ea:	f003 fc61 	bl	8007db0 <HAL_TIM_Base_Start_IT>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80044f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d111      	bne.n	8004520 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80044fc:	2036      	movs	r0, #54	@ 0x36
 80044fe:	f000 fe95 	bl	800522c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b0f      	cmp	r3, #15
 8004506:	d808      	bhi.n	800451a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004508:	2200      	movs	r2, #0
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	2036      	movs	r0, #54	@ 0x36
 800450e:	f000 fe71 	bl	80051f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004512:	4a0a      	ldr	r2, [pc, #40]	@ (800453c <HAL_InitTick+0xf4>)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	e002      	b.n	8004520 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004520:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004524:	4618      	mov	r0, r3
 8004526:	3738      	adds	r7, #56	@ 0x38
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40023800 	.word	0x40023800
 8004530:	431bde83 	.word	0x431bde83
 8004534:	2000074c 	.word	0x2000074c
 8004538:	40001000 	.word	0x40001000
 800453c:	20000008 	.word	0x20000008

08004540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <NMI_Handler+0x4>

08004548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800454c:	bf00      	nop
 800454e:	e7fd      	b.n	800454c <HardFault_Handler+0x4>

08004550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004554:	bf00      	nop
 8004556:	e7fd      	b.n	8004554 <MemManage_Handler+0x4>

08004558 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800455c:	bf00      	nop
 800455e:	e7fd      	b.n	800455c <BusFault_Handler+0x4>

08004560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004564:	bf00      	nop
 8004566:	e7fd      	b.n	8004564 <UsageFault_Handler+0x4>

08004568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800456c:	bf00      	nop
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800457c:	4802      	ldr	r0, [pc, #8]	@ (8004588 <USART3_IRQHandler+0x10>)
 800457e:	f005 f919 	bl	80097b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	2000051c 	.word	0x2000051c

0800458c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004590:	4802      	ldr	r0, [pc, #8]	@ (800459c <TIM8_CC_IRQHandler+0x10>)
 8004592:	f003 ffc7 	bl	8008524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	200003fc 	.word	0x200003fc

080045a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80045a4:	4802      	ldr	r0, [pc, #8]	@ (80045b0 <TIM6_DAC_IRQHandler+0x10>)
 80045a6:	f003 ffbd 	bl	8008524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	2000074c 	.word	0x2000074c

080045b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return 1;
 80045b8:	2301      	movs	r3, #1
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <_kill>:

int _kill(int pid, int sig)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80045ce:	f009 fedd 	bl	800e38c <__errno>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2216      	movs	r2, #22
 80045d6:	601a      	str	r2, [r3, #0]
  return -1;
 80045d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_exit>:

void _exit (int status)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80045ec:	f04f 31ff 	mov.w	r1, #4294967295
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ffe7 	bl	80045c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80045f6:	bf00      	nop
 80045f8:	e7fd      	b.n	80045f6 <_exit+0x12>

080045fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b086      	sub	sp, #24
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	e00a      	b.n	8004622 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800460c:	f3af 8000 	nop.w
 8004610:	4601      	mov	r1, r0
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	60ba      	str	r2, [r7, #8]
 8004618:	b2ca      	uxtb	r2, r1
 800461a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	3301      	adds	r3, #1
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	429a      	cmp	r2, r3
 8004628:	dbf0      	blt.n	800460c <_read+0x12>
  }

  return len;
 800462a:	687b      	ldr	r3, [r7, #4]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	e009      	b.n	800465a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	60ba      	str	r2, [r7, #8]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	3301      	adds	r3, #1
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	dbf1      	blt.n	8004646 <_write+0x12>
  }
  return len;
 8004662:	687b      	ldr	r3, [r7, #4]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <_close>:

int _close(int file)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004694:	605a      	str	r2, [r3, #4]
  return 0;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <_isatty>:

int _isatty(int file)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046ac:	2301      	movs	r3, #1
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b085      	sub	sp, #20
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046dc:	4a14      	ldr	r2, [pc, #80]	@ (8004730 <_sbrk+0x5c>)
 80046de:	4b15      	ldr	r3, [pc, #84]	@ (8004734 <_sbrk+0x60>)
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046e8:	4b13      	ldr	r3, [pc, #76]	@ (8004738 <_sbrk+0x64>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046f0:	4b11      	ldr	r3, [pc, #68]	@ (8004738 <_sbrk+0x64>)
 80046f2:	4a12      	ldr	r2, [pc, #72]	@ (800473c <_sbrk+0x68>)
 80046f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046f6:	4b10      	ldr	r3, [pc, #64]	@ (8004738 <_sbrk+0x64>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4413      	add	r3, r2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	429a      	cmp	r2, r3
 8004702:	d207      	bcs.n	8004714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004704:	f009 fe42 	bl	800e38c <__errno>
 8004708:	4603      	mov	r3, r0
 800470a:	220c      	movs	r2, #12
 800470c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295
 8004712:	e009      	b.n	8004728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004714:	4b08      	ldr	r3, [pc, #32]	@ (8004738 <_sbrk+0x64>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800471a:	4b07      	ldr	r3, [pc, #28]	@ (8004738 <_sbrk+0x64>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4413      	add	r3, r2
 8004722:	4a05      	ldr	r2, [pc, #20]	@ (8004738 <_sbrk+0x64>)
 8004724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004726:	68fb      	ldr	r3, [r7, #12]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20020000 	.word	0x20020000
 8004734:	00000400 	.word	0x00000400
 8004738:	20000794 	.word	0x20000794
 800473c:	200056d0 	.word	0x200056d0

08004740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004744:	4b06      	ldr	r3, [pc, #24]	@ (8004760 <SystemInit+0x20>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474a:	4a05      	ldr	r2, [pc, #20]	@ (8004760 <SystemInit+0x20>)
 800474c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004750:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004764:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800479c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004768:	f7ff ffea 	bl	8004740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800476c:	480c      	ldr	r0, [pc, #48]	@ (80047a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800476e:	490d      	ldr	r1, [pc, #52]	@ (80047a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004770:	4a0d      	ldr	r2, [pc, #52]	@ (80047a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004774:	e002      	b.n	800477c <LoopCopyDataInit>

08004776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800477a:	3304      	adds	r3, #4

0800477c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800477c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800477e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004780:	d3f9      	bcc.n	8004776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004782:	4a0a      	ldr	r2, [pc, #40]	@ (80047ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004784:	4c0a      	ldr	r4, [pc, #40]	@ (80047b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004788:	e001      	b.n	800478e <LoopFillZerobss>

0800478a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800478a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800478c:	3204      	adds	r2, #4

0800478e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800478e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004790:	d3fb      	bcc.n	800478a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004792:	f009 fe01 	bl	800e398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004796:	f7fc fc4f 	bl	8001038 <main>
  bx  lr    
 800479a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800479c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80047a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047a4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80047a8:	08011564 	.word	0x08011564
  ldr r2, =_sbss
 80047ac:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80047b0:	200056d0 	.word	0x200056d0

080047b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047b4:	e7fe      	b.n	80047b4 <ADC_IRQHandler>
	...

080047b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047bc:	4b0e      	ldr	r3, [pc, #56]	@ (80047f8 <HAL_Init+0x40>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a0d      	ldr	r2, [pc, #52]	@ (80047f8 <HAL_Init+0x40>)
 80047c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047c8:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <HAL_Init+0x40>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a0a      	ldr	r2, [pc, #40]	@ (80047f8 <HAL_Init+0x40>)
 80047ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047d4:	4b08      	ldr	r3, [pc, #32]	@ (80047f8 <HAL_Init+0x40>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a07      	ldr	r2, [pc, #28]	@ (80047f8 <HAL_Init+0x40>)
 80047da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047e0:	2003      	movs	r0, #3
 80047e2:	f000 fcfc 	bl	80051de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047e6:	200f      	movs	r0, #15
 80047e8:	f7ff fe2e 	bl	8004448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047ec:	f7ff faee 	bl	8003dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40023c00 	.word	0x40023c00

080047fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004800:	4b06      	ldr	r3, [pc, #24]	@ (800481c <HAL_IncTick+0x20>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	4b06      	ldr	r3, [pc, #24]	@ (8004820 <HAL_IncTick+0x24>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4413      	add	r3, r2
 800480c:	4a04      	ldr	r2, [pc, #16]	@ (8004820 <HAL_IncTick+0x24>)
 800480e:	6013      	str	r3, [r2, #0]
}
 8004810:	bf00      	nop
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	2000000c 	.word	0x2000000c
 8004820:	20000798 	.word	0x20000798

08004824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  return uwTick;
 8004828:	4b03      	ldr	r3, [pc, #12]	@ (8004838 <HAL_GetTick+0x14>)
 800482a:	681b      	ldr	r3, [r3, #0]
}
 800482c:	4618      	mov	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20000798 	.word	0x20000798

0800483c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004844:	f7ff ffee 	bl	8004824 <HAL_GetTick>
 8004848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004854:	d005      	beq.n	8004862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004856:	4b0a      	ldr	r3, [pc, #40]	@ (8004880 <HAL_Delay+0x44>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004862:	bf00      	nop
 8004864:	f7ff ffde 	bl	8004824 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	429a      	cmp	r2, r3
 8004872:	d8f7      	bhi.n	8004864 <HAL_Delay+0x28>
  {
  }
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	2000000c 	.word	0x2000000c

08004884 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e033      	b.n	8004902 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff fabe 	bl	8003e24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d118      	bne.n	80048f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80048ca:	f023 0302 	bic.w	r3, r3, #2
 80048ce:	f043 0202 	orr.w	r2, r3, #2
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fad8 	bl	8004e8c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	f023 0303 	bic.w	r3, r3, #3
 80048ea:	f043 0201 	orr.w	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80048f2:	e001      	b.n	80048f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004900:	7bfb      	ldrb	r3, [r7, #15]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_ADC_Start+0x1a>
 8004922:	2302      	movs	r3, #2
 8004924:	e0b2      	b.n	8004a8c <HAL_ADC_Start+0x180>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b01      	cmp	r3, #1
 800493a:	d018      	beq.n	800496e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800494c:	4b52      	ldr	r3, [pc, #328]	@ (8004a98 <HAL_ADC_Start+0x18c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a52      	ldr	r2, [pc, #328]	@ (8004a9c <HAL_ADC_Start+0x190>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	0c9a      	lsrs	r2, r3, #18
 8004958:	4613      	mov	r3, r2
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	4413      	add	r3, r2
 800495e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004960:	e002      	b.n	8004968 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	3b01      	subs	r3, #1
 8004966:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f9      	bne.n	8004962 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b01      	cmp	r3, #1
 800497a:	d17a      	bne.n	8004a72 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004980:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80049a6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ba:	d106      	bne.n	80049ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c0:	f023 0206 	bic.w	r2, r3, #6
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	645a      	str	r2, [r3, #68]	@ 0x44
 80049c8:	e002      	b.n	80049d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049d8:	4b31      	ldr	r3, [pc, #196]	@ (8004aa0 <HAL_ADC_Start+0x194>)
 80049da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80049e4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d12a      	bne.n	8004a48 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a2b      	ldr	r2, [pc, #172]	@ (8004aa4 <HAL_ADC_Start+0x198>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d015      	beq.n	8004a28 <HAL_ADC_Start+0x11c>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a29      	ldr	r2, [pc, #164]	@ (8004aa8 <HAL_ADC_Start+0x19c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d105      	bne.n	8004a12 <HAL_ADC_Start+0x106>
 8004a06:	4b26      	ldr	r3, [pc, #152]	@ (8004aa0 <HAL_ADC_Start+0x194>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f003 031f 	and.w	r3, r3, #31
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a25      	ldr	r2, [pc, #148]	@ (8004aac <HAL_ADC_Start+0x1a0>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d136      	bne.n	8004a8a <HAL_ADC_Start+0x17e>
 8004a1c:	4b20      	ldr	r3, [pc, #128]	@ (8004aa0 <HAL_ADC_Start+0x194>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d130      	bne.n	8004a8a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d129      	bne.n	8004a8a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004a44:	609a      	str	r2, [r3, #8]
 8004a46:	e020      	b.n	8004a8a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a15      	ldr	r2, [pc, #84]	@ (8004aa4 <HAL_ADC_Start+0x198>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d11b      	bne.n	8004a8a <HAL_ADC_Start+0x17e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d114      	bne.n	8004a8a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	e00b      	b.n	8004a8a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	f043 0210 	orr.w	r2, r3, #16
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	f043 0201 	orr.w	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	20000004 	.word	0x20000004
 8004a9c:	431bde83 	.word	0x431bde83
 8004aa0:	40012300 	.word	0x40012300
 8004aa4:	40012000 	.word	0x40012000
 8004aa8:	40012100 	.word	0x40012100
 8004aac:	40012200 	.word	0x40012200

08004ab0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_ADC_Stop+0x16>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e021      	b.n	8004b0a <HAL_ADC_Stop+0x5a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0201 	bic.w	r2, r2, #1
 8004adc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	f043 0201 	orr.w	r2, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b32:	d113      	bne.n	8004b5c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b42:	d10b      	bne.n	8004b5c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b48:	f043 0220 	orr.w	r2, r3, #32
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e063      	b.n	8004c24 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b5c:	f7ff fe62 	bl	8004824 <HAL_GetTick>
 8004b60:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b62:	e021      	b.n	8004ba8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <HAL_ADC_PollForConversion+0x6c>
 8004b72:	f7ff fe57 	bl	8004824 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d212      	bcs.n	8004ba8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d00b      	beq.n	8004ba8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b94:	f043 0204 	orr.w	r2, r3, #4
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e03d      	b.n	8004c24 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d1d6      	bne.n	8004b64 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f06f 0212 	mvn.w	r2, #18
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d123      	bne.n	8004c22 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d11f      	bne.n	8004c22 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d006      	beq.n	8004bfe <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d111      	bne.n	8004c22 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d105      	bne.n	8004c22 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	f043 0201 	orr.w	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x1c>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e105      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x228>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b09      	cmp	r3, #9
 8004c72:	d925      	bls.n	8004cc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68d9      	ldr	r1, [r3, #12]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	4613      	mov	r3, r2
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	4413      	add	r3, r2
 8004c88:	3b1e      	subs	r3, #30
 8004c8a:	2207      	movs	r2, #7
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	43da      	mvns	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	400a      	ands	r2, r1
 8004c98:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68d9      	ldr	r1, [r3, #12]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	4618      	mov	r0, r3
 8004cac:	4603      	mov	r3, r0
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	4403      	add	r3, r0
 8004cb2:	3b1e      	subs	r3, #30
 8004cb4:	409a      	lsls	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	60da      	str	r2, [r3, #12]
 8004cbe:	e022      	b.n	8004d06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6919      	ldr	r1, [r3, #16]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4613      	mov	r3, r2
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	4413      	add	r3, r2
 8004cd4:	2207      	movs	r2, #7
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43da      	mvns	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6919      	ldr	r1, [r3, #16]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	4403      	add	r3, r0
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b06      	cmp	r3, #6
 8004d0c:	d824      	bhi.n	8004d58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	3b05      	subs	r3, #5
 8004d20:	221f      	movs	r2, #31
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43da      	mvns	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	400a      	ands	r2, r1
 8004d2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	3b05      	subs	r3, #5
 8004d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d56:	e04c      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b0c      	cmp	r3, #12
 8004d5e:	d824      	bhi.n	8004daa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	3b23      	subs	r3, #35	@ 0x23
 8004d72:	221f      	movs	r2, #31
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	43da      	mvns	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	400a      	ands	r2, r1
 8004d80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	4618      	mov	r0, r3
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	3b23      	subs	r3, #35	@ 0x23
 8004d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004da8:	e023      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	3b41      	subs	r3, #65	@ 0x41
 8004dbc:	221f      	movs	r2, #31
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43da      	mvns	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	400a      	ands	r2, r1
 8004dca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	4618      	mov	r0, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	3b41      	subs	r3, #65	@ 0x41
 8004de6:	fa00 f203 	lsl.w	r2, r0, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004df2:	4b22      	ldr	r3, [pc, #136]	@ (8004e7c <HAL_ADC_ConfigChannel+0x234>)
 8004df4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a21      	ldr	r2, [pc, #132]	@ (8004e80 <HAL_ADC_ConfigChannel+0x238>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d109      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x1cc>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b12      	cmp	r3, #18
 8004e06:	d105      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a19      	ldr	r2, [pc, #100]	@ (8004e80 <HAL_ADC_ConfigChannel+0x238>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d123      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x21e>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b10      	cmp	r3, #16
 8004e24:	d003      	beq.n	8004e2e <HAL_ADC_ConfigChannel+0x1e6>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b11      	cmp	r3, #17
 8004e2c:	d11b      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b10      	cmp	r3, #16
 8004e40:	d111      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e42:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <HAL_ADC_ConfigChannel+0x23c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a10      	ldr	r2, [pc, #64]	@ (8004e88 <HAL_ADC_ConfigChannel+0x240>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	0c9a      	lsrs	r2, r3, #18
 8004e4e:	4613      	mov	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004e58:	e002      	b.n	8004e60 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f9      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	40012300 	.word	0x40012300
 8004e80:	40012000 	.word	0x40012000
 8004e84:	20000004 	.word	0x20000004
 8004e88:	431bde83 	.word	0x431bde83

08004e8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e94:	4b79      	ldr	r3, [pc, #484]	@ (800507c <ADC_Init+0x1f0>)
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ec0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6859      	ldr	r1, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	021a      	lsls	r2, r3, #8
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6859      	ldr	r1, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6899      	ldr	r1, [r3, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1e:	4a58      	ldr	r2, [pc, #352]	@ (8005080 <ADC_Init+0x1f4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d022      	beq.n	8004f6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6899      	ldr	r1, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004f54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6899      	ldr	r1, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	e00f      	b.n	8004f8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004f88:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0202 	bic.w	r2, r2, #2
 8004f98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6899      	ldr	r1, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	7e1b      	ldrb	r3, [r3, #24]
 8004fa4:	005a      	lsls	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01b      	beq.n	8004ff0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fc6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004fd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6859      	ldr	r1, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	035a      	lsls	r2, r3, #13
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
 8004fee:	e007      	b.n	8005000 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ffe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800500e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	3b01      	subs	r3, #1
 800501c:	051a      	lsls	r2, r3, #20
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6899      	ldr	r1, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005042:	025a      	lsls	r2, r3, #9
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800505a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6899      	ldr	r1, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	029a      	lsls	r2, r3, #10
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	609a      	str	r2, [r3, #8]
}
 8005070:	bf00      	nop
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40012300 	.word	0x40012300
 8005080:	0f000001 	.word	0x0f000001

08005084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005094:	4b0c      	ldr	r3, [pc, #48]	@ (80050c8 <__NVIC_SetPriorityGrouping+0x44>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800509a:	68ba      	ldr	r2, [r7, #8]
 800509c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050a0:	4013      	ands	r3, r2
 80050a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050b6:	4a04      	ldr	r2, [pc, #16]	@ (80050c8 <__NVIC_SetPriorityGrouping+0x44>)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	60d3      	str	r3, [r2, #12]
}
 80050bc:	bf00      	nop
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	e000ed00 	.word	0xe000ed00

080050cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050d0:	4b04      	ldr	r3, [pc, #16]	@ (80050e4 <__NVIC_GetPriorityGrouping+0x18>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	0a1b      	lsrs	r3, r3, #8
 80050d6:	f003 0307 	and.w	r3, r3, #7
}
 80050da:	4618      	mov	r0, r3
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	e000ed00 	.word	0xe000ed00

080050e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	db0b      	blt.n	8005112 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	f003 021f 	and.w	r2, r3, #31
 8005100:	4907      	ldr	r1, [pc, #28]	@ (8005120 <__NVIC_EnableIRQ+0x38>)
 8005102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	2001      	movs	r0, #1
 800510a:	fa00 f202 	lsl.w	r2, r0, r2
 800510e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	e000e100 	.word	0xe000e100

08005124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	6039      	str	r1, [r7, #0]
 800512e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005134:	2b00      	cmp	r3, #0
 8005136:	db0a      	blt.n	800514e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	b2da      	uxtb	r2, r3
 800513c:	490c      	ldr	r1, [pc, #48]	@ (8005170 <__NVIC_SetPriority+0x4c>)
 800513e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005142:	0112      	lsls	r2, r2, #4
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	440b      	add	r3, r1
 8005148:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800514c:	e00a      	b.n	8005164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	b2da      	uxtb	r2, r3
 8005152:	4908      	ldr	r1, [pc, #32]	@ (8005174 <__NVIC_SetPriority+0x50>)
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	3b04      	subs	r3, #4
 800515c:	0112      	lsls	r2, r2, #4
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	440b      	add	r3, r1
 8005162:	761a      	strb	r2, [r3, #24]
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	e000e100 	.word	0xe000e100
 8005174:	e000ed00 	.word	0xe000ed00

08005178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005178:	b480      	push	{r7}
 800517a:	b089      	sub	sp, #36	@ 0x24
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f1c3 0307 	rsb	r3, r3, #7
 8005192:	2b04      	cmp	r3, #4
 8005194:	bf28      	it	cs
 8005196:	2304      	movcs	r3, #4
 8005198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	3304      	adds	r3, #4
 800519e:	2b06      	cmp	r3, #6
 80051a0:	d902      	bls.n	80051a8 <NVIC_EncodePriority+0x30>
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	3b03      	subs	r3, #3
 80051a6:	e000      	b.n	80051aa <NVIC_EncodePriority+0x32>
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051ac:	f04f 32ff 	mov.w	r2, #4294967295
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	43da      	mvns	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	401a      	ands	r2, r3
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051c0:	f04f 31ff 	mov.w	r1, #4294967295
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ca:	43d9      	mvns	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051d0:	4313      	orrs	r3, r2
         );
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3724      	adds	r7, #36	@ 0x24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff ff4c 	bl	8005084 <__NVIC_SetPriorityGrouping>
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005206:	f7ff ff61 	bl	80050cc <__NVIC_GetPriorityGrouping>
 800520a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	6978      	ldr	r0, [r7, #20]
 8005212:	f7ff ffb1 	bl	8005178 <NVIC_EncodePriority>
 8005216:	4602      	mov	r2, r0
 8005218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800521c:	4611      	mov	r1, r2
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff ff80 	bl	8005124 <__NVIC_SetPriority>
}
 8005224:	bf00      	nop
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff ff54 	bl	80050e8 <__NVIC_EnableIRQ>
}
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005254:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005256:	f7ff fae5 	bl	8004824 <HAL_GetTick>
 800525a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d008      	beq.n	800527a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2280      	movs	r2, #128	@ 0x80
 800526c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e052      	b.n	8005320 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0216 	bic.w	r2, r2, #22
 8005288:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695a      	ldr	r2, [r3, #20]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005298:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d103      	bne.n	80052aa <HAL_DMA_Abort+0x62>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d007      	beq.n	80052ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0208 	bic.w	r2, r2, #8
 80052b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0201 	bic.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052ca:	e013      	b.n	80052f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052cc:	f7ff faaa 	bl	8004824 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	d90c      	bls.n	80052f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2203      	movs	r2, #3
 80052e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e015      	b.n	8005320 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e4      	bne.n	80052cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005306:	223f      	movs	r2, #63	@ 0x3f
 8005308:	409a      	lsls	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d004      	beq.n	8005346 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2280      	movs	r2, #128	@ 0x80
 8005340:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e00c      	b.n	8005360 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2205      	movs	r2, #5
 800534a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0201 	bic.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800536c:	b480      	push	{r7}
 800536e:	b089      	sub	sp, #36	@ 0x24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800537a:	2300      	movs	r3, #0
 800537c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800537e:	2300      	movs	r3, #0
 8005380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	e16b      	b.n	8005660 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005388:	2201      	movs	r2, #1
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4013      	ands	r3, r2
 800539a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	f040 815a 	bne.w	800565a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d005      	beq.n	80053be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d130      	bne.n	8005420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	2203      	movs	r2, #3
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43db      	mvns	r3, r3
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4013      	ands	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053f4:	2201      	movs	r2, #1
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	43db      	mvns	r3, r3
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	4013      	ands	r3, r2
 8005402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	091b      	lsrs	r3, r3, #4
 800540a:	f003 0201 	and.w	r2, r3, #1
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	4313      	orrs	r3, r2
 8005418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	2b03      	cmp	r3, #3
 800542a:	d017      	beq.n	800545c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	2203      	movs	r2, #3
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	43db      	mvns	r3, r3
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	4013      	ands	r3, r2
 8005442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4313      	orrs	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d123      	bne.n	80054b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	08da      	lsrs	r2, r3, #3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3208      	adds	r2, #8
 8005470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	220f      	movs	r2, #15
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	43db      	mvns	r3, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4013      	ands	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4313      	orrs	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	08da      	lsrs	r2, r3, #3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3208      	adds	r2, #8
 80054aa:	69b9      	ldr	r1, [r7, #24]
 80054ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	2203      	movs	r2, #3
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	43db      	mvns	r3, r3
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4013      	ands	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f003 0203 	and.w	r2, r3, #3
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4313      	orrs	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80b4 	beq.w	800565a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	4b60      	ldr	r3, [pc, #384]	@ (8005678 <HAL_GPIO_Init+0x30c>)
 80054f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fa:	4a5f      	ldr	r2, [pc, #380]	@ (8005678 <HAL_GPIO_Init+0x30c>)
 80054fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005500:	6453      	str	r3, [r2, #68]	@ 0x44
 8005502:	4b5d      	ldr	r3, [pc, #372]	@ (8005678 <HAL_GPIO_Init+0x30c>)
 8005504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800550e:	4a5b      	ldr	r2, [pc, #364]	@ (800567c <HAL_GPIO_Init+0x310>)
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	089b      	lsrs	r3, r3, #2
 8005514:	3302      	adds	r3, #2
 8005516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800551a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	220f      	movs	r2, #15
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43db      	mvns	r3, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	4013      	ands	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a52      	ldr	r2, [pc, #328]	@ (8005680 <HAL_GPIO_Init+0x314>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d02b      	beq.n	8005592 <HAL_GPIO_Init+0x226>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a51      	ldr	r2, [pc, #324]	@ (8005684 <HAL_GPIO_Init+0x318>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d025      	beq.n	800558e <HAL_GPIO_Init+0x222>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a50      	ldr	r2, [pc, #320]	@ (8005688 <HAL_GPIO_Init+0x31c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01f      	beq.n	800558a <HAL_GPIO_Init+0x21e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a4f      	ldr	r2, [pc, #316]	@ (800568c <HAL_GPIO_Init+0x320>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d019      	beq.n	8005586 <HAL_GPIO_Init+0x21a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a4e      	ldr	r2, [pc, #312]	@ (8005690 <HAL_GPIO_Init+0x324>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d013      	beq.n	8005582 <HAL_GPIO_Init+0x216>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a4d      	ldr	r2, [pc, #308]	@ (8005694 <HAL_GPIO_Init+0x328>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00d      	beq.n	800557e <HAL_GPIO_Init+0x212>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a4c      	ldr	r2, [pc, #304]	@ (8005698 <HAL_GPIO_Init+0x32c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d007      	beq.n	800557a <HAL_GPIO_Init+0x20e>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a4b      	ldr	r2, [pc, #300]	@ (800569c <HAL_GPIO_Init+0x330>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d101      	bne.n	8005576 <HAL_GPIO_Init+0x20a>
 8005572:	2307      	movs	r3, #7
 8005574:	e00e      	b.n	8005594 <HAL_GPIO_Init+0x228>
 8005576:	2308      	movs	r3, #8
 8005578:	e00c      	b.n	8005594 <HAL_GPIO_Init+0x228>
 800557a:	2306      	movs	r3, #6
 800557c:	e00a      	b.n	8005594 <HAL_GPIO_Init+0x228>
 800557e:	2305      	movs	r3, #5
 8005580:	e008      	b.n	8005594 <HAL_GPIO_Init+0x228>
 8005582:	2304      	movs	r3, #4
 8005584:	e006      	b.n	8005594 <HAL_GPIO_Init+0x228>
 8005586:	2303      	movs	r3, #3
 8005588:	e004      	b.n	8005594 <HAL_GPIO_Init+0x228>
 800558a:	2302      	movs	r3, #2
 800558c:	e002      	b.n	8005594 <HAL_GPIO_Init+0x228>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <HAL_GPIO_Init+0x228>
 8005592:	2300      	movs	r3, #0
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	f002 0203 	and.w	r2, r2, #3
 800559a:	0092      	lsls	r2, r2, #2
 800559c:	4093      	lsls	r3, r2
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055a4:	4935      	ldr	r1, [pc, #212]	@ (800567c <HAL_GPIO_Init+0x310>)
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	089b      	lsrs	r3, r3, #2
 80055aa:	3302      	adds	r3, #2
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055b2:	4b3b      	ldr	r3, [pc, #236]	@ (80056a0 <HAL_GPIO_Init+0x334>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	43db      	mvns	r3, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4013      	ands	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055d6:	4a32      	ldr	r2, [pc, #200]	@ (80056a0 <HAL_GPIO_Init+0x334>)
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055dc:	4b30      	ldr	r3, [pc, #192]	@ (80056a0 <HAL_GPIO_Init+0x334>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4013      	ands	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005600:	4a27      	ldr	r2, [pc, #156]	@ (80056a0 <HAL_GPIO_Init+0x334>)
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005606:	4b26      	ldr	r3, [pc, #152]	@ (80056a0 <HAL_GPIO_Init+0x334>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	43db      	mvns	r3, r3
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	4013      	ands	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800562a:	4a1d      	ldr	r2, [pc, #116]	@ (80056a0 <HAL_GPIO_Init+0x334>)
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005630:	4b1b      	ldr	r3, [pc, #108]	@ (80056a0 <HAL_GPIO_Init+0x334>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	43db      	mvns	r3, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4013      	ands	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005654:	4a12      	ldr	r2, [pc, #72]	@ (80056a0 <HAL_GPIO_Init+0x334>)
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	3301      	adds	r3, #1
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2b0f      	cmp	r3, #15
 8005664:	f67f ae90 	bls.w	8005388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	3724      	adds	r7, #36	@ 0x24
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40023800 	.word	0x40023800
 800567c:	40013800 	.word	0x40013800
 8005680:	40020000 	.word	0x40020000
 8005684:	40020400 	.word	0x40020400
 8005688:	40020800 	.word	0x40020800
 800568c:	40020c00 	.word	0x40020c00
 8005690:	40021000 	.word	0x40021000
 8005694:	40021400 	.word	0x40021400
 8005698:	40021800 	.word	0x40021800
 800569c:	40021c00 	.word	0x40021c00
 80056a0:	40013c00 	.word	0x40013c00

080056a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	e0cd      	b.n	800585c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056c0:	2201      	movs	r2, #1
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	4013      	ands	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	f040 80bd 	bne.w	8005856 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80056dc:	4a65      	ldr	r2, [pc, #404]	@ (8005874 <HAL_GPIO_DeInit+0x1d0>)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	089b      	lsrs	r3, r3, #2
 80056e2:	3302      	adds	r3, #2
 80056e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f003 0303 	and.w	r3, r3, #3
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	220f      	movs	r2, #15
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	4013      	ands	r3, r2
 80056fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a5d      	ldr	r2, [pc, #372]	@ (8005878 <HAL_GPIO_DeInit+0x1d4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d02b      	beq.n	800575e <HAL_GPIO_DeInit+0xba>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a5c      	ldr	r2, [pc, #368]	@ (800587c <HAL_GPIO_DeInit+0x1d8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d025      	beq.n	800575a <HAL_GPIO_DeInit+0xb6>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a5b      	ldr	r2, [pc, #364]	@ (8005880 <HAL_GPIO_DeInit+0x1dc>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d01f      	beq.n	8005756 <HAL_GPIO_DeInit+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a5a      	ldr	r2, [pc, #360]	@ (8005884 <HAL_GPIO_DeInit+0x1e0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d019      	beq.n	8005752 <HAL_GPIO_DeInit+0xae>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a59      	ldr	r2, [pc, #356]	@ (8005888 <HAL_GPIO_DeInit+0x1e4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d013      	beq.n	800574e <HAL_GPIO_DeInit+0xaa>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a58      	ldr	r2, [pc, #352]	@ (800588c <HAL_GPIO_DeInit+0x1e8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00d      	beq.n	800574a <HAL_GPIO_DeInit+0xa6>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a57      	ldr	r2, [pc, #348]	@ (8005890 <HAL_GPIO_DeInit+0x1ec>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d007      	beq.n	8005746 <HAL_GPIO_DeInit+0xa2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a56      	ldr	r2, [pc, #344]	@ (8005894 <HAL_GPIO_DeInit+0x1f0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d101      	bne.n	8005742 <HAL_GPIO_DeInit+0x9e>
 800573e:	2307      	movs	r3, #7
 8005740:	e00e      	b.n	8005760 <HAL_GPIO_DeInit+0xbc>
 8005742:	2308      	movs	r3, #8
 8005744:	e00c      	b.n	8005760 <HAL_GPIO_DeInit+0xbc>
 8005746:	2306      	movs	r3, #6
 8005748:	e00a      	b.n	8005760 <HAL_GPIO_DeInit+0xbc>
 800574a:	2305      	movs	r3, #5
 800574c:	e008      	b.n	8005760 <HAL_GPIO_DeInit+0xbc>
 800574e:	2304      	movs	r3, #4
 8005750:	e006      	b.n	8005760 <HAL_GPIO_DeInit+0xbc>
 8005752:	2303      	movs	r3, #3
 8005754:	e004      	b.n	8005760 <HAL_GPIO_DeInit+0xbc>
 8005756:	2302      	movs	r3, #2
 8005758:	e002      	b.n	8005760 <HAL_GPIO_DeInit+0xbc>
 800575a:	2301      	movs	r3, #1
 800575c:	e000      	b.n	8005760 <HAL_GPIO_DeInit+0xbc>
 800575e:	2300      	movs	r3, #0
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	f002 0203 	and.w	r2, r2, #3
 8005766:	0092      	lsls	r2, r2, #2
 8005768:	4093      	lsls	r3, r2
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	429a      	cmp	r2, r3
 800576e:	d132      	bne.n	80057d6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005770:	4b49      	ldr	r3, [pc, #292]	@ (8005898 <HAL_GPIO_DeInit+0x1f4>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	43db      	mvns	r3, r3
 8005778:	4947      	ldr	r1, [pc, #284]	@ (8005898 <HAL_GPIO_DeInit+0x1f4>)
 800577a:	4013      	ands	r3, r2
 800577c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800577e:	4b46      	ldr	r3, [pc, #280]	@ (8005898 <HAL_GPIO_DeInit+0x1f4>)
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	43db      	mvns	r3, r3
 8005786:	4944      	ldr	r1, [pc, #272]	@ (8005898 <HAL_GPIO_DeInit+0x1f4>)
 8005788:	4013      	ands	r3, r2
 800578a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800578c:	4b42      	ldr	r3, [pc, #264]	@ (8005898 <HAL_GPIO_DeInit+0x1f4>)
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	43db      	mvns	r3, r3
 8005794:	4940      	ldr	r1, [pc, #256]	@ (8005898 <HAL_GPIO_DeInit+0x1f4>)
 8005796:	4013      	ands	r3, r2
 8005798:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800579a:	4b3f      	ldr	r3, [pc, #252]	@ (8005898 <HAL_GPIO_DeInit+0x1f4>)
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	43db      	mvns	r3, r3
 80057a2:	493d      	ldr	r1, [pc, #244]	@ (8005898 <HAL_GPIO_DeInit+0x1f4>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	220f      	movs	r2, #15
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80057b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005874 <HAL_GPIO_DeInit+0x1d0>)
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	089b      	lsrs	r3, r3, #2
 80057be:	3302      	adds	r3, #2
 80057c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	43da      	mvns	r2, r3
 80057c8:	482a      	ldr	r0, [pc, #168]	@ (8005874 <HAL_GPIO_DeInit+0x1d0>)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	089b      	lsrs	r3, r3, #2
 80057ce:	400a      	ands	r2, r1
 80057d0:	3302      	adds	r3, #2
 80057d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	2103      	movs	r1, #3
 80057e0:	fa01 f303 	lsl.w	r3, r1, r3
 80057e4:	43db      	mvns	r3, r3
 80057e6:	401a      	ands	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	08da      	lsrs	r2, r3, #3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3208      	adds	r2, #8
 80057f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	220f      	movs	r2, #15
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43db      	mvns	r3, r3
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	08d2      	lsrs	r2, r2, #3
 800580c:	4019      	ands	r1, r3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3208      	adds	r2, #8
 8005812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	2103      	movs	r1, #3
 8005820:	fa01 f303 	lsl.w	r3, r1, r3
 8005824:	43db      	mvns	r3, r3
 8005826:	401a      	ands	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	2101      	movs	r1, #1
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	fa01 f303 	lsl.w	r3, r1, r3
 8005838:	43db      	mvns	r3, r3
 800583a:	401a      	ands	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	2103      	movs	r1, #3
 800584a:	fa01 f303 	lsl.w	r3, r1, r3
 800584e:	43db      	mvns	r3, r3
 8005850:	401a      	ands	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	3301      	adds	r3, #1
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2b0f      	cmp	r3, #15
 8005860:	f67f af2e 	bls.w	80056c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40013800 	.word	0x40013800
 8005878:	40020000 	.word	0x40020000
 800587c:	40020400 	.word	0x40020400
 8005880:	40020800 	.word	0x40020800
 8005884:	40020c00 	.word	0x40020c00
 8005888:	40021000 	.word	0x40021000
 800588c:	40021400 	.word	0x40021400
 8005890:	40021800 	.word	0x40021800
 8005894:	40021c00 	.word	0x40021c00
 8005898:	40013c00 	.word	0x40013c00

0800589c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	887b      	ldrh	r3, [r7, #2]
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058b4:	2301      	movs	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
 80058b8:	e001      	b.n	80058be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058ba:	2300      	movs	r3, #0
 80058bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058be:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	807b      	strh	r3, [r7, #2]
 80058d8:	4613      	mov	r3, r2
 80058da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058dc:	787b      	ldrb	r3, [r7, #1]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058e2:	887a      	ldrh	r2, [r7, #2]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058e8:	e003      	b.n	80058f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058ea:	887b      	ldrh	r3, [r7, #2]
 80058ec:	041a      	lsls	r2, r3, #16
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	619a      	str	r2, [r3, #24]
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058fe:	b480      	push	{r7}
 8005900:	b085      	sub	sp, #20
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	460b      	mov	r3, r1
 8005908:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005910:	887a      	ldrh	r2, [r7, #2]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4013      	ands	r3, r2
 8005916:	041a      	lsls	r2, r3, #16
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	43d9      	mvns	r1, r3
 800591c:	887b      	ldrh	r3, [r7, #2]
 800591e:	400b      	ands	r3, r1
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	619a      	str	r2, [r3, #24]
}
 8005926:	bf00      	nop
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
	...

08005934 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e12b      	b.n	8005b9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fe fad6 	bl	8003f0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2224      	movs	r2, #36	@ 0x24
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0201 	bic.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005986:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005996:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005998:	f002 f8f8 	bl	8007b8c <HAL_RCC_GetPCLK1Freq>
 800599c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	4a81      	ldr	r2, [pc, #516]	@ (8005ba8 <HAL_I2C_Init+0x274>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d807      	bhi.n	80059b8 <HAL_I2C_Init+0x84>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4a80      	ldr	r2, [pc, #512]	@ (8005bac <HAL_I2C_Init+0x278>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	bf94      	ite	ls
 80059b0:	2301      	movls	r3, #1
 80059b2:	2300      	movhi	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	e006      	b.n	80059c6 <HAL_I2C_Init+0x92>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4a7d      	ldr	r2, [pc, #500]	@ (8005bb0 <HAL_I2C_Init+0x27c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	bf94      	ite	ls
 80059c0:	2301      	movls	r3, #1
 80059c2:	2300      	movhi	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e0e7      	b.n	8005b9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a78      	ldr	r2, [pc, #480]	@ (8005bb4 <HAL_I2C_Init+0x280>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	0c9b      	lsrs	r3, r3, #18
 80059d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	4a6a      	ldr	r2, [pc, #424]	@ (8005ba8 <HAL_I2C_Init+0x274>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d802      	bhi.n	8005a08 <HAL_I2C_Init+0xd4>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	3301      	adds	r3, #1
 8005a06:	e009      	b.n	8005a1c <HAL_I2C_Init+0xe8>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	4a69      	ldr	r2, [pc, #420]	@ (8005bb8 <HAL_I2C_Init+0x284>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	099b      	lsrs	r3, r3, #6
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	430b      	orrs	r3, r1
 8005a22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	495c      	ldr	r1, [pc, #368]	@ (8005ba8 <HAL_I2C_Init+0x274>)
 8005a38:	428b      	cmp	r3, r1
 8005a3a:	d819      	bhi.n	8005a70 <HAL_I2C_Init+0x13c>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1e59      	subs	r1, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a4a:	1c59      	adds	r1, r3, #1
 8005a4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005a50:	400b      	ands	r3, r1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_I2C_Init+0x138>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1e59      	subs	r1, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a64:	3301      	adds	r3, #1
 8005a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a6a:	e051      	b.n	8005b10 <HAL_I2C_Init+0x1dc>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	e04f      	b.n	8005b10 <HAL_I2C_Init+0x1dc>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d111      	bne.n	8005a9c <HAL_I2C_Init+0x168>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	1e58      	subs	r0, r3, #1
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6859      	ldr	r1, [r3, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	440b      	add	r3, r1
 8005a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bf0c      	ite	eq
 8005a94:	2301      	moveq	r3, #1
 8005a96:	2300      	movne	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	e012      	b.n	8005ac2 <HAL_I2C_Init+0x18e>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	1e58      	subs	r0, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6859      	ldr	r1, [r3, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	0099      	lsls	r1, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bf0c      	ite	eq
 8005abc:	2301      	moveq	r3, #1
 8005abe:	2300      	movne	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_I2C_Init+0x196>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e022      	b.n	8005b10 <HAL_I2C_Init+0x1dc>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10e      	bne.n	8005af0 <HAL_I2C_Init+0x1bc>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1e58      	subs	r0, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6859      	ldr	r1, [r3, #4]
 8005ada:	460b      	mov	r3, r1
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	440b      	add	r3, r1
 8005ae0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aee:	e00f      	b.n	8005b10 <HAL_I2C_Init+0x1dc>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	1e58      	subs	r0, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6859      	ldr	r1, [r3, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	0099      	lsls	r1, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b06:	3301      	adds	r3, #1
 8005b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	6809      	ldr	r1, [r1, #0]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69da      	ldr	r2, [r3, #28]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6911      	ldr	r1, [r2, #16]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68d2      	ldr	r2, [r2, #12]
 8005b4a:	4311      	orrs	r1, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6812      	ldr	r2, [r2, #0]
 8005b50:	430b      	orrs	r3, r1
 8005b52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695a      	ldr	r2, [r3, #20]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	000186a0 	.word	0x000186a0
 8005bac:	001e847f 	.word	0x001e847f
 8005bb0:	003d08ff 	.word	0x003d08ff
 8005bb4:	431bde83 	.word	0x431bde83
 8005bb8:	10624dd3 	.word	0x10624dd3

08005bbc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e021      	b.n	8005c12 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2224      	movs	r2, #36	@ 0x24
 8005bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0201 	bic.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fe f9d8 	bl	8003f9c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	607a      	str	r2, [r7, #4]
 8005c26:	461a      	mov	r2, r3
 8005c28:	460b      	mov	r3, r1
 8005c2a:	817b      	strh	r3, [r7, #10]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c30:	f7fe fdf8 	bl	8004824 <HAL_GetTick>
 8005c34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	f040 80e0 	bne.w	8005e04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	2319      	movs	r3, #25
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	4970      	ldr	r1, [pc, #448]	@ (8005e10 <HAL_I2C_Master_Transmit+0x1f4>)
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f001 f90e 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	e0d3      	b.n	8005e06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_I2C_Master_Transmit+0x50>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e0cc      	b.n	8005e06 <HAL_I2C_Master_Transmit+0x1ea>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d007      	beq.n	8005c92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0201 	orr.w	r2, r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ca0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2221      	movs	r2, #33	@ 0x21
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2210      	movs	r2, #16
 8005cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	893a      	ldrh	r2, [r7, #8]
 8005cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a50      	ldr	r2, [pc, #320]	@ (8005e14 <HAL_I2C_Master_Transmit+0x1f8>)
 8005cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005cd4:	8979      	ldrh	r1, [r7, #10]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	6a3a      	ldr	r2, [r7, #32]
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 fdfa 	bl	80068d4 <I2C_MasterRequestWrite>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e08d      	b.n	8005e06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cea:	2300      	movs	r3, #0
 8005cec:	613b      	str	r3, [r7, #16]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005d00:	e066      	b.n	8005dd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	6a39      	ldr	r1, [r7, #32]
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f001 f9cc 	bl	80070a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00d      	beq.n	8005d2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d107      	bne.n	8005d2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e06b      	b.n	8005e06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d32:	781a      	ldrb	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d11b      	bne.n	8005da4 <HAL_I2C_Master_Transmit+0x188>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d017      	beq.n	8005da4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d78:	781a      	ldrb	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	6a39      	ldr	r1, [r7, #32]
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f001 f9c3 	bl	8007134 <I2C_WaitOnBTFFlagUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00d      	beq.n	8005dd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d107      	bne.n	8005dcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e01a      	b.n	8005e06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d194      	bne.n	8005d02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e000      	b.n	8005e06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
  }
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	00100002 	.word	0x00100002
 8005e14:	ffff0000 	.word	0xffff0000

08005e18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08c      	sub	sp, #48	@ 0x30
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	607a      	str	r2, [r7, #4]
 8005e22:	461a      	mov	r2, r3
 8005e24:	460b      	mov	r3, r1
 8005e26:	817b      	strh	r3, [r7, #10]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e2c:	f7fe fcfa 	bl	8004824 <HAL_GetTick>
 8005e30:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	f040 8217 	bne.w	800626e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	2319      	movs	r3, #25
 8005e46:	2201      	movs	r2, #1
 8005e48:	497c      	ldr	r1, [pc, #496]	@ (800603c <HAL_I2C_Master_Receive+0x224>)
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f001 f810 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005e56:	2302      	movs	r3, #2
 8005e58:	e20a      	b.n	8006270 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_I2C_Master_Receive+0x50>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e203      	b.n	8006270 <HAL_I2C_Master_Receive+0x458>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d007      	beq.n	8005e8e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0201 	orr.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2222      	movs	r2, #34	@ 0x22
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2210      	movs	r2, #16
 8005eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	893a      	ldrh	r2, [r7, #8]
 8005ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4a5c      	ldr	r2, [pc, #368]	@ (8006040 <HAL_I2C_Master_Receive+0x228>)
 8005ece:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ed0:	8979      	ldrh	r1, [r7, #10]
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fd7e 	bl	80069d8 <I2C_MasterRequestRead>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e1c4      	b.n	8006270 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d113      	bne.n	8005f16 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	623b      	str	r3, [r7, #32]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	623b      	str	r3, [r7, #32]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	623b      	str	r3, [r7, #32]
 8005f02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	e198      	b.n	8006248 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d11b      	bne.n	8005f56 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61fb      	str	r3, [r7, #28]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	61fb      	str	r3, [r7, #28]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	e178      	b.n	8006248 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d11b      	bne.n	8005f96 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	e158      	b.n	8006248 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005fa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005fbc:	e144      	b.n	8006248 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	f200 80f1 	bhi.w	80061aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d123      	bne.n	8006018 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f001 f8f5 	bl	80071c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e145      	b.n	8006270 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800600c:	b29b      	uxth	r3, r3
 800600e:	3b01      	subs	r3, #1
 8006010:	b29a      	uxth	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006016:	e117      	b.n	8006248 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800601c:	2b02      	cmp	r3, #2
 800601e:	d14e      	bne.n	80060be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006026:	2200      	movs	r2, #0
 8006028:	4906      	ldr	r1, [pc, #24]	@ (8006044 <HAL_I2C_Master_Receive+0x22c>)
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 ff20 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d008      	beq.n	8006048 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e11a      	b.n	8006270 <HAL_I2C_Master_Receive+0x458>
 800603a:	bf00      	nop
 800603c:	00100002 	.word	0x00100002
 8006040:	ffff0000 	.word	0xffff0000
 8006044:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	3b01      	subs	r3, #1
 80060b6:	b29a      	uxth	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060bc:	e0c4      	b.n	8006248 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c4:	2200      	movs	r2, #0
 80060c6:	496c      	ldr	r1, [pc, #432]	@ (8006278 <HAL_I2C_Master_Receive+0x460>)
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 fed1 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e0cb      	b.n	8006270 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	3b01      	subs	r3, #1
 8006114:	b29a      	uxth	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006120:	2200      	movs	r2, #0
 8006122:	4955      	ldr	r1, [pc, #340]	@ (8006278 <HAL_I2C_Master_Receive+0x460>)
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fea3 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e09d      	b.n	8006270 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006142:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691a      	ldr	r2, [r3, #16]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80061a8:	e04e      	b.n	8006248 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f001 f808 	bl	80071c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e058      	b.n	8006270 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d124      	bne.n	8006248 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006202:	2b03      	cmp	r3, #3
 8006204:	d107      	bne.n	8006216 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006214:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006232:	3b01      	subs	r3, #1
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800623e:	b29b      	uxth	r3, r3
 8006240:	3b01      	subs	r3, #1
 8006242:	b29a      	uxth	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800624c:	2b00      	cmp	r3, #0
 800624e:	f47f aeb6 	bne.w	8005fbe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2220      	movs	r2, #32
 8006256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	e000      	b.n	8006270 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800626e:	2302      	movs	r3, #2
  }
}
 8006270:	4618      	mov	r0, r3
 8006272:	3728      	adds	r7, #40	@ 0x28
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	00010004 	.word	0x00010004

0800627c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	4608      	mov	r0, r1
 8006286:	4611      	mov	r1, r2
 8006288:	461a      	mov	r2, r3
 800628a:	4603      	mov	r3, r0
 800628c:	817b      	strh	r3, [r7, #10]
 800628e:	460b      	mov	r3, r1
 8006290:	813b      	strh	r3, [r7, #8]
 8006292:	4613      	mov	r3, r2
 8006294:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006296:	f7fe fac5 	bl	8004824 <HAL_GetTick>
 800629a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	f040 80d9 	bne.w	800645c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	2319      	movs	r3, #25
 80062b0:	2201      	movs	r2, #1
 80062b2:	496d      	ldr	r1, [pc, #436]	@ (8006468 <HAL_I2C_Mem_Write+0x1ec>)
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 fddb 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80062c0:	2302      	movs	r3, #2
 80062c2:	e0cc      	b.n	800645e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_I2C_Mem_Write+0x56>
 80062ce:	2302      	movs	r3, #2
 80062d0:	e0c5      	b.n	800645e <HAL_I2C_Mem_Write+0x1e2>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d007      	beq.n	80062f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0201 	orr.w	r2, r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006306:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2221      	movs	r2, #33	@ 0x21
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2240      	movs	r2, #64	@ 0x40
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a3a      	ldr	r2, [r7, #32]
 8006322:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006328:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4a4d      	ldr	r2, [pc, #308]	@ (800646c <HAL_I2C_Mem_Write+0x1f0>)
 8006338:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800633a:	88f8      	ldrh	r0, [r7, #6]
 800633c:	893a      	ldrh	r2, [r7, #8]
 800633e:	8979      	ldrh	r1, [r7, #10]
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	4603      	mov	r3, r0
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 fc12 	bl	8006b74 <I2C_RequestMemoryWrite>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d052      	beq.n	80063fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e081      	b.n	800645e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 fea0 	bl	80070a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00d      	beq.n	8006386 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636e:	2b04      	cmp	r3, #4
 8006370:	d107      	bne.n	8006382 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006380:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e06b      	b.n	800645e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638a:	781a      	ldrb	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d11b      	bne.n	80063fc <HAL_I2C_Mem_Write+0x180>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d017      	beq.n	80063fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d0:	781a      	ldrb	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1aa      	bne.n	800635a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 fe93 	bl	8007134 <I2C_WaitOnBTFFlagUntilTimeout>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00d      	beq.n	8006430 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006418:	2b04      	cmp	r3, #4
 800641a:	d107      	bne.n	800642c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800642a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e016      	b.n	800645e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800643e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	e000      	b.n	800645e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800645c:	2302      	movs	r3, #2
  }
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	00100002 	.word	0x00100002
 800646c:	ffff0000 	.word	0xffff0000

08006470 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08c      	sub	sp, #48	@ 0x30
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	4608      	mov	r0, r1
 800647a:	4611      	mov	r1, r2
 800647c:	461a      	mov	r2, r3
 800647e:	4603      	mov	r3, r0
 8006480:	817b      	strh	r3, [r7, #10]
 8006482:	460b      	mov	r3, r1
 8006484:	813b      	strh	r3, [r7, #8]
 8006486:	4613      	mov	r3, r2
 8006488:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800648a:	f7fe f9cb 	bl	8004824 <HAL_GetTick>
 800648e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b20      	cmp	r3, #32
 800649a:	f040 8214 	bne.w	80068c6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	2319      	movs	r3, #25
 80064a4:	2201      	movs	r2, #1
 80064a6:	497b      	ldr	r1, [pc, #492]	@ (8006694 <HAL_I2C_Mem_Read+0x224>)
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 fce1 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
 80064b6:	e207      	b.n	80068c8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <HAL_I2C_Mem_Read+0x56>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e200      	b.n	80068c8 <HAL_I2C_Mem_Read+0x458>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d007      	beq.n	80064ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0201 	orr.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2222      	movs	r2, #34	@ 0x22
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2240      	movs	r2, #64	@ 0x40
 8006508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006516:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800651c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4a5b      	ldr	r2, [pc, #364]	@ (8006698 <HAL_I2C_Mem_Read+0x228>)
 800652c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800652e:	88f8      	ldrh	r0, [r7, #6]
 8006530:	893a      	ldrh	r2, [r7, #8]
 8006532:	8979      	ldrh	r1, [r7, #10]
 8006534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	4603      	mov	r3, r0
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fbae 	bl	8006ca0 <I2C_RequestMemoryRead>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e1bc      	b.n	80068c8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006552:	2b00      	cmp	r3, #0
 8006554:	d113      	bne.n	800657e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006556:	2300      	movs	r3, #0
 8006558:	623b      	str	r3, [r7, #32]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	623b      	str	r3, [r7, #32]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	623b      	str	r3, [r7, #32]
 800656a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	e190      	b.n	80068a0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006582:	2b01      	cmp	r3, #1
 8006584:	d11b      	bne.n	80065be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006594:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006596:	2300      	movs	r3, #0
 8006598:	61fb      	str	r3, [r7, #28]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	61fb      	str	r3, [r7, #28]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	e170      	b.n	80068a0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d11b      	bne.n	80065fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e6:	2300      	movs	r3, #0
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	61bb      	str	r3, [r7, #24]
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	e150      	b.n	80068a0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006614:	e144      	b.n	80068a0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800661a:	2b03      	cmp	r3, #3
 800661c:	f200 80f1 	bhi.w	8006802 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006624:	2b01      	cmp	r3, #1
 8006626:	d123      	bne.n	8006670 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800662a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 fdc9 	bl	80071c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e145      	b.n	80068c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691a      	ldr	r2, [r3, #16]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006664:	b29b      	uxth	r3, r3
 8006666:	3b01      	subs	r3, #1
 8006668:	b29a      	uxth	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800666e:	e117      	b.n	80068a0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006674:	2b02      	cmp	r3, #2
 8006676:	d14e      	bne.n	8006716 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667e:	2200      	movs	r2, #0
 8006680:	4906      	ldr	r1, [pc, #24]	@ (800669c <HAL_I2C_Mem_Read+0x22c>)
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 fbf4 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d008      	beq.n	80066a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e11a      	b.n	80068c8 <HAL_I2C_Mem_Read+0x458>
 8006692:	bf00      	nop
 8006694:	00100002 	.word	0x00100002
 8006698:	ffff0000 	.word	0xffff0000
 800669c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691a      	ldr	r2, [r3, #16]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066fe:	3b01      	subs	r3, #1
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800670a:	b29b      	uxth	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006714:	e0c4      	b.n	80068a0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671c:	2200      	movs	r2, #0
 800671e:	496c      	ldr	r1, [pc, #432]	@ (80068d0 <HAL_I2C_Mem_Read+0x460>)
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 fba5 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e0cb      	b.n	80068c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800673e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691a      	ldr	r2, [r3, #16]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800675c:	3b01      	subs	r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b01      	subs	r3, #1
 800676c:	b29a      	uxth	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006778:	2200      	movs	r2, #0
 800677a:	4955      	ldr	r1, [pc, #340]	@ (80068d0 <HAL_I2C_Mem_Read+0x460>)
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fb77 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e09d      	b.n	80068c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800679a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691a      	ldr	r2, [r3, #16]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	3b01      	subs	r3, #1
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006800:	e04e      	b.n	80068a0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006804:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fcdc 	bl	80071c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e058      	b.n	80068c8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	691a      	ldr	r2, [r3, #16]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800683e:	b29b      	uxth	r3, r3
 8006840:	3b01      	subs	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b04      	cmp	r3, #4
 8006854:	d124      	bne.n	80068a0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800685a:	2b03      	cmp	r3, #3
 800685c:	d107      	bne.n	800686e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800686c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800688a:	3b01      	subs	r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006896:	b29b      	uxth	r3, r3
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f47f aeb6 	bne.w	8006616 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e000      	b.n	80068c8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80068c6:	2302      	movs	r3, #2
  }
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3728      	adds	r7, #40	@ 0x28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	00010004 	.word	0x00010004

080068d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af02      	add	r7, sp, #8
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	607a      	str	r2, [r7, #4]
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	460b      	mov	r3, r1
 80068e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d006      	beq.n	80068fe <I2C_MasterRequestWrite+0x2a>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d003      	beq.n	80068fe <I2C_MasterRequestWrite+0x2a>
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068fc:	d108      	bne.n	8006910 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e00b      	b.n	8006928 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006914:	2b12      	cmp	r3, #18
 8006916:	d107      	bne.n	8006928 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006926:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fa9b 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00d      	beq.n	800695c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800694a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800694e:	d103      	bne.n	8006958 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006956:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e035      	b.n	80069c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006964:	d108      	bne.n	8006978 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006966:	897b      	ldrh	r3, [r7, #10]
 8006968:	b2db      	uxtb	r3, r3
 800696a:	461a      	mov	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006974:	611a      	str	r2, [r3, #16]
 8006976:	e01b      	b.n	80069b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006978:	897b      	ldrh	r3, [r7, #10]
 800697a:	11db      	asrs	r3, r3, #7
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 0306 	and.w	r3, r3, #6
 8006982:	b2db      	uxtb	r3, r3
 8006984:	f063 030f 	orn	r3, r3, #15
 8006988:	b2da      	uxtb	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	490e      	ldr	r1, [pc, #56]	@ (80069d0 <I2C_MasterRequestWrite+0xfc>)
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 fae4 	bl	8006f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e010      	b.n	80069c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80069a6:	897b      	ldrh	r3, [r7, #10]
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	4907      	ldr	r1, [pc, #28]	@ (80069d4 <I2C_MasterRequestWrite+0x100>)
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 fad4 	bl	8006f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e000      	b.n	80069c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	00010008 	.word	0x00010008
 80069d4:	00010002 	.word	0x00010002

080069d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af02      	add	r7, sp, #8
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	607a      	str	r2, [r7, #4]
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	460b      	mov	r3, r1
 80069e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80069fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d006      	beq.n	8006a12 <I2C_MasterRequestRead+0x3a>
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d003      	beq.n	8006a12 <I2C_MasterRequestRead+0x3a>
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a10:	d108      	bne.n	8006a24 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	e00b      	b.n	8006a3c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a28:	2b11      	cmp	r3, #17
 8006a2a:	d107      	bne.n	8006a3c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fa11 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00d      	beq.n	8006a70 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a62:	d103      	bne.n	8006a6c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e079      	b.n	8006b64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a78:	d108      	bne.n	8006a8c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a7a:	897b      	ldrh	r3, [r7, #10]
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	f043 0301 	orr.w	r3, r3, #1
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	611a      	str	r2, [r3, #16]
 8006a8a:	e05f      	b.n	8006b4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a8c:	897b      	ldrh	r3, [r7, #10]
 8006a8e:	11db      	asrs	r3, r3, #7
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	f003 0306 	and.w	r3, r3, #6
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	f063 030f 	orn	r3, r3, #15
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	4930      	ldr	r1, [pc, #192]	@ (8006b6c <I2C_MasterRequestRead+0x194>)
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 fa5a 	bl	8006f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e054      	b.n	8006b64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006aba:	897b      	ldrh	r3, [r7, #10]
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	4929      	ldr	r1, [pc, #164]	@ (8006b70 <I2C_MasterRequestRead+0x198>)
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 fa4a 	bl	8006f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e044      	b.n	8006b64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ada:	2300      	movs	r3, #0
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	613b      	str	r3, [r7, #16]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006afe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 f9af 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00d      	beq.n	8006b34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b26:	d103      	bne.n	8006b30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b2e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e017      	b.n	8006b64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006b34:	897b      	ldrh	r3, [r7, #10]
 8006b36:	11db      	asrs	r3, r3, #7
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	f003 0306 	and.w	r3, r3, #6
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	f063 030e 	orn	r3, r3, #14
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	4907      	ldr	r1, [pc, #28]	@ (8006b70 <I2C_MasterRequestRead+0x198>)
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 fa06 	bl	8006f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	00010008 	.word	0x00010008
 8006b70:	00010002 	.word	0x00010002

08006b74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	4611      	mov	r1, r2
 8006b80:	461a      	mov	r2, r3
 8006b82:	4603      	mov	r3, r0
 8006b84:	817b      	strh	r3, [r7, #10]
 8006b86:	460b      	mov	r3, r1
 8006b88:	813b      	strh	r3, [r7, #8]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 f960 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00d      	beq.n	8006bd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bc4:	d103      	bne.n	8006bce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e05f      	b.n	8006c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bd2:	897b      	ldrh	r3, [r7, #10]
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006be0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	6a3a      	ldr	r2, [r7, #32]
 8006be6:	492d      	ldr	r1, [pc, #180]	@ (8006c9c <I2C_RequestMemoryWrite+0x128>)
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 f9bb 	bl	8006f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e04c      	b.n	8006c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c10:	6a39      	ldr	r1, [r7, #32]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 fa46 	bl	80070a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00d      	beq.n	8006c3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d107      	bne.n	8006c36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e02b      	b.n	8006c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c3a:	88fb      	ldrh	r3, [r7, #6]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d105      	bne.n	8006c4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c40:	893b      	ldrh	r3, [r7, #8]
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	611a      	str	r2, [r3, #16]
 8006c4a:	e021      	b.n	8006c90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c4c:	893b      	ldrh	r3, [r7, #8]
 8006c4e:	0a1b      	lsrs	r3, r3, #8
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c5c:	6a39      	ldr	r1, [r7, #32]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 fa20 	bl	80070a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00d      	beq.n	8006c86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d107      	bne.n	8006c82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e005      	b.n	8006c92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c86:	893b      	ldrh	r3, [r7, #8]
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	00010002 	.word	0x00010002

08006ca0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	4608      	mov	r0, r1
 8006caa:	4611      	mov	r1, r2
 8006cac:	461a      	mov	r2, r3
 8006cae:	4603      	mov	r3, r0
 8006cb0:	817b      	strh	r3, [r7, #10]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	813b      	strh	r3, [r7, #8]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006cc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f8c2 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00d      	beq.n	8006d0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d00:	d103      	bne.n	8006d0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e0aa      	b.n	8006e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d0e:	897b      	ldrh	r3, [r7, #10]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006d1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	6a3a      	ldr	r2, [r7, #32]
 8006d22:	4952      	ldr	r1, [pc, #328]	@ (8006e6c <I2C_RequestMemoryRead+0x1cc>)
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f91d 	bl	8006f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e097      	b.n	8006e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d34:	2300      	movs	r3, #0
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d4c:	6a39      	ldr	r1, [r7, #32]
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f000 f9a8 	bl	80070a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00d      	beq.n	8006d76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d107      	bne.n	8006d72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e076      	b.n	8006e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d105      	bne.n	8006d88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d7c:	893b      	ldrh	r3, [r7, #8]
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	611a      	str	r2, [r3, #16]
 8006d86:	e021      	b.n	8006dcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d88:	893b      	ldrh	r3, [r7, #8]
 8006d8a:	0a1b      	lsrs	r3, r3, #8
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	b2da      	uxtb	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d98:	6a39      	ldr	r1, [r7, #32]
 8006d9a:	68f8      	ldr	r0, [r7, #12]
 8006d9c:	f000 f982 	bl	80070a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00d      	beq.n	8006dc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d107      	bne.n	8006dbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e050      	b.n	8006e64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006dc2:	893b      	ldrh	r3, [r7, #8]
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dce:	6a39      	ldr	r1, [r7, #32]
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 f967 	bl	80070a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00d      	beq.n	8006df8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d107      	bne.n	8006df4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006df2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e035      	b.n	8006e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 f82b 	bl	8006e70 <I2C_WaitOnFlagUntilTimeout>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00d      	beq.n	8006e3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e2e:	d103      	bne.n	8006e38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e013      	b.n	8006e64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e3c:	897b      	ldrh	r3, [r7, #10]
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	f043 0301 	orr.w	r3, r3, #1
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	6a3a      	ldr	r2, [r7, #32]
 8006e50:	4906      	ldr	r1, [pc, #24]	@ (8006e6c <I2C_RequestMemoryRead+0x1cc>)
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f886 	bl	8006f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e000      	b.n	8006e64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	00010002 	.word	0x00010002

08006e70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	603b      	str	r3, [r7, #0]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e80:	e048      	b.n	8006f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e88:	d044      	beq.n	8006f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e8a:	f7fd fccb 	bl	8004824 <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d302      	bcc.n	8006ea0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d139      	bne.n	8006f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	0c1b      	lsrs	r3, r3, #16
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d10d      	bne.n	8006ec6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	43da      	mvns	r2, r3
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	bf0c      	ite	eq
 8006ebc:	2301      	moveq	r3, #1
 8006ebe:	2300      	movne	r3, #0
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	e00c      	b.n	8006ee0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	43da      	mvns	r2, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bf0c      	ite	eq
 8006ed8:	2301      	moveq	r3, #1
 8006eda:	2300      	movne	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	461a      	mov	r2, r3
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d116      	bne.n	8006f14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f00:	f043 0220 	orr.w	r2, r3, #32
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e023      	b.n	8006f5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	0c1b      	lsrs	r3, r3, #16
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d10d      	bne.n	8006f3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	43da      	mvns	r2, r3
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	bf0c      	ite	eq
 8006f30:	2301      	moveq	r3, #1
 8006f32:	2300      	movne	r3, #0
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	461a      	mov	r2, r3
 8006f38:	e00c      	b.n	8006f54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	43da      	mvns	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	4013      	ands	r3, r2
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bf0c      	ite	eq
 8006f4c:	2301      	moveq	r3, #1
 8006f4e:	2300      	movne	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	461a      	mov	r2, r3
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d093      	beq.n	8006e82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f72:	e071      	b.n	8007058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f82:	d123      	bne.n	8006fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb8:	f043 0204 	orr.w	r2, r3, #4
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e067      	b.n	800709c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd2:	d041      	beq.n	8007058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd4:	f7fd fc26 	bl	8004824 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d302      	bcc.n	8006fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d136      	bne.n	8007058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	0c1b      	lsrs	r3, r3, #16
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d10c      	bne.n	800700e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	43da      	mvns	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4013      	ands	r3, r2
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	bf14      	ite	ne
 8007006:	2301      	movne	r3, #1
 8007008:	2300      	moveq	r3, #0
 800700a:	b2db      	uxtb	r3, r3
 800700c:	e00b      	b.n	8007026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	43da      	mvns	r2, r3
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	4013      	ands	r3, r2
 800701a:	b29b      	uxth	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	bf14      	ite	ne
 8007020:	2301      	movne	r3, #1
 8007022:	2300      	moveq	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d016      	beq.n	8007058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007044:	f043 0220 	orr.w	r2, r3, #32
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e021      	b.n	800709c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	0c1b      	lsrs	r3, r3, #16
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b01      	cmp	r3, #1
 8007060:	d10c      	bne.n	800707c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	43da      	mvns	r2, r3
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	4013      	ands	r3, r2
 800706e:	b29b      	uxth	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	bf14      	ite	ne
 8007074:	2301      	movne	r3, #1
 8007076:	2300      	moveq	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	e00b      	b.n	8007094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	43da      	mvns	r2, r3
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4013      	ands	r3, r2
 8007088:	b29b      	uxth	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	bf14      	ite	ne
 800708e:	2301      	movne	r3, #1
 8007090:	2300      	moveq	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	f47f af6d 	bne.w	8006f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070b0:	e034      	b.n	800711c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 f8e3 	bl	800727e <I2C_IsAcknowledgeFailed>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e034      	b.n	800712c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c8:	d028      	beq.n	800711c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ca:	f7fd fbab 	bl	8004824 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d302      	bcc.n	80070e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d11d      	bne.n	800711c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ea:	2b80      	cmp	r3, #128	@ 0x80
 80070ec:	d016      	beq.n	800711c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007108:	f043 0220 	orr.w	r2, r3, #32
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e007      	b.n	800712c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007126:	2b80      	cmp	r3, #128	@ 0x80
 8007128:	d1c3      	bne.n	80070b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007140:	e034      	b.n	80071ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 f89b 	bl	800727e <I2C_IsAcknowledgeFailed>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e034      	b.n	80071bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007158:	d028      	beq.n	80071ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800715a:	f7fd fb63 	bl	8004824 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	429a      	cmp	r2, r3
 8007168:	d302      	bcc.n	8007170 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d11d      	bne.n	80071ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	f003 0304 	and.w	r3, r3, #4
 800717a:	2b04      	cmp	r3, #4
 800717c:	d016      	beq.n	80071ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007198:	f043 0220 	orr.w	r2, r3, #32
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e007      	b.n	80071bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	f003 0304 	and.w	r3, r3, #4
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	d1c3      	bne.n	8007142 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071d0:	e049      	b.n	8007266 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	f003 0310 	and.w	r3, r3, #16
 80071dc:	2b10      	cmp	r3, #16
 80071de:	d119      	bne.n	8007214 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f06f 0210 	mvn.w	r2, #16
 80071e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e030      	b.n	8007276 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007214:	f7fd fb06 	bl	8004824 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	429a      	cmp	r2, r3
 8007222:	d302      	bcc.n	800722a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d11d      	bne.n	8007266 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007234:	2b40      	cmp	r3, #64	@ 0x40
 8007236:	d016      	beq.n	8007266 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2220      	movs	r2, #32
 8007242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	f043 0220 	orr.w	r2, r3, #32
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e007      	b.n	8007276 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007270:	2b40      	cmp	r3, #64	@ 0x40
 8007272:	d1ae      	bne.n	80071d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007294:	d11b      	bne.n	80072ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800729e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ba:	f043 0204 	orr.w	r2, r3, #4
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e000      	b.n	80072d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80072e2:	4b06      	ldr	r3, [pc, #24]	@ (80072fc <HAL_PWR_EnableBkUpAccess+0x20>)
 80072e4:	2201      	movs	r2, #1
 80072e6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80072e8:	4b05      	ldr	r3, [pc, #20]	@ (8007300 <HAL_PWR_EnableBkUpAccess+0x24>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80072ee:	687b      	ldr	r3, [r7, #4]
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	420e0020 	.word	0x420e0020
 8007300:	40007000 	.word	0x40007000

08007304 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800730a:	4b06      	ldr	r3, [pc, #24]	@ (8007324 <HAL_PWR_DisableBkUpAccess+0x20>)
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007310:	4b05      	ldr	r3, [pc, #20]	@ (8007328 <HAL_PWR_DisableBkUpAccess+0x24>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007316:	687b      	ldr	r3, [r7, #4]
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	420e0020 	.word	0x420e0020
 8007328:	40007000 	.word	0x40007000

0800732c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e267      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b00      	cmp	r3, #0
 8007348:	d075      	beq.n	8007436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800734a:	4b88      	ldr	r3, [pc, #544]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f003 030c 	and.w	r3, r3, #12
 8007352:	2b04      	cmp	r3, #4
 8007354:	d00c      	beq.n	8007370 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007356:	4b85      	ldr	r3, [pc, #532]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800735e:	2b08      	cmp	r3, #8
 8007360:	d112      	bne.n	8007388 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007362:	4b82      	ldr	r3, [pc, #520]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800736a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800736e:	d10b      	bne.n	8007388 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007370:	4b7e      	ldr	r3, [pc, #504]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d05b      	beq.n	8007434 <HAL_RCC_OscConfig+0x108>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d157      	bne.n	8007434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e242      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007390:	d106      	bne.n	80073a0 <HAL_RCC_OscConfig+0x74>
 8007392:	4b76      	ldr	r3, [pc, #472]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a75      	ldr	r2, [pc, #468]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 8007398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	e01d      	b.n	80073dc <HAL_RCC_OscConfig+0xb0>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073a8:	d10c      	bne.n	80073c4 <HAL_RCC_OscConfig+0x98>
 80073aa:	4b70      	ldr	r3, [pc, #448]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a6f      	ldr	r2, [pc, #444]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 80073b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	4b6d      	ldr	r3, [pc, #436]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a6c      	ldr	r2, [pc, #432]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 80073bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	e00b      	b.n	80073dc <HAL_RCC_OscConfig+0xb0>
 80073c4:	4b69      	ldr	r3, [pc, #420]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a68      	ldr	r2, [pc, #416]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 80073ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	4b66      	ldr	r3, [pc, #408]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a65      	ldr	r2, [pc, #404]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 80073d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d013      	beq.n	800740c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073e4:	f7fd fa1e 	bl	8004824 <HAL_GetTick>
 80073e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ea:	e008      	b.n	80073fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073ec:	f7fd fa1a 	bl	8004824 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b64      	cmp	r3, #100	@ 0x64
 80073f8:	d901      	bls.n	80073fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e207      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073fe:	4b5b      	ldr	r3, [pc, #364]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0f0      	beq.n	80073ec <HAL_RCC_OscConfig+0xc0>
 800740a:	e014      	b.n	8007436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800740c:	f7fd fa0a 	bl	8004824 <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007414:	f7fd fa06 	bl	8004824 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b64      	cmp	r3, #100	@ 0x64
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e1f3      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007426:	4b51      	ldr	r3, [pc, #324]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1f0      	bne.n	8007414 <HAL_RCC_OscConfig+0xe8>
 8007432:	e000      	b.n	8007436 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d063      	beq.n	800750a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007442:	4b4a      	ldr	r3, [pc, #296]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 030c 	and.w	r3, r3, #12
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800744e:	4b47      	ldr	r3, [pc, #284]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007456:	2b08      	cmp	r3, #8
 8007458:	d11c      	bne.n	8007494 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800745a:	4b44      	ldr	r3, [pc, #272]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d116      	bne.n	8007494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007466:	4b41      	ldr	r3, [pc, #260]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d005      	beq.n	800747e <HAL_RCC_OscConfig+0x152>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d001      	beq.n	800747e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e1c7      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800747e:	4b3b      	ldr	r3, [pc, #236]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	4937      	ldr	r1, [pc, #220]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 800748e:	4313      	orrs	r3, r2
 8007490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007492:	e03a      	b.n	800750a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d020      	beq.n	80074de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800749c:	4b34      	ldr	r3, [pc, #208]	@ (8007570 <HAL_RCC_OscConfig+0x244>)
 800749e:	2201      	movs	r2, #1
 80074a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a2:	f7fd f9bf 	bl	8004824 <HAL_GetTick>
 80074a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a8:	e008      	b.n	80074bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074aa:	f7fd f9bb 	bl	8004824 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d901      	bls.n	80074bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e1a8      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074bc:	4b2b      	ldr	r3, [pc, #172]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0f0      	beq.n	80074aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074c8:	4b28      	ldr	r3, [pc, #160]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	4925      	ldr	r1, [pc, #148]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	600b      	str	r3, [r1, #0]
 80074dc:	e015      	b.n	800750a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074de:	4b24      	ldr	r3, [pc, #144]	@ (8007570 <HAL_RCC_OscConfig+0x244>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e4:	f7fd f99e 	bl	8004824 <HAL_GetTick>
 80074e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ea:	e008      	b.n	80074fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074ec:	f7fd f99a 	bl	8004824 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e187      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074fe:	4b1b      	ldr	r3, [pc, #108]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1f0      	bne.n	80074ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b00      	cmp	r3, #0
 8007514:	d036      	beq.n	8007584 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d016      	beq.n	800754c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800751e:	4b15      	ldr	r3, [pc, #84]	@ (8007574 <HAL_RCC_OscConfig+0x248>)
 8007520:	2201      	movs	r2, #1
 8007522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007524:	f7fd f97e 	bl	8004824 <HAL_GetTick>
 8007528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800752a:	e008      	b.n	800753e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800752c:	f7fd f97a 	bl	8004824 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	2b02      	cmp	r3, #2
 8007538:	d901      	bls.n	800753e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e167      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800753e:	4b0b      	ldr	r3, [pc, #44]	@ (800756c <HAL_RCC_OscConfig+0x240>)
 8007540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0f0      	beq.n	800752c <HAL_RCC_OscConfig+0x200>
 800754a:	e01b      	b.n	8007584 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800754c:	4b09      	ldr	r3, [pc, #36]	@ (8007574 <HAL_RCC_OscConfig+0x248>)
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007552:	f7fd f967 	bl	8004824 <HAL_GetTick>
 8007556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007558:	e00e      	b.n	8007578 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800755a:	f7fd f963 	bl	8004824 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	2b02      	cmp	r3, #2
 8007566:	d907      	bls.n	8007578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e150      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
 800756c:	40023800 	.word	0x40023800
 8007570:	42470000 	.word	0x42470000
 8007574:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007578:	4b88      	ldr	r3, [pc, #544]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 800757a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1ea      	bne.n	800755a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 8097 	beq.w	80076c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007592:	2300      	movs	r3, #0
 8007594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007596:	4b81      	ldr	r3, [pc, #516]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 8007598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10f      	bne.n	80075c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075a2:	2300      	movs	r3, #0
 80075a4:	60bb      	str	r3, [r7, #8]
 80075a6:	4b7d      	ldr	r3, [pc, #500]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 80075a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075aa:	4a7c      	ldr	r2, [pc, #496]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 80075ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80075b2:	4b7a      	ldr	r3, [pc, #488]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 80075b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075ba:	60bb      	str	r3, [r7, #8]
 80075bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075be:	2301      	movs	r3, #1
 80075c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075c2:	4b77      	ldr	r3, [pc, #476]	@ (80077a0 <HAL_RCC_OscConfig+0x474>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d118      	bne.n	8007600 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075ce:	4b74      	ldr	r3, [pc, #464]	@ (80077a0 <HAL_RCC_OscConfig+0x474>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a73      	ldr	r2, [pc, #460]	@ (80077a0 <HAL_RCC_OscConfig+0x474>)
 80075d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075da:	f7fd f923 	bl	8004824 <HAL_GetTick>
 80075de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075e0:	e008      	b.n	80075f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075e2:	f7fd f91f 	bl	8004824 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d901      	bls.n	80075f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e10c      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075f4:	4b6a      	ldr	r3, [pc, #424]	@ (80077a0 <HAL_RCC_OscConfig+0x474>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d0f0      	beq.n	80075e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d106      	bne.n	8007616 <HAL_RCC_OscConfig+0x2ea>
 8007608:	4b64      	ldr	r3, [pc, #400]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 800760a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760c:	4a63      	ldr	r2, [pc, #396]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 800760e:	f043 0301 	orr.w	r3, r3, #1
 8007612:	6713      	str	r3, [r2, #112]	@ 0x70
 8007614:	e01c      	b.n	8007650 <HAL_RCC_OscConfig+0x324>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	2b05      	cmp	r3, #5
 800761c:	d10c      	bne.n	8007638 <HAL_RCC_OscConfig+0x30c>
 800761e:	4b5f      	ldr	r3, [pc, #380]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 8007620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007622:	4a5e      	ldr	r2, [pc, #376]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 8007624:	f043 0304 	orr.w	r3, r3, #4
 8007628:	6713      	str	r3, [r2, #112]	@ 0x70
 800762a:	4b5c      	ldr	r3, [pc, #368]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 800762c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800762e:	4a5b      	ldr	r2, [pc, #364]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 8007630:	f043 0301 	orr.w	r3, r3, #1
 8007634:	6713      	str	r3, [r2, #112]	@ 0x70
 8007636:	e00b      	b.n	8007650 <HAL_RCC_OscConfig+0x324>
 8007638:	4b58      	ldr	r3, [pc, #352]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 800763a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800763c:	4a57      	ldr	r2, [pc, #348]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	6713      	str	r3, [r2, #112]	@ 0x70
 8007644:	4b55      	ldr	r3, [pc, #340]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 8007646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007648:	4a54      	ldr	r2, [pc, #336]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 800764a:	f023 0304 	bic.w	r3, r3, #4
 800764e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d015      	beq.n	8007684 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007658:	f7fd f8e4 	bl	8004824 <HAL_GetTick>
 800765c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800765e:	e00a      	b.n	8007676 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007660:	f7fd f8e0 	bl	8004824 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800766e:	4293      	cmp	r3, r2
 8007670:	d901      	bls.n	8007676 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e0cb      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007676:	4b49      	ldr	r3, [pc, #292]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 8007678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0ee      	beq.n	8007660 <HAL_RCC_OscConfig+0x334>
 8007682:	e014      	b.n	80076ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007684:	f7fd f8ce 	bl	8004824 <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800768a:	e00a      	b.n	80076a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800768c:	f7fd f8ca 	bl	8004824 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800769a:	4293      	cmp	r3, r2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e0b5      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076a2:	4b3e      	ldr	r3, [pc, #248]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 80076a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1ee      	bne.n	800768c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d105      	bne.n	80076c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076b4:	4b39      	ldr	r3, [pc, #228]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 80076b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b8:	4a38      	ldr	r2, [pc, #224]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 80076ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 80a1 	beq.w	800780c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076ca:	4b34      	ldr	r3, [pc, #208]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 030c 	and.w	r3, r3, #12
 80076d2:	2b08      	cmp	r3, #8
 80076d4:	d05c      	beq.n	8007790 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d141      	bne.n	8007762 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076de:	4b31      	ldr	r3, [pc, #196]	@ (80077a4 <HAL_RCC_OscConfig+0x478>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e4:	f7fd f89e 	bl	8004824 <HAL_GetTick>
 80076e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076ec:	f7fd f89a 	bl	8004824 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e087      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076fe:	4b27      	ldr	r3, [pc, #156]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1f0      	bne.n	80076ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	69da      	ldr	r2, [r3, #28]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007718:	019b      	lsls	r3, r3, #6
 800771a:	431a      	orrs	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007720:	085b      	lsrs	r3, r3, #1
 8007722:	3b01      	subs	r3, #1
 8007724:	041b      	lsls	r3, r3, #16
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772c:	061b      	lsls	r3, r3, #24
 800772e:	491b      	ldr	r1, [pc, #108]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 8007730:	4313      	orrs	r3, r2
 8007732:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007734:	4b1b      	ldr	r3, [pc, #108]	@ (80077a4 <HAL_RCC_OscConfig+0x478>)
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800773a:	f7fd f873 	bl	8004824 <HAL_GetTick>
 800773e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007740:	e008      	b.n	8007754 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007742:	f7fd f86f 	bl	8004824 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e05c      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007754:	4b11      	ldr	r3, [pc, #68]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0f0      	beq.n	8007742 <HAL_RCC_OscConfig+0x416>
 8007760:	e054      	b.n	800780c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007762:	4b10      	ldr	r3, [pc, #64]	@ (80077a4 <HAL_RCC_OscConfig+0x478>)
 8007764:	2200      	movs	r2, #0
 8007766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007768:	f7fd f85c 	bl	8004824 <HAL_GetTick>
 800776c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800776e:	e008      	b.n	8007782 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007770:	f7fd f858 	bl	8004824 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d901      	bls.n	8007782 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e045      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007782:	4b06      	ldr	r3, [pc, #24]	@ (800779c <HAL_RCC_OscConfig+0x470>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1f0      	bne.n	8007770 <HAL_RCC_OscConfig+0x444>
 800778e:	e03d      	b.n	800780c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d107      	bne.n	80077a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e038      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
 800779c:	40023800 	.word	0x40023800
 80077a0:	40007000 	.word	0x40007000
 80077a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80077a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007818 <HAL_RCC_OscConfig+0x4ec>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d028      	beq.n	8007808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d121      	bne.n	8007808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d11a      	bne.n	8007808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80077d8:	4013      	ands	r3, r2
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80077de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d111      	bne.n	8007808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ee:	085b      	lsrs	r3, r3, #1
 80077f0:	3b01      	subs	r3, #1
 80077f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d107      	bne.n	8007808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007804:	429a      	cmp	r2, r3
 8007806:	d001      	beq.n	800780c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e000      	b.n	800780e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	40023800 	.word	0x40023800

0800781c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e0cc      	b.n	80079ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007830:	4b68      	ldr	r3, [pc, #416]	@ (80079d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0307 	and.w	r3, r3, #7
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d90c      	bls.n	8007858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800783e:	4b65      	ldr	r3, [pc, #404]	@ (80079d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	b2d2      	uxtb	r2, r2
 8007844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007846:	4b63      	ldr	r3, [pc, #396]	@ (80079d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0307 	and.w	r3, r3, #7
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	429a      	cmp	r2, r3
 8007852:	d001      	beq.n	8007858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e0b8      	b.n	80079ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d020      	beq.n	80078a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b00      	cmp	r3, #0
 800786e:	d005      	beq.n	800787c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007870:	4b59      	ldr	r3, [pc, #356]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	4a58      	ldr	r2, [pc, #352]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007876:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800787a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0308 	and.w	r3, r3, #8
 8007884:	2b00      	cmp	r3, #0
 8007886:	d005      	beq.n	8007894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007888:	4b53      	ldr	r3, [pc, #332]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	4a52      	ldr	r2, [pc, #328]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 800788e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007894:	4b50      	ldr	r3, [pc, #320]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	494d      	ldr	r1, [pc, #308]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d044      	beq.n	800793c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d107      	bne.n	80078ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ba:	4b47      	ldr	r3, [pc, #284]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d119      	bne.n	80078fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e07f      	b.n	80079ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d003      	beq.n	80078da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d107      	bne.n	80078ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078da:	4b3f      	ldr	r3, [pc, #252]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d109      	bne.n	80078fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e06f      	b.n	80079ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078ea:	4b3b      	ldr	r3, [pc, #236]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e067      	b.n	80079ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078fa:	4b37      	ldr	r3, [pc, #220]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f023 0203 	bic.w	r2, r3, #3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	4934      	ldr	r1, [pc, #208]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007908:	4313      	orrs	r3, r2
 800790a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800790c:	f7fc ff8a 	bl	8004824 <HAL_GetTick>
 8007910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007912:	e00a      	b.n	800792a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007914:	f7fc ff86 	bl	8004824 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007922:	4293      	cmp	r3, r2
 8007924:	d901      	bls.n	800792a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e04f      	b.n	80079ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800792a:	4b2b      	ldr	r3, [pc, #172]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f003 020c 	and.w	r2, r3, #12
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	429a      	cmp	r2, r3
 800793a:	d1eb      	bne.n	8007914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800793c:	4b25      	ldr	r3, [pc, #148]	@ (80079d4 <HAL_RCC_ClockConfig+0x1b8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0307 	and.w	r3, r3, #7
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	429a      	cmp	r2, r3
 8007948:	d20c      	bcs.n	8007964 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800794a:	4b22      	ldr	r3, [pc, #136]	@ (80079d4 <HAL_RCC_ClockConfig+0x1b8>)
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	b2d2      	uxtb	r2, r2
 8007950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007952:	4b20      	ldr	r3, [pc, #128]	@ (80079d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	d001      	beq.n	8007964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e032      	b.n	80079ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	d008      	beq.n	8007982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007970:	4b19      	ldr	r3, [pc, #100]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	4916      	ldr	r1, [pc, #88]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 800797e:	4313      	orrs	r3, r2
 8007980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0308 	and.w	r3, r3, #8
 800798a:	2b00      	cmp	r3, #0
 800798c:	d009      	beq.n	80079a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800798e:	4b12      	ldr	r3, [pc, #72]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	00db      	lsls	r3, r3, #3
 800799c:	490e      	ldr	r1, [pc, #56]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80079a2:	f000 f821 	bl	80079e8 <HAL_RCC_GetSysClockFreq>
 80079a6:	4602      	mov	r2, r0
 80079a8:	4b0b      	ldr	r3, [pc, #44]	@ (80079d8 <HAL_RCC_ClockConfig+0x1bc>)
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	091b      	lsrs	r3, r3, #4
 80079ae:	f003 030f 	and.w	r3, r3, #15
 80079b2:	490a      	ldr	r1, [pc, #40]	@ (80079dc <HAL_RCC_ClockConfig+0x1c0>)
 80079b4:	5ccb      	ldrb	r3, [r1, r3]
 80079b6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ba:	4a09      	ldr	r2, [pc, #36]	@ (80079e0 <HAL_RCC_ClockConfig+0x1c4>)
 80079bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80079be:	4b09      	ldr	r3, [pc, #36]	@ (80079e4 <HAL_RCC_ClockConfig+0x1c8>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fc fd40 	bl	8004448 <HAL_InitTick>

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	40023c00 	.word	0x40023c00
 80079d8:	40023800 	.word	0x40023800
 80079dc:	08010764 	.word	0x08010764
 80079e0:	20000004 	.word	0x20000004
 80079e4:	20000008 	.word	0x20000008

080079e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079ec:	b090      	sub	sp, #64	@ 0x40
 80079ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a00:	4b59      	ldr	r3, [pc, #356]	@ (8007b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 030c 	and.w	r3, r3, #12
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d00d      	beq.n	8007a28 <HAL_RCC_GetSysClockFreq+0x40>
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	f200 80a1 	bhi.w	8007b54 <HAL_RCC_GetSysClockFreq+0x16c>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <HAL_RCC_GetSysClockFreq+0x34>
 8007a16:	2b04      	cmp	r3, #4
 8007a18:	d003      	beq.n	8007a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8007a1a:	e09b      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a1c:	4b53      	ldr	r3, [pc, #332]	@ (8007b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8007a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007a20:	e09b      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a22:	4b53      	ldr	r3, [pc, #332]	@ (8007b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007a26:	e098      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a28:	4b4f      	ldr	r3, [pc, #316]	@ (8007b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a32:	4b4d      	ldr	r3, [pc, #308]	@ (8007b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d028      	beq.n	8007a90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8007b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	099b      	lsrs	r3, r3, #6
 8007a44:	2200      	movs	r2, #0
 8007a46:	623b      	str	r3, [r7, #32]
 8007a48:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007a50:	2100      	movs	r1, #0
 8007a52:	4b47      	ldr	r3, [pc, #284]	@ (8007b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a54:	fb03 f201 	mul.w	r2, r3, r1
 8007a58:	2300      	movs	r3, #0
 8007a5a:	fb00 f303 	mul.w	r3, r0, r3
 8007a5e:	4413      	add	r3, r2
 8007a60:	4a43      	ldr	r2, [pc, #268]	@ (8007b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a62:	fba0 1202 	umull	r1, r2, r0, r2
 8007a66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a68:	460a      	mov	r2, r1
 8007a6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a6e:	4413      	add	r3, r2
 8007a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a74:	2200      	movs	r2, #0
 8007a76:	61bb      	str	r3, [r7, #24]
 8007a78:	61fa      	str	r2, [r7, #28]
 8007a7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007a82:	f7f9 f8f1 	bl	8000c68 <__aeabi_uldivmod>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a8e:	e053      	b.n	8007b38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a90:	4b35      	ldr	r3, [pc, #212]	@ (8007b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	099b      	lsrs	r3, r3, #6
 8007a96:	2200      	movs	r2, #0
 8007a98:	613b      	str	r3, [r7, #16]
 8007a9a:	617a      	str	r2, [r7, #20]
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007aa2:	f04f 0b00 	mov.w	fp, #0
 8007aa6:	4652      	mov	r2, sl
 8007aa8:	465b      	mov	r3, fp
 8007aaa:	f04f 0000 	mov.w	r0, #0
 8007aae:	f04f 0100 	mov.w	r1, #0
 8007ab2:	0159      	lsls	r1, r3, #5
 8007ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ab8:	0150      	lsls	r0, r2, #5
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	ebb2 080a 	subs.w	r8, r2, sl
 8007ac2:	eb63 090b 	sbc.w	r9, r3, fp
 8007ac6:	f04f 0200 	mov.w	r2, #0
 8007aca:	f04f 0300 	mov.w	r3, #0
 8007ace:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007ad2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007ad6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007ada:	ebb2 0408 	subs.w	r4, r2, r8
 8007ade:	eb63 0509 	sbc.w	r5, r3, r9
 8007ae2:	f04f 0200 	mov.w	r2, #0
 8007ae6:	f04f 0300 	mov.w	r3, #0
 8007aea:	00eb      	lsls	r3, r5, #3
 8007aec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007af0:	00e2      	lsls	r2, r4, #3
 8007af2:	4614      	mov	r4, r2
 8007af4:	461d      	mov	r5, r3
 8007af6:	eb14 030a 	adds.w	r3, r4, sl
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	eb45 030b 	adc.w	r3, r5, fp
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b0e:	4629      	mov	r1, r5
 8007b10:	028b      	lsls	r3, r1, #10
 8007b12:	4621      	mov	r1, r4
 8007b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b18:	4621      	mov	r1, r4
 8007b1a:	028a      	lsls	r2, r1, #10
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b22:	2200      	movs	r2, #0
 8007b24:	60bb      	str	r3, [r7, #8]
 8007b26:	60fa      	str	r2, [r7, #12]
 8007b28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b2c:	f7f9 f89c 	bl	8000c68 <__aeabi_uldivmod>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4613      	mov	r3, r2
 8007b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007b38:	4b0b      	ldr	r3, [pc, #44]	@ (8007b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	0c1b      	lsrs	r3, r3, #16
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	3301      	adds	r3, #1
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007b48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007b52:	e002      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b54:	4b05      	ldr	r3, [pc, #20]	@ (8007b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8007b56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3740      	adds	r7, #64	@ 0x40
 8007b60:	46bd      	mov	sp, r7
 8007b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b66:	bf00      	nop
 8007b68:	40023800 	.word	0x40023800
 8007b6c:	00f42400 	.word	0x00f42400
 8007b70:	017d7840 	.word	0x017d7840

08007b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b78:	4b03      	ldr	r3, [pc, #12]	@ (8007b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	20000004 	.word	0x20000004

08007b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b90:	f7ff fff0 	bl	8007b74 <HAL_RCC_GetHCLKFreq>
 8007b94:	4602      	mov	r2, r0
 8007b96:	4b05      	ldr	r3, [pc, #20]	@ (8007bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	0a9b      	lsrs	r3, r3, #10
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	4903      	ldr	r1, [pc, #12]	@ (8007bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ba2:	5ccb      	ldrb	r3, [r1, r3]
 8007ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	08010774 	.word	0x08010774

08007bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007bb8:	f7ff ffdc 	bl	8007b74 <HAL_RCC_GetHCLKFreq>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	4b05      	ldr	r3, [pc, #20]	@ (8007bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	0b5b      	lsrs	r3, r3, #13
 8007bc4:	f003 0307 	and.w	r3, r3, #7
 8007bc8:	4903      	ldr	r1, [pc, #12]	@ (8007bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bca:	5ccb      	ldrb	r3, [r1, r3]
 8007bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	08010774 	.word	0x08010774

08007bdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	220f      	movs	r2, #15
 8007bea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007bec:	4b12      	ldr	r3, [pc, #72]	@ (8007c38 <HAL_RCC_GetClockConfig+0x5c>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0203 	and.w	r2, r3, #3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8007c38 <HAL_RCC_GetClockConfig+0x5c>)
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007c04:	4b0c      	ldr	r3, [pc, #48]	@ (8007c38 <HAL_RCC_GetClockConfig+0x5c>)
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007c10:	4b09      	ldr	r3, [pc, #36]	@ (8007c38 <HAL_RCC_GetClockConfig+0x5c>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	08db      	lsrs	r3, r3, #3
 8007c16:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c1e:	4b07      	ldr	r3, [pc, #28]	@ (8007c3c <HAL_RCC_GetClockConfig+0x60>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0207 	and.w	r2, r3, #7
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	601a      	str	r2, [r3, #0]
}
 8007c2a:	bf00      	nop
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	40023800 	.word	0x40023800
 8007c3c:	40023c00 	.word	0x40023c00

08007c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e041      	b.n	8007cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d106      	bne.n	8007c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fc f9bc 	bl	8003fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4610      	mov	r0, r2
 8007c80:	f000 ffc8 	bl	8008c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d001      	beq.n	8007cf8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e046      	b.n	8007d86 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a23      	ldr	r2, [pc, #140]	@ (8007d94 <HAL_TIM_Base_Start+0xb4>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d022      	beq.n	8007d50 <HAL_TIM_Base_Start+0x70>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d12:	d01d      	beq.n	8007d50 <HAL_TIM_Base_Start+0x70>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a1f      	ldr	r2, [pc, #124]	@ (8007d98 <HAL_TIM_Base_Start+0xb8>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d018      	beq.n	8007d50 <HAL_TIM_Base_Start+0x70>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a1e      	ldr	r2, [pc, #120]	@ (8007d9c <HAL_TIM_Base_Start+0xbc>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d013      	beq.n	8007d50 <HAL_TIM_Base_Start+0x70>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8007da0 <HAL_TIM_Base_Start+0xc0>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00e      	beq.n	8007d50 <HAL_TIM_Base_Start+0x70>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a1b      	ldr	r2, [pc, #108]	@ (8007da4 <HAL_TIM_Base_Start+0xc4>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d009      	beq.n	8007d50 <HAL_TIM_Base_Start+0x70>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a19      	ldr	r2, [pc, #100]	@ (8007da8 <HAL_TIM_Base_Start+0xc8>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d004      	beq.n	8007d50 <HAL_TIM_Base_Start+0x70>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a18      	ldr	r2, [pc, #96]	@ (8007dac <HAL_TIM_Base_Start+0xcc>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d111      	bne.n	8007d74 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 0307 	and.w	r3, r3, #7
 8007d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b06      	cmp	r3, #6
 8007d60:	d010      	beq.n	8007d84 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f042 0201 	orr.w	r2, r2, #1
 8007d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d72:	e007      	b.n	8007d84 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	40010000 	.word	0x40010000
 8007d98:	40000400 	.word	0x40000400
 8007d9c:	40000800 	.word	0x40000800
 8007da0:	40000c00 	.word	0x40000c00
 8007da4:	40010400 	.word	0x40010400
 8007da8:	40014000 	.word	0x40014000
 8007dac:	40001800 	.word	0x40001800

08007db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d001      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e04e      	b.n	8007e66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f042 0201 	orr.w	r2, r2, #1
 8007dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a23      	ldr	r2, [pc, #140]	@ (8007e74 <HAL_TIM_Base_Start_IT+0xc4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d022      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x80>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df2:	d01d      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x80>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a1f      	ldr	r2, [pc, #124]	@ (8007e78 <HAL_TIM_Base_Start_IT+0xc8>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d018      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x80>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a1e      	ldr	r2, [pc, #120]	@ (8007e7c <HAL_TIM_Base_Start_IT+0xcc>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d013      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x80>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8007e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00e      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x80>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a1b      	ldr	r2, [pc, #108]	@ (8007e84 <HAL_TIM_Base_Start_IT+0xd4>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d009      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x80>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a19      	ldr	r2, [pc, #100]	@ (8007e88 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d004      	beq.n	8007e30 <HAL_TIM_Base_Start_IT+0x80>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a18      	ldr	r2, [pc, #96]	@ (8007e8c <HAL_TIM_Base_Start_IT+0xdc>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d111      	bne.n	8007e54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b06      	cmp	r3, #6
 8007e40:	d010      	beq.n	8007e64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f042 0201 	orr.w	r2, r2, #1
 8007e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e52:	e007      	b.n	8007e64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0201 	orr.w	r2, r2, #1
 8007e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	40010000 	.word	0x40010000
 8007e78:	40000400 	.word	0x40000400
 8007e7c:	40000800 	.word	0x40000800
 8007e80:	40000c00 	.word	0x40000c00
 8007e84:	40010400 	.word	0x40010400
 8007e88:	40014000 	.word	0x40014000
 8007e8c:	40001800 	.word	0x40001800

08007e90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e041      	b.n	8007f26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d106      	bne.n	8007ebc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f839 	bl	8007f2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3304      	adds	r3, #4
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4610      	mov	r0, r2
 8007ed0:	f000 fea0 	bl	8008c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
	...

08007f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d109      	bne.n	8007f68 <HAL_TIM_PWM_Start+0x24>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	bf14      	ite	ne
 8007f60:	2301      	movne	r3, #1
 8007f62:	2300      	moveq	r3, #0
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	e022      	b.n	8007fae <HAL_TIM_PWM_Start+0x6a>
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b04      	cmp	r3, #4
 8007f6c:	d109      	bne.n	8007f82 <HAL_TIM_PWM_Start+0x3e>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	bf14      	ite	ne
 8007f7a:	2301      	movne	r3, #1
 8007f7c:	2300      	moveq	r3, #0
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	e015      	b.n	8007fae <HAL_TIM_PWM_Start+0x6a>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d109      	bne.n	8007f9c <HAL_TIM_PWM_Start+0x58>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	bf14      	ite	ne
 8007f94:	2301      	movne	r3, #1
 8007f96:	2300      	moveq	r3, #0
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	e008      	b.n	8007fae <HAL_TIM_PWM_Start+0x6a>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	bf14      	ite	ne
 8007fa8:	2301      	movne	r3, #1
 8007faa:	2300      	moveq	r3, #0
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e07c      	b.n	80080b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <HAL_TIM_PWM_Start+0x82>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fc4:	e013      	b.n	8007fee <HAL_TIM_PWM_Start+0xaa>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d104      	bne.n	8007fd6 <HAL_TIM_PWM_Start+0x92>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fd4:	e00b      	b.n	8007fee <HAL_TIM_PWM_Start+0xaa>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d104      	bne.n	8007fe6 <HAL_TIM_PWM_Start+0xa2>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fe4:	e003      	b.n	8007fee <HAL_TIM_PWM_Start+0xaa>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 fa26 	bl	8009448 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a2d      	ldr	r2, [pc, #180]	@ (80080b8 <HAL_TIM_PWM_Start+0x174>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d004      	beq.n	8008010 <HAL_TIM_PWM_Start+0xcc>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a2c      	ldr	r2, [pc, #176]	@ (80080bc <HAL_TIM_PWM_Start+0x178>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d101      	bne.n	8008014 <HAL_TIM_PWM_Start+0xd0>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <HAL_TIM_PWM_Start+0xd2>
 8008014:	2300      	movs	r3, #0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d007      	beq.n	800802a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008028:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a22      	ldr	r2, [pc, #136]	@ (80080b8 <HAL_TIM_PWM_Start+0x174>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d022      	beq.n	800807a <HAL_TIM_PWM_Start+0x136>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800803c:	d01d      	beq.n	800807a <HAL_TIM_PWM_Start+0x136>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a1f      	ldr	r2, [pc, #124]	@ (80080c0 <HAL_TIM_PWM_Start+0x17c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d018      	beq.n	800807a <HAL_TIM_PWM_Start+0x136>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a1d      	ldr	r2, [pc, #116]	@ (80080c4 <HAL_TIM_PWM_Start+0x180>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d013      	beq.n	800807a <HAL_TIM_PWM_Start+0x136>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a1c      	ldr	r2, [pc, #112]	@ (80080c8 <HAL_TIM_PWM_Start+0x184>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00e      	beq.n	800807a <HAL_TIM_PWM_Start+0x136>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a16      	ldr	r2, [pc, #88]	@ (80080bc <HAL_TIM_PWM_Start+0x178>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d009      	beq.n	800807a <HAL_TIM_PWM_Start+0x136>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a18      	ldr	r2, [pc, #96]	@ (80080cc <HAL_TIM_PWM_Start+0x188>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d004      	beq.n	800807a <HAL_TIM_PWM_Start+0x136>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a16      	ldr	r2, [pc, #88]	@ (80080d0 <HAL_TIM_PWM_Start+0x18c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d111      	bne.n	800809e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b06      	cmp	r3, #6
 800808a:	d010      	beq.n	80080ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0201 	orr.w	r2, r2, #1
 800809a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809c:	e007      	b.n	80080ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 0201 	orr.w	r2, r2, #1
 80080ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40010000 	.word	0x40010000
 80080bc:	40010400 	.word	0x40010400
 80080c0:	40000400 	.word	0x40000400
 80080c4:	40000800 	.word	0x40000800
 80080c8:	40000c00 	.word	0x40000c00
 80080cc:	40014000 	.word	0x40014000
 80080d0:	40001800 	.word	0x40001800

080080d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e041      	b.n	800816a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d106      	bne.n	8008100 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f839 	bl	8008172 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3304      	adds	r3, #4
 8008110:	4619      	mov	r1, r3
 8008112:	4610      	mov	r0, r2
 8008114:	f000 fd7e 	bl	8008c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800817a:	bf00      	nop
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
	...

08008188 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d104      	bne.n	80081a6 <HAL_TIM_IC_Start_IT+0x1e>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	e013      	b.n	80081ce <HAL_TIM_IC_Start_IT+0x46>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b04      	cmp	r3, #4
 80081aa:	d104      	bne.n	80081b6 <HAL_TIM_IC_Start_IT+0x2e>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	e00b      	b.n	80081ce <HAL_TIM_IC_Start_IT+0x46>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d104      	bne.n	80081c6 <HAL_TIM_IC_Start_IT+0x3e>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	e003      	b.n	80081ce <HAL_TIM_IC_Start_IT+0x46>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d104      	bne.n	80081e0 <HAL_TIM_IC_Start_IT+0x58>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	e013      	b.n	8008208 <HAL_TIM_IC_Start_IT+0x80>
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d104      	bne.n	80081f0 <HAL_TIM_IC_Start_IT+0x68>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	e00b      	b.n	8008208 <HAL_TIM_IC_Start_IT+0x80>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2b08      	cmp	r3, #8
 80081f4:	d104      	bne.n	8008200 <HAL_TIM_IC_Start_IT+0x78>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	e003      	b.n	8008208 <HAL_TIM_IC_Start_IT+0x80>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008206:	b2db      	uxtb	r3, r3
 8008208:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d102      	bne.n	8008216 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008210:	7b7b      	ldrb	r3, [r7, #13]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d001      	beq.n	800821a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e0cc      	b.n	80083b4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d104      	bne.n	800822a <HAL_TIM_IC_Start_IT+0xa2>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2202      	movs	r2, #2
 8008224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008228:	e013      	b.n	8008252 <HAL_TIM_IC_Start_IT+0xca>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b04      	cmp	r3, #4
 800822e:	d104      	bne.n	800823a <HAL_TIM_IC_Start_IT+0xb2>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008238:	e00b      	b.n	8008252 <HAL_TIM_IC_Start_IT+0xca>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b08      	cmp	r3, #8
 800823e:	d104      	bne.n	800824a <HAL_TIM_IC_Start_IT+0xc2>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008248:	e003      	b.n	8008252 <HAL_TIM_IC_Start_IT+0xca>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2202      	movs	r2, #2
 800824e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d104      	bne.n	8008262 <HAL_TIM_IC_Start_IT+0xda>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008260:	e013      	b.n	800828a <HAL_TIM_IC_Start_IT+0x102>
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b04      	cmp	r3, #4
 8008266:	d104      	bne.n	8008272 <HAL_TIM_IC_Start_IT+0xea>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2202      	movs	r2, #2
 800826c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008270:	e00b      	b.n	800828a <HAL_TIM_IC_Start_IT+0x102>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b08      	cmp	r3, #8
 8008276:	d104      	bne.n	8008282 <HAL_TIM_IC_Start_IT+0xfa>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008280:	e003      	b.n	800828a <HAL_TIM_IC_Start_IT+0x102>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2202      	movs	r2, #2
 8008286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b0c      	cmp	r3, #12
 800828e:	d841      	bhi.n	8008314 <HAL_TIM_IC_Start_IT+0x18c>
 8008290:	a201      	add	r2, pc, #4	@ (adr r2, 8008298 <HAL_TIM_IC_Start_IT+0x110>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	080082cd 	.word	0x080082cd
 800829c:	08008315 	.word	0x08008315
 80082a0:	08008315 	.word	0x08008315
 80082a4:	08008315 	.word	0x08008315
 80082a8:	080082df 	.word	0x080082df
 80082ac:	08008315 	.word	0x08008315
 80082b0:	08008315 	.word	0x08008315
 80082b4:	08008315 	.word	0x08008315
 80082b8:	080082f1 	.word	0x080082f1
 80082bc:	08008315 	.word	0x08008315
 80082c0:	08008315 	.word	0x08008315
 80082c4:	08008315 	.word	0x08008315
 80082c8:	08008303 	.word	0x08008303
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68da      	ldr	r2, [r3, #12]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f042 0202 	orr.w	r2, r2, #2
 80082da:	60da      	str	r2, [r3, #12]
      break;
 80082dc:	e01d      	b.n	800831a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f042 0204 	orr.w	r2, r2, #4
 80082ec:	60da      	str	r2, [r3, #12]
      break;
 80082ee:	e014      	b.n	800831a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0208 	orr.w	r2, r2, #8
 80082fe:	60da      	str	r2, [r3, #12]
      break;
 8008300:	e00b      	b.n	800831a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0210 	orr.w	r2, r2, #16
 8008310:	60da      	str	r2, [r3, #12]
      break;
 8008312:	e002      	b.n	800831a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	73fb      	strb	r3, [r7, #15]
      break;
 8008318:	bf00      	nop
  }

  if (status == HAL_OK)
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d148      	bne.n	80083b2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2201      	movs	r2, #1
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	4618      	mov	r0, r3
 800832a:	f001 f88d 	bl	8009448 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a22      	ldr	r2, [pc, #136]	@ (80083bc <HAL_TIM_IC_Start_IT+0x234>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d022      	beq.n	800837e <HAL_TIM_IC_Start_IT+0x1f6>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008340:	d01d      	beq.n	800837e <HAL_TIM_IC_Start_IT+0x1f6>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a1e      	ldr	r2, [pc, #120]	@ (80083c0 <HAL_TIM_IC_Start_IT+0x238>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d018      	beq.n	800837e <HAL_TIM_IC_Start_IT+0x1f6>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a1c      	ldr	r2, [pc, #112]	@ (80083c4 <HAL_TIM_IC_Start_IT+0x23c>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d013      	beq.n	800837e <HAL_TIM_IC_Start_IT+0x1f6>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a1b      	ldr	r2, [pc, #108]	@ (80083c8 <HAL_TIM_IC_Start_IT+0x240>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d00e      	beq.n	800837e <HAL_TIM_IC_Start_IT+0x1f6>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a19      	ldr	r2, [pc, #100]	@ (80083cc <HAL_TIM_IC_Start_IT+0x244>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d009      	beq.n	800837e <HAL_TIM_IC_Start_IT+0x1f6>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a18      	ldr	r2, [pc, #96]	@ (80083d0 <HAL_TIM_IC_Start_IT+0x248>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d004      	beq.n	800837e <HAL_TIM_IC_Start_IT+0x1f6>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a16      	ldr	r2, [pc, #88]	@ (80083d4 <HAL_TIM_IC_Start_IT+0x24c>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d111      	bne.n	80083a2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f003 0307 	and.w	r3, r3, #7
 8008388:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2b06      	cmp	r3, #6
 800838e:	d010      	beq.n	80083b2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f042 0201 	orr.w	r2, r2, #1
 800839e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083a0:	e007      	b.n	80083b2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f042 0201 	orr.w	r2, r2, #1
 80083b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	40010000 	.word	0x40010000
 80083c0:	40000400 	.word	0x40000400
 80083c4:	40000800 	.word	0x40000800
 80083c8:	40000c00 	.word	0x40000c00
 80083cc:	40010400 	.word	0x40010400
 80083d0:	40014000 	.word	0x40014000
 80083d4:	40001800 	.word	0x40001800

080083d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e097      	b.n	800851c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d106      	bne.n	8008406 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7fb fead 	bl	8004160 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2202      	movs	r2, #2
 800840a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	6812      	ldr	r2, [r2, #0]
 8008418:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800841c:	f023 0307 	bic.w	r3, r3, #7
 8008420:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3304      	adds	r3, #4
 800842a:	4619      	mov	r1, r3
 800842c:	4610      	mov	r0, r2
 800842e:	f000 fbf1 	bl	8008c14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	4313      	orrs	r3, r2
 8008452:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800845a:	f023 0303 	bic.w	r3, r3, #3
 800845e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	021b      	lsls	r3, r3, #8
 800846a:	4313      	orrs	r3, r2
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008478:	f023 030c 	bic.w	r3, r3, #12
 800847c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008484:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	68da      	ldr	r2, [r3, #12]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	69db      	ldr	r3, [r3, #28]
 8008492:	021b      	lsls	r3, r3, #8
 8008494:	4313      	orrs	r3, r2
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	4313      	orrs	r3, r2
 800849a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	011a      	lsls	r2, r3, #4
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	031b      	lsls	r3, r3, #12
 80084a8:	4313      	orrs	r3, r2
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80084b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80084be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	4313      	orrs	r3, r2
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b00      	cmp	r3, #0
 8008544:	d020      	beq.n	8008588 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f003 0302 	and.w	r3, r3, #2
 800854c:	2b00      	cmp	r3, #0
 800854e:	d01b      	beq.n	8008588 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f06f 0202 	mvn.w	r2, #2
 8008558:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7f9 fb38 	bl	8001be4 <HAL_TIM_IC_CaptureCallback>
 8008574:	e005      	b.n	8008582 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fb2e 	bl	8008bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fb35 	bl	8008bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	f003 0304 	and.w	r3, r3, #4
 800858e:	2b00      	cmp	r3, #0
 8008590:	d020      	beq.n	80085d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01b      	beq.n	80085d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f06f 0204 	mvn.w	r2, #4
 80085a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2202      	movs	r2, #2
 80085aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7f9 fb12 	bl	8001be4 <HAL_TIM_IC_CaptureCallback>
 80085c0:	e005      	b.n	80085ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fb08 	bl	8008bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fb0f 	bl	8008bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	f003 0308 	and.w	r3, r3, #8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d020      	beq.n	8008620 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f003 0308 	and.w	r3, r3, #8
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d01b      	beq.n	8008620 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f06f 0208 	mvn.w	r2, #8
 80085f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2204      	movs	r2, #4
 80085f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	f003 0303 	and.w	r3, r3, #3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7f9 faec 	bl	8001be4 <HAL_TIM_IC_CaptureCallback>
 800860c:	e005      	b.n	800861a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fae2 	bl	8008bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fae9 	bl	8008bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f003 0310 	and.w	r3, r3, #16
 8008626:	2b00      	cmp	r3, #0
 8008628:	d020      	beq.n	800866c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f003 0310 	and.w	r3, r3, #16
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01b      	beq.n	800866c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f06f 0210 	mvn.w	r2, #16
 800863c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2208      	movs	r2, #8
 8008642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800864e:	2b00      	cmp	r3, #0
 8008650:	d003      	beq.n	800865a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7f9 fac6 	bl	8001be4 <HAL_TIM_IC_CaptureCallback>
 8008658:	e005      	b.n	8008666 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fabc 	bl	8008bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fac3 	bl	8008bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00c      	beq.n	8008690 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f003 0301 	and.w	r3, r3, #1
 800867c:	2b00      	cmp	r3, #0
 800867e:	d007      	beq.n	8008690 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f06f 0201 	mvn.w	r2, #1
 8008688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7fb fb86 	bl	8003d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00c      	beq.n	80086b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d007      	beq.n	80086b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80086ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 ff76 	bl	80095a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00c      	beq.n	80086d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d007      	beq.n	80086d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80086d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fa94 	bl	8008c00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f003 0320 	and.w	r3, r3, #32
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00c      	beq.n	80086fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f003 0320 	and.w	r3, r3, #32
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d007      	beq.n	80086fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f06f 0220 	mvn.w	r2, #32
 80086f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 ff48 	bl	800958c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086fc:	bf00      	nop
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800871a:	2b01      	cmp	r3, #1
 800871c:	d101      	bne.n	8008722 <HAL_TIM_IC_ConfigChannel+0x1e>
 800871e:	2302      	movs	r3, #2
 8008720:	e088      	b.n	8008834 <HAL_TIM_IC_ConfigChannel+0x130>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d11b      	bne.n	8008768 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008740:	f000 fcbe 	bl	80090c0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	699a      	ldr	r2, [r3, #24]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 020c 	bic.w	r2, r2, #12
 8008752:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6999      	ldr	r1, [r3, #24]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	619a      	str	r2, [r3, #24]
 8008766:	e060      	b.n	800882a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b04      	cmp	r3, #4
 800876c:	d11c      	bne.n	80087a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800877e:	f000 fd42 	bl	8009206 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	699a      	ldr	r2, [r3, #24]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008790:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6999      	ldr	r1, [r3, #24]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	021a      	lsls	r2, r3, #8
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	619a      	str	r2, [r3, #24]
 80087a6:	e040      	b.n	800882a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b08      	cmp	r3, #8
 80087ac:	d11b      	bne.n	80087e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80087be:	f000 fd8f 	bl	80092e0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	69da      	ldr	r2, [r3, #28]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f022 020c 	bic.w	r2, r2, #12
 80087d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	69d9      	ldr	r1, [r3, #28]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	61da      	str	r2, [r3, #28]
 80087e4:	e021      	b.n	800882a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2b0c      	cmp	r3, #12
 80087ea:	d11c      	bne.n	8008826 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80087fc:	f000 fdac 	bl	8009358 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69da      	ldr	r2, [r3, #28]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800880e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	69d9      	ldr	r1, [r3, #28]
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	021a      	lsls	r2, r3, #8
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	430a      	orrs	r2, r1
 8008822:	61da      	str	r2, [r3, #28]
 8008824:	e001      	b.n	800882a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008832:	7dfb      	ldrb	r3, [r7, #23]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008852:	2b01      	cmp	r3, #1
 8008854:	d101      	bne.n	800885a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008856:	2302      	movs	r3, #2
 8008858:	e0ae      	b.n	80089b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b0c      	cmp	r3, #12
 8008866:	f200 809f 	bhi.w	80089a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800886a:	a201      	add	r2, pc, #4	@ (adr r2, 8008870 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800886c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008870:	080088a5 	.word	0x080088a5
 8008874:	080089a9 	.word	0x080089a9
 8008878:	080089a9 	.word	0x080089a9
 800887c:	080089a9 	.word	0x080089a9
 8008880:	080088e5 	.word	0x080088e5
 8008884:	080089a9 	.word	0x080089a9
 8008888:	080089a9 	.word	0x080089a9
 800888c:	080089a9 	.word	0x080089a9
 8008890:	08008927 	.word	0x08008927
 8008894:	080089a9 	.word	0x080089a9
 8008898:	080089a9 	.word	0x080089a9
 800889c:	080089a9 	.word	0x080089a9
 80088a0:	08008967 	.word	0x08008967
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 fa58 	bl	8008d60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699a      	ldr	r2, [r3, #24]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f042 0208 	orr.w	r2, r2, #8
 80088be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	699a      	ldr	r2, [r3, #24]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0204 	bic.w	r2, r2, #4
 80088ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6999      	ldr	r1, [r3, #24]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	691a      	ldr	r2, [r3, #16]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	619a      	str	r2, [r3, #24]
      break;
 80088e2:	e064      	b.n	80089ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68b9      	ldr	r1, [r7, #8]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 faa8 	bl	8008e40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	699a      	ldr	r2, [r3, #24]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	699a      	ldr	r2, [r3, #24]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800890e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6999      	ldr	r1, [r3, #24]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	021a      	lsls	r2, r3, #8
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	430a      	orrs	r2, r1
 8008922:	619a      	str	r2, [r3, #24]
      break;
 8008924:	e043      	b.n	80089ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68b9      	ldr	r1, [r7, #8]
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fafd 	bl	8008f2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	69da      	ldr	r2, [r3, #28]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f042 0208 	orr.w	r2, r2, #8
 8008940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	69da      	ldr	r2, [r3, #28]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 0204 	bic.w	r2, r2, #4
 8008950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	69d9      	ldr	r1, [r3, #28]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	691a      	ldr	r2, [r3, #16]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	430a      	orrs	r2, r1
 8008962:	61da      	str	r2, [r3, #28]
      break;
 8008964:	e023      	b.n	80089ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68b9      	ldr	r1, [r7, #8]
 800896c:	4618      	mov	r0, r3
 800896e:	f000 fb51 	bl	8009014 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	69da      	ldr	r2, [r3, #28]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	69da      	ldr	r2, [r3, #28]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	69d9      	ldr	r1, [r3, #28]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	021a      	lsls	r2, r3, #8
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	61da      	str	r2, [r3, #28]
      break;
 80089a6:	e002      	b.n	80089ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	75fb      	strb	r3, [r7, #23]
      break;
 80089ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d101      	bne.n	80089dc <HAL_TIM_ConfigClockSource+0x1c>
 80089d8:	2302      	movs	r3, #2
 80089da:	e0b4      	b.n	8008b46 <HAL_TIM_ConfigClockSource+0x186>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80089fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a14:	d03e      	beq.n	8008a94 <HAL_TIM_ConfigClockSource+0xd4>
 8008a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a1a:	f200 8087 	bhi.w	8008b2c <HAL_TIM_ConfigClockSource+0x16c>
 8008a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a22:	f000 8086 	beq.w	8008b32 <HAL_TIM_ConfigClockSource+0x172>
 8008a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a2a:	d87f      	bhi.n	8008b2c <HAL_TIM_ConfigClockSource+0x16c>
 8008a2c:	2b70      	cmp	r3, #112	@ 0x70
 8008a2e:	d01a      	beq.n	8008a66 <HAL_TIM_ConfigClockSource+0xa6>
 8008a30:	2b70      	cmp	r3, #112	@ 0x70
 8008a32:	d87b      	bhi.n	8008b2c <HAL_TIM_ConfigClockSource+0x16c>
 8008a34:	2b60      	cmp	r3, #96	@ 0x60
 8008a36:	d050      	beq.n	8008ada <HAL_TIM_ConfigClockSource+0x11a>
 8008a38:	2b60      	cmp	r3, #96	@ 0x60
 8008a3a:	d877      	bhi.n	8008b2c <HAL_TIM_ConfigClockSource+0x16c>
 8008a3c:	2b50      	cmp	r3, #80	@ 0x50
 8008a3e:	d03c      	beq.n	8008aba <HAL_TIM_ConfigClockSource+0xfa>
 8008a40:	2b50      	cmp	r3, #80	@ 0x50
 8008a42:	d873      	bhi.n	8008b2c <HAL_TIM_ConfigClockSource+0x16c>
 8008a44:	2b40      	cmp	r3, #64	@ 0x40
 8008a46:	d058      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x13a>
 8008a48:	2b40      	cmp	r3, #64	@ 0x40
 8008a4a:	d86f      	bhi.n	8008b2c <HAL_TIM_ConfigClockSource+0x16c>
 8008a4c:	2b30      	cmp	r3, #48	@ 0x30
 8008a4e:	d064      	beq.n	8008b1a <HAL_TIM_ConfigClockSource+0x15a>
 8008a50:	2b30      	cmp	r3, #48	@ 0x30
 8008a52:	d86b      	bhi.n	8008b2c <HAL_TIM_ConfigClockSource+0x16c>
 8008a54:	2b20      	cmp	r3, #32
 8008a56:	d060      	beq.n	8008b1a <HAL_TIM_ConfigClockSource+0x15a>
 8008a58:	2b20      	cmp	r3, #32
 8008a5a:	d867      	bhi.n	8008b2c <HAL_TIM_ConfigClockSource+0x16c>
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d05c      	beq.n	8008b1a <HAL_TIM_ConfigClockSource+0x15a>
 8008a60:	2b10      	cmp	r3, #16
 8008a62:	d05a      	beq.n	8008b1a <HAL_TIM_ConfigClockSource+0x15a>
 8008a64:	e062      	b.n	8008b2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a76:	f000 fcc7 	bl	8009408 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	609a      	str	r2, [r3, #8]
      break;
 8008a92:	e04f      	b.n	8008b34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008aa4:	f000 fcb0 	bl	8009408 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689a      	ldr	r2, [r3, #8]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ab6:	609a      	str	r2, [r3, #8]
      break;
 8008ab8:	e03c      	b.n	8008b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	f000 fb6e 	bl	80091a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2150      	movs	r1, #80	@ 0x50
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 fc7d 	bl	80093d2 <TIM_ITRx_SetConfig>
      break;
 8008ad8:	e02c      	b.n	8008b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f000 fbca 	bl	8009280 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2160      	movs	r1, #96	@ 0x60
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 fc6d 	bl	80093d2 <TIM_ITRx_SetConfig>
      break;
 8008af8:	e01c      	b.n	8008b34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b06:	461a      	mov	r2, r3
 8008b08:	f000 fb4e 	bl	80091a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2140      	movs	r1, #64	@ 0x40
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 fc5d 	bl	80093d2 <TIM_ITRx_SetConfig>
      break;
 8008b18:	e00c      	b.n	8008b34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4619      	mov	r1, r3
 8008b24:	4610      	mov	r0, r2
 8008b26:	f000 fc54 	bl	80093d2 <TIM_ITRx_SetConfig>
      break;
 8008b2a:	e003      	b.n	8008b34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b30:	e000      	b.n	8008b34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b0c      	cmp	r3, #12
 8008b62:	d831      	bhi.n	8008bc8 <HAL_TIM_ReadCapturedValue+0x78>
 8008b64:	a201      	add	r2, pc, #4	@ (adr r2, 8008b6c <HAL_TIM_ReadCapturedValue+0x1c>)
 8008b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6a:	bf00      	nop
 8008b6c:	08008ba1 	.word	0x08008ba1
 8008b70:	08008bc9 	.word	0x08008bc9
 8008b74:	08008bc9 	.word	0x08008bc9
 8008b78:	08008bc9 	.word	0x08008bc9
 8008b7c:	08008bab 	.word	0x08008bab
 8008b80:	08008bc9 	.word	0x08008bc9
 8008b84:	08008bc9 	.word	0x08008bc9
 8008b88:	08008bc9 	.word	0x08008bc9
 8008b8c:	08008bb5 	.word	0x08008bb5
 8008b90:	08008bc9 	.word	0x08008bc9
 8008b94:	08008bc9 	.word	0x08008bc9
 8008b98:	08008bc9 	.word	0x08008bc9
 8008b9c:	08008bbf 	.word	0x08008bbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ba6:	60fb      	str	r3, [r7, #12]

      break;
 8008ba8:	e00f      	b.n	8008bca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb0:	60fb      	str	r3, [r7, #12]

      break;
 8008bb2:	e00a      	b.n	8008bca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bba:	60fb      	str	r3, [r7, #12]

      break;
 8008bbc:	e005      	b.n	8008bca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc4:	60fb      	str	r3, [r7, #12]

      break;
 8008bc6:	e000      	b.n	8008bca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008bc8:	bf00      	nop
  }

  return tmpreg;
 8008bca:	68fb      	ldr	r3, [r7, #12]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a43      	ldr	r2, [pc, #268]	@ (8008d34 <TIM_Base_SetConfig+0x120>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d013      	beq.n	8008c54 <TIM_Base_SetConfig+0x40>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c32:	d00f      	beq.n	8008c54 <TIM_Base_SetConfig+0x40>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a40      	ldr	r2, [pc, #256]	@ (8008d38 <TIM_Base_SetConfig+0x124>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d00b      	beq.n	8008c54 <TIM_Base_SetConfig+0x40>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a3f      	ldr	r2, [pc, #252]	@ (8008d3c <TIM_Base_SetConfig+0x128>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d007      	beq.n	8008c54 <TIM_Base_SetConfig+0x40>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a3e      	ldr	r2, [pc, #248]	@ (8008d40 <TIM_Base_SetConfig+0x12c>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d003      	beq.n	8008c54 <TIM_Base_SetConfig+0x40>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a3d      	ldr	r2, [pc, #244]	@ (8008d44 <TIM_Base_SetConfig+0x130>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d108      	bne.n	8008c66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a32      	ldr	r2, [pc, #200]	@ (8008d34 <TIM_Base_SetConfig+0x120>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d02b      	beq.n	8008cc6 <TIM_Base_SetConfig+0xb2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c74:	d027      	beq.n	8008cc6 <TIM_Base_SetConfig+0xb2>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a2f      	ldr	r2, [pc, #188]	@ (8008d38 <TIM_Base_SetConfig+0x124>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d023      	beq.n	8008cc6 <TIM_Base_SetConfig+0xb2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a2e      	ldr	r2, [pc, #184]	@ (8008d3c <TIM_Base_SetConfig+0x128>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d01f      	beq.n	8008cc6 <TIM_Base_SetConfig+0xb2>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a2d      	ldr	r2, [pc, #180]	@ (8008d40 <TIM_Base_SetConfig+0x12c>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d01b      	beq.n	8008cc6 <TIM_Base_SetConfig+0xb2>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a2c      	ldr	r2, [pc, #176]	@ (8008d44 <TIM_Base_SetConfig+0x130>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d017      	beq.n	8008cc6 <TIM_Base_SetConfig+0xb2>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a2b      	ldr	r2, [pc, #172]	@ (8008d48 <TIM_Base_SetConfig+0x134>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d013      	beq.n	8008cc6 <TIM_Base_SetConfig+0xb2>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8008d4c <TIM_Base_SetConfig+0x138>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d00f      	beq.n	8008cc6 <TIM_Base_SetConfig+0xb2>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a29      	ldr	r2, [pc, #164]	@ (8008d50 <TIM_Base_SetConfig+0x13c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d00b      	beq.n	8008cc6 <TIM_Base_SetConfig+0xb2>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a28      	ldr	r2, [pc, #160]	@ (8008d54 <TIM_Base_SetConfig+0x140>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d007      	beq.n	8008cc6 <TIM_Base_SetConfig+0xb2>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a27      	ldr	r2, [pc, #156]	@ (8008d58 <TIM_Base_SetConfig+0x144>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d003      	beq.n	8008cc6 <TIM_Base_SetConfig+0xb2>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a26      	ldr	r2, [pc, #152]	@ (8008d5c <TIM_Base_SetConfig+0x148>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d108      	bne.n	8008cd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	689a      	ldr	r2, [r3, #8]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8008d34 <TIM_Base_SetConfig+0x120>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d003      	beq.n	8008d06 <TIM_Base_SetConfig+0xf2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a10      	ldr	r2, [pc, #64]	@ (8008d44 <TIM_Base_SetConfig+0x130>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d103      	bne.n	8008d0e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	691a      	ldr	r2, [r3, #16]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f043 0204 	orr.w	r2, r3, #4
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	601a      	str	r2, [r3, #0]
}
 8008d26:	bf00      	nop
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	40010000 	.word	0x40010000
 8008d38:	40000400 	.word	0x40000400
 8008d3c:	40000800 	.word	0x40000800
 8008d40:	40000c00 	.word	0x40000c00
 8008d44:	40010400 	.word	0x40010400
 8008d48:	40014000 	.word	0x40014000
 8008d4c:	40014400 	.word	0x40014400
 8008d50:	40014800 	.word	0x40014800
 8008d54:	40001800 	.word	0x40001800
 8008d58:	40001c00 	.word	0x40001c00
 8008d5c:	40002000 	.word	0x40002000

08008d60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a1b      	ldr	r3, [r3, #32]
 8008d74:	f023 0201 	bic.w	r2, r3, #1
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f023 0303 	bic.w	r3, r3, #3
 8008d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f023 0302 	bic.w	r3, r3, #2
 8008da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a20      	ldr	r2, [pc, #128]	@ (8008e38 <TIM_OC1_SetConfig+0xd8>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d003      	beq.n	8008dc4 <TIM_OC1_SetConfig+0x64>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8008e3c <TIM_OC1_SetConfig+0xdc>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d10c      	bne.n	8008dde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f023 0308 	bic.w	r3, r3, #8
 8008dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f023 0304 	bic.w	r3, r3, #4
 8008ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a15      	ldr	r2, [pc, #84]	@ (8008e38 <TIM_OC1_SetConfig+0xd8>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d003      	beq.n	8008dee <TIM_OC1_SetConfig+0x8e>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a14      	ldr	r2, [pc, #80]	@ (8008e3c <TIM_OC1_SetConfig+0xdc>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d111      	bne.n	8008e12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	621a      	str	r2, [r3, #32]
}
 8008e2c:	bf00      	nop
 8008e2e:	371c      	adds	r7, #28
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	40010000 	.word	0x40010000
 8008e3c:	40010400 	.word	0x40010400

08008e40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b087      	sub	sp, #28
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	f023 0210 	bic.w	r2, r3, #16
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f023 0320 	bic.w	r3, r3, #32
 8008e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	011b      	lsls	r3, r3, #4
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a22      	ldr	r2, [pc, #136]	@ (8008f24 <TIM_OC2_SetConfig+0xe4>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d003      	beq.n	8008ea8 <TIM_OC2_SetConfig+0x68>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a21      	ldr	r2, [pc, #132]	@ (8008f28 <TIM_OC2_SetConfig+0xe8>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d10d      	bne.n	8008ec4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	011b      	lsls	r3, r3, #4
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ec2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a17      	ldr	r2, [pc, #92]	@ (8008f24 <TIM_OC2_SetConfig+0xe4>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d003      	beq.n	8008ed4 <TIM_OC2_SetConfig+0x94>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a16      	ldr	r2, [pc, #88]	@ (8008f28 <TIM_OC2_SetConfig+0xe8>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d113      	bne.n	8008efc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008eda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	621a      	str	r2, [r3, #32]
}
 8008f16:	bf00      	nop
 8008f18:	371c      	adds	r7, #28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	40010000 	.word	0x40010000
 8008f28:	40010400 	.word	0x40010400

08008f2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a1b      	ldr	r3, [r3, #32]
 8008f40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f023 0303 	bic.w	r3, r3, #3
 8008f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	021b      	lsls	r3, r3, #8
 8008f7c:	697a      	ldr	r2, [r7, #20]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a21      	ldr	r2, [pc, #132]	@ (800900c <TIM_OC3_SetConfig+0xe0>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d003      	beq.n	8008f92 <TIM_OC3_SetConfig+0x66>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a20      	ldr	r2, [pc, #128]	@ (8009010 <TIM_OC3_SetConfig+0xe4>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d10d      	bne.n	8008fae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	021b      	lsls	r3, r3, #8
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a16      	ldr	r2, [pc, #88]	@ (800900c <TIM_OC3_SetConfig+0xe0>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d003      	beq.n	8008fbe <TIM_OC3_SetConfig+0x92>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a15      	ldr	r2, [pc, #84]	@ (8009010 <TIM_OC3_SetConfig+0xe4>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d113      	bne.n	8008fe6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	011b      	lsls	r3, r3, #4
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	011b      	lsls	r3, r3, #4
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	621a      	str	r2, [r3, #32]
}
 8009000:	bf00      	nop
 8009002:	371c      	adds	r7, #28
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	40010000 	.word	0x40010000
 8009010:	40010400 	.word	0x40010400

08009014 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a1b      	ldr	r3, [r3, #32]
 8009028:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800904a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	021b      	lsls	r3, r3, #8
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800905e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	031b      	lsls	r3, r3, #12
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	4313      	orrs	r3, r2
 800906a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a12      	ldr	r2, [pc, #72]	@ (80090b8 <TIM_OC4_SetConfig+0xa4>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d003      	beq.n	800907c <TIM_OC4_SetConfig+0x68>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a11      	ldr	r2, [pc, #68]	@ (80090bc <TIM_OC4_SetConfig+0xa8>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d109      	bne.n	8009090 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	019b      	lsls	r3, r3, #6
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	4313      	orrs	r3, r2
 800908e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	621a      	str	r2, [r3, #32]
}
 80090aa:	bf00      	nop
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	40010000 	.word	0x40010000
 80090bc:	40010400 	.word	0x40010400

080090c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b087      	sub	sp, #28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
 80090cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	f023 0201 	bic.w	r2, r3, #1
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	4a28      	ldr	r2, [pc, #160]	@ (800918c <TIM_TI1_SetConfig+0xcc>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d01b      	beq.n	8009126 <TIM_TI1_SetConfig+0x66>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090f4:	d017      	beq.n	8009126 <TIM_TI1_SetConfig+0x66>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4a25      	ldr	r2, [pc, #148]	@ (8009190 <TIM_TI1_SetConfig+0xd0>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d013      	beq.n	8009126 <TIM_TI1_SetConfig+0x66>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	4a24      	ldr	r2, [pc, #144]	@ (8009194 <TIM_TI1_SetConfig+0xd4>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d00f      	beq.n	8009126 <TIM_TI1_SetConfig+0x66>
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	4a23      	ldr	r2, [pc, #140]	@ (8009198 <TIM_TI1_SetConfig+0xd8>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d00b      	beq.n	8009126 <TIM_TI1_SetConfig+0x66>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	4a22      	ldr	r2, [pc, #136]	@ (800919c <TIM_TI1_SetConfig+0xdc>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d007      	beq.n	8009126 <TIM_TI1_SetConfig+0x66>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	4a21      	ldr	r2, [pc, #132]	@ (80091a0 <TIM_TI1_SetConfig+0xe0>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d003      	beq.n	8009126 <TIM_TI1_SetConfig+0x66>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	4a20      	ldr	r2, [pc, #128]	@ (80091a4 <TIM_TI1_SetConfig+0xe4>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d101      	bne.n	800912a <TIM_TI1_SetConfig+0x6a>
 8009126:	2301      	movs	r3, #1
 8009128:	e000      	b.n	800912c <TIM_TI1_SetConfig+0x6c>
 800912a:	2300      	movs	r3, #0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d008      	beq.n	8009142 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	f023 0303 	bic.w	r3, r3, #3
 8009136:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4313      	orrs	r3, r2
 800913e:	617b      	str	r3, [r7, #20]
 8009140:	e003      	b.n	800914a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f043 0301 	orr.w	r3, r3, #1
 8009148:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	011b      	lsls	r3, r3, #4
 8009156:	b2db      	uxtb	r3, r3
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	4313      	orrs	r3, r2
 800915c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	f023 030a 	bic.w	r3, r3, #10
 8009164:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	f003 030a 	and.w	r3, r3, #10
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	4313      	orrs	r3, r2
 8009170:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	621a      	str	r2, [r3, #32]
}
 800917e:	bf00      	nop
 8009180:	371c      	adds	r7, #28
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	40010000 	.word	0x40010000
 8009190:	40000400 	.word	0x40000400
 8009194:	40000800 	.word	0x40000800
 8009198:	40000c00 	.word	0x40000c00
 800919c:	40010400 	.word	0x40010400
 80091a0:	40014000 	.word	0x40014000
 80091a4:	40001800 	.word	0x40001800

080091a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6a1b      	ldr	r3, [r3, #32]
 80091b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	f023 0201 	bic.w	r2, r3, #1
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	011b      	lsls	r3, r3, #4
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	4313      	orrs	r3, r2
 80091dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f023 030a 	bic.w	r3, r3, #10
 80091e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	621a      	str	r2, [r3, #32]
}
 80091fa:	bf00      	nop
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009206:	b480      	push	{r7}
 8009208:	b087      	sub	sp, #28
 800920a:	af00      	add	r7, sp, #0
 800920c:	60f8      	str	r0, [r7, #12]
 800920e:	60b9      	str	r1, [r7, #8]
 8009210:	607a      	str	r2, [r7, #4]
 8009212:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6a1b      	ldr	r3, [r3, #32]
 800921e:	f023 0210 	bic.w	r2, r3, #16
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	021b      	lsls	r3, r3, #8
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	4313      	orrs	r3, r2
 800923c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009244:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	031b      	lsls	r3, r3, #12
 800924a:	b29b      	uxth	r3, r3
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	4313      	orrs	r3, r2
 8009250:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009258:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	011b      	lsls	r3, r3, #4
 800925e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	4313      	orrs	r3, r2
 8009266:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	621a      	str	r2, [r3, #32]
}
 8009274:	bf00      	nop
 8009276:	371c      	adds	r7, #28
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009280:	b480      	push	{r7}
 8009282:	b087      	sub	sp, #28
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6a1b      	ldr	r3, [r3, #32]
 8009290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	f023 0210 	bic.w	r2, r3, #16
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	031b      	lsls	r3, r3, #12
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	011b      	lsls	r3, r3, #4
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	697a      	ldr	r2, [r7, #20]
 80092d2:	621a      	str	r2, [r3, #32]
}
 80092d4:	bf00      	nop
 80092d6:	371c      	adds	r7, #28
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
 80092ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	f023 0303 	bic.w	r3, r3, #3
 800930c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4313      	orrs	r3, r2
 8009314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800931c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	011b      	lsls	r3, r3, #4
 8009322:	b2db      	uxtb	r3, r3
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	4313      	orrs	r3, r2
 8009328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009330:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	021b      	lsls	r3, r3, #8
 8009336:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	4313      	orrs	r3, r2
 800933e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	621a      	str	r2, [r3, #32]
}
 800934c:	bf00      	nop
 800934e:	371c      	adds	r7, #28
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a1b      	ldr	r3, [r3, #32]
 800936a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6a1b      	ldr	r3, [r3, #32]
 8009370:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	69db      	ldr	r3, [r3, #28]
 800937c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009384:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	021b      	lsls	r3, r3, #8
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	4313      	orrs	r3, r2
 800938e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009396:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	031b      	lsls	r3, r3, #12
 800939c:	b29b      	uxth	r3, r3
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80093aa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	031b      	lsls	r3, r3, #12
 80093b0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	621a      	str	r2, [r3, #32]
}
 80093c6:	bf00      	nop
 80093c8:	371c      	adds	r7, #28
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b085      	sub	sp, #20
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	f043 0307 	orr.w	r3, r3, #7
 80093f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	609a      	str	r2, [r3, #8]
}
 80093fc:	bf00      	nop
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009408:	b480      	push	{r7}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009422:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	021a      	lsls	r2, r3, #8
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	431a      	orrs	r2, r3
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	4313      	orrs	r3, r2
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	4313      	orrs	r3, r2
 8009434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	609a      	str	r2, [r3, #8]
}
 800943c:	bf00      	nop
 800943e:	371c      	adds	r7, #28
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	f003 031f 	and.w	r3, r3, #31
 800945a:	2201      	movs	r2, #1
 800945c:	fa02 f303 	lsl.w	r3, r2, r3
 8009460:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6a1a      	ldr	r2, [r3, #32]
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	43db      	mvns	r3, r3
 800946a:	401a      	ands	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6a1a      	ldr	r2, [r3, #32]
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f003 031f 	and.w	r3, r3, #31
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	fa01 f303 	lsl.w	r3, r1, r3
 8009480:	431a      	orrs	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	621a      	str	r2, [r3, #32]
}
 8009486:	bf00      	nop
 8009488:	371c      	adds	r7, #28
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
	...

08009494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d101      	bne.n	80094ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094a8:	2302      	movs	r3, #2
 80094aa:	e05a      	b.n	8009562 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2202      	movs	r2, #2
 80094b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	4313      	orrs	r3, r2
 80094dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a21      	ldr	r2, [pc, #132]	@ (8009570 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d022      	beq.n	8009536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094f8:	d01d      	beq.n	8009536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a1d      	ldr	r2, [pc, #116]	@ (8009574 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d018      	beq.n	8009536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a1b      	ldr	r2, [pc, #108]	@ (8009578 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d013      	beq.n	8009536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a1a      	ldr	r2, [pc, #104]	@ (800957c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d00e      	beq.n	8009536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a18      	ldr	r2, [pc, #96]	@ (8009580 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d009      	beq.n	8009536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a17      	ldr	r2, [pc, #92]	@ (8009584 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d004      	beq.n	8009536 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a15      	ldr	r2, [pc, #84]	@ (8009588 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d10c      	bne.n	8009550 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800953c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	4313      	orrs	r3, r2
 8009546:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	40010000 	.word	0x40010000
 8009574:	40000400 	.word	0x40000400
 8009578:	40000800 	.word	0x40000800
 800957c:	40000c00 	.word	0x40000c00
 8009580:	40010400 	.word	0x40010400
 8009584:	40014000 	.word	0x40014000
 8009588:	40001800 	.word	0x40001800

0800958c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e042      	b.n	800964c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d106      	bne.n	80095e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7fa fee4 	bl	80043a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2224      	movs	r2, #36	@ 0x24
 80095e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68da      	ldr	r2, [r3, #12]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fdd3 	bl	800a1a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	691a      	ldr	r2, [r3, #16]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800960c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	695a      	ldr	r2, [r3, #20]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800961c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68da      	ldr	r2, [r3, #12]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800962c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2220      	movs	r2, #32
 8009638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2220      	movs	r2, #32
 8009640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b08a      	sub	sp, #40	@ 0x28
 8009658:	af02      	add	r7, sp, #8
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	603b      	str	r3, [r7, #0]
 8009660:	4613      	mov	r3, r2
 8009662:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009664:	2300      	movs	r3, #0
 8009666:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b20      	cmp	r3, #32
 8009672:	d175      	bne.n	8009760 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <HAL_UART_Transmit+0x2c>
 800967a:	88fb      	ldrh	r3, [r7, #6]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d101      	bne.n	8009684 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e06e      	b.n	8009762 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2221      	movs	r2, #33	@ 0x21
 800968e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009692:	f7fb f8c7 	bl	8004824 <HAL_GetTick>
 8009696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	88fa      	ldrh	r2, [r7, #6]
 800969c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	88fa      	ldrh	r2, [r7, #6]
 80096a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ac:	d108      	bne.n	80096c0 <HAL_UART_Transmit+0x6c>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d104      	bne.n	80096c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80096b6:	2300      	movs	r3, #0
 80096b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	61bb      	str	r3, [r7, #24]
 80096be:	e003      	b.n	80096c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096c4:	2300      	movs	r3, #0
 80096c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80096c8:	e02e      	b.n	8009728 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2200      	movs	r2, #0
 80096d2:	2180      	movs	r1, #128	@ 0x80
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 fb37 	bl	8009d48 <UART_WaitOnFlagUntilTimeout>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2220      	movs	r2, #32
 80096e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80096e8:	2303      	movs	r3, #3
 80096ea:	e03a      	b.n	8009762 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10b      	bne.n	800970a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009700:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	3302      	adds	r3, #2
 8009706:	61bb      	str	r3, [r7, #24]
 8009708:	e007      	b.n	800971a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	781a      	ldrb	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	3301      	adds	r3, #1
 8009718:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800971e:	b29b      	uxth	r3, r3
 8009720:	3b01      	subs	r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800972c:	b29b      	uxth	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1cb      	bne.n	80096ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2200      	movs	r2, #0
 800973a:	2140      	movs	r1, #64	@ 0x40
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f000 fb03 	bl	8009d48 <UART_WaitOnFlagUntilTimeout>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d005      	beq.n	8009754 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2220      	movs	r2, #32
 800974c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	e006      	b.n	8009762 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2220      	movs	r2, #32
 8009758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	e000      	b.n	8009762 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009760:	2302      	movs	r3, #2
  }
}
 8009762:	4618      	mov	r0, r3
 8009764:	3720      	adds	r7, #32
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	60f8      	str	r0, [r7, #12]
 8009772:	60b9      	str	r1, [r7, #8]
 8009774:	4613      	mov	r3, r2
 8009776:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b20      	cmp	r3, #32
 8009782:	d112      	bne.n	80097aa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <HAL_UART_Receive_IT+0x26>
 800978a:	88fb      	ldrh	r3, [r7, #6]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e00b      	b.n	80097ac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800979a:	88fb      	ldrh	r3, [r7, #6]
 800979c:	461a      	mov	r2, r3
 800979e:	68b9      	ldr	r1, [r7, #8]
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f000 fb2a 	bl	8009dfa <UART_Start_Receive_IT>
 80097a6:	4603      	mov	r3, r0
 80097a8:	e000      	b.n	80097ac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80097aa:	2302      	movs	r3, #2
  }
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b0ba      	sub	sp, #232	@ 0xe8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80097da:	2300      	movs	r3, #0
 80097dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80097e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ea:	f003 030f 	and.w	r3, r3, #15
 80097ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80097f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10f      	bne.n	800981a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097fe:	f003 0320 	and.w	r3, r3, #32
 8009802:	2b00      	cmp	r3, #0
 8009804:	d009      	beq.n	800981a <HAL_UART_IRQHandler+0x66>
 8009806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800980a:	f003 0320 	and.w	r3, r3, #32
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fc07 	bl	800a026 <UART_Receive_IT>
      return;
 8009818:	e273      	b.n	8009d02 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800981a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 80de 	beq.w	80099e0 <HAL_UART_IRQHandler+0x22c>
 8009824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d106      	bne.n	800983e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009834:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 80d1 	beq.w	80099e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800983e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00b      	beq.n	8009862 <HAL_UART_IRQHandler+0xae>
 800984a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800984e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009852:	2b00      	cmp	r3, #0
 8009854:	d005      	beq.n	8009862 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800985a:	f043 0201 	orr.w	r2, r3, #1
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009866:	f003 0304 	and.w	r3, r3, #4
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00b      	beq.n	8009886 <HAL_UART_IRQHandler+0xd2>
 800986e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	d005      	beq.n	8009886 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800987e:	f043 0202 	orr.w	r2, r3, #2
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800988a:	f003 0302 	and.w	r3, r3, #2
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00b      	beq.n	80098aa <HAL_UART_IRQHandler+0xf6>
 8009892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d005      	beq.n	80098aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098a2:	f043 0204 	orr.w	r2, r3, #4
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80098aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ae:	f003 0308 	and.w	r3, r3, #8
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d011      	beq.n	80098da <HAL_UART_IRQHandler+0x126>
 80098b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098ba:	f003 0320 	and.w	r3, r3, #32
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d105      	bne.n	80098ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80098c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d005      	beq.n	80098da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098d2:	f043 0208 	orr.w	r2, r3, #8
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f000 820a 	beq.w	8009cf8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098e8:	f003 0320 	and.w	r3, r3, #32
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d008      	beq.n	8009902 <HAL_UART_IRQHandler+0x14e>
 80098f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098f4:	f003 0320 	and.w	r3, r3, #32
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d002      	beq.n	8009902 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fb92 	bl	800a026 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800990c:	2b40      	cmp	r3, #64	@ 0x40
 800990e:	bf0c      	ite	eq
 8009910:	2301      	moveq	r3, #1
 8009912:	2300      	movne	r3, #0
 8009914:	b2db      	uxtb	r3, r3
 8009916:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800991e:	f003 0308 	and.w	r3, r3, #8
 8009922:	2b00      	cmp	r3, #0
 8009924:	d103      	bne.n	800992e <HAL_UART_IRQHandler+0x17a>
 8009926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800992a:	2b00      	cmp	r3, #0
 800992c:	d04f      	beq.n	80099ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fa9d 	bl	8009e6e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800993e:	2b40      	cmp	r3, #64	@ 0x40
 8009940:	d141      	bne.n	80099c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3314      	adds	r3, #20
 8009948:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009958:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800995c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3314      	adds	r3, #20
 800996a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800996e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009972:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009976:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800997a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800997e:	e841 2300 	strex	r3, r2, [r1]
 8009982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1d9      	bne.n	8009942 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009992:	2b00      	cmp	r3, #0
 8009994:	d013      	beq.n	80099be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800999a:	4a8a      	ldr	r2, [pc, #552]	@ (8009bc4 <HAL_UART_IRQHandler+0x410>)
 800999c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fb fcc0 	bl	8005328 <HAL_DMA_Abort_IT>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d016      	beq.n	80099dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80099b8:	4610      	mov	r0, r2
 80099ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099bc:	e00e      	b.n	80099dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f9ac 	bl	8009d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099c4:	e00a      	b.n	80099dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f9a8 	bl	8009d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099cc:	e006      	b.n	80099dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f9a4 	bl	8009d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80099da:	e18d      	b.n	8009cf8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099dc:	bf00      	nop
    return;
 80099de:	e18b      	b.n	8009cf8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	f040 8167 	bne.w	8009cb8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80099ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ee:	f003 0310 	and.w	r3, r3, #16
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 8160 	beq.w	8009cb8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80099f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099fc:	f003 0310 	and.w	r3, r3, #16
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 8159 	beq.w	8009cb8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a06:	2300      	movs	r3, #0
 8009a08:	60bb      	str	r3, [r7, #8]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	60bb      	str	r3, [r7, #8]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	60bb      	str	r3, [r7, #8]
 8009a1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a26:	2b40      	cmp	r3, #64	@ 0x40
 8009a28:	f040 80ce 	bne.w	8009bc8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 80a9 	beq.w	8009b94 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	f080 80a2 	bcs.w	8009b94 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a62:	f000 8088 	beq.w	8009b76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	330c      	adds	r3, #12
 8009a6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009a80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	330c      	adds	r3, #12
 8009a8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009a92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009a96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009a9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009aa2:	e841 2300 	strex	r3, r2, [r1]
 8009aa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1d9      	bne.n	8009a66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	3314      	adds	r3, #20
 8009ab8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ac2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ac4:	f023 0301 	bic.w	r3, r3, #1
 8009ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3314      	adds	r3, #20
 8009ad2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ad6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009ada:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ade:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ae8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e1      	bne.n	8009ab2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3314      	adds	r3, #20
 8009af4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009afe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3314      	adds	r3, #20
 8009b0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009b12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009b14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009b18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009b1a:	e841 2300 	strex	r3, r2, [r1]
 8009b1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009b20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1e3      	bne.n	8009aee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2220      	movs	r2, #32
 8009b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	330c      	adds	r3, #12
 8009b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b3e:	e853 3f00 	ldrex	r3, [r3]
 8009b42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b46:	f023 0310 	bic.w	r3, r3, #16
 8009b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	330c      	adds	r3, #12
 8009b54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009b58:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009b5a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b60:	e841 2300 	strex	r3, r2, [r1]
 8009b64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1e3      	bne.n	8009b34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fb fb69 	bl	8005248 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f8cf 	bl	8009d30 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009b92:	e0b3      	b.n	8009cfc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	f040 80ad 	bne.w	8009cfc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ba6:	69db      	ldr	r3, [r3, #28]
 8009ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bac:	f040 80a6 	bne.w	8009cfc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f8b7 	bl	8009d30 <HAL_UARTEx_RxEventCallback>
      return;
 8009bc2:	e09b      	b.n	8009cfc <HAL_UART_IRQHandler+0x548>
 8009bc4:	08009f35 	.word	0x08009f35
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f000 808e 	beq.w	8009d00 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 8089 	beq.w	8009d00 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	330c      	adds	r3, #12
 8009bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf8:	e853 3f00 	ldrex	r3, [r3]
 8009bfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	330c      	adds	r3, #12
 8009c0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009c12:	647a      	str	r2, [r7, #68]	@ 0x44
 8009c14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c1a:	e841 2300 	strex	r3, r2, [r1]
 8009c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1e3      	bne.n	8009bee <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3314      	adds	r3, #20
 8009c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c30:	e853 3f00 	ldrex	r3, [r3]
 8009c34:	623b      	str	r3, [r7, #32]
   return(result);
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	f023 0301 	bic.w	r3, r3, #1
 8009c3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	3314      	adds	r3, #20
 8009c46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009c4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c52:	e841 2300 	strex	r3, r2, [r1]
 8009c56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1e3      	bne.n	8009c26 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2220      	movs	r2, #32
 8009c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	330c      	adds	r3, #12
 8009c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	e853 3f00 	ldrex	r3, [r3]
 8009c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f023 0310 	bic.w	r3, r3, #16
 8009c82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	330c      	adds	r3, #12
 8009c8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009c90:	61fa      	str	r2, [r7, #28]
 8009c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c94:	69b9      	ldr	r1, [r7, #24]
 8009c96:	69fa      	ldr	r2, [r7, #28]
 8009c98:	e841 2300 	strex	r3, r2, [r1]
 8009c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1e3      	bne.n	8009c6c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009caa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f83d 	bl	8009d30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cb6:	e023      	b.n	8009d00 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d009      	beq.n	8009cd8 <HAL_UART_IRQHandler+0x524>
 8009cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d003      	beq.n	8009cd8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f940 	bl	8009f56 <UART_Transmit_IT>
    return;
 8009cd6:	e014      	b.n	8009d02 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00e      	beq.n	8009d02 <HAL_UART_IRQHandler+0x54e>
 8009ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d008      	beq.n	8009d02 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f980 	bl	8009ff6 <UART_EndTransmit_IT>
    return;
 8009cf6:	e004      	b.n	8009d02 <HAL_UART_IRQHandler+0x54e>
    return;
 8009cf8:	bf00      	nop
 8009cfa:	e002      	b.n	8009d02 <HAL_UART_IRQHandler+0x54e>
      return;
 8009cfc:	bf00      	nop
 8009cfe:	e000      	b.n	8009d02 <HAL_UART_IRQHandler+0x54e>
      return;
 8009d00:	bf00      	nop
  }
}
 8009d02:	37e8      	adds	r7, #232	@ 0xe8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d24:	bf00      	nop
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	603b      	str	r3, [r7, #0]
 8009d54:	4613      	mov	r3, r2
 8009d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d58:	e03b      	b.n	8009dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d60:	d037      	beq.n	8009dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d62:	f7fa fd5f 	bl	8004824 <HAL_GetTick>
 8009d66:	4602      	mov	r2, r0
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	6a3a      	ldr	r2, [r7, #32]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d302      	bcc.n	8009d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d101      	bne.n	8009d7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e03a      	b.n	8009df2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	f003 0304 	and.w	r3, r3, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d023      	beq.n	8009dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2b80      	cmp	r3, #128	@ 0x80
 8009d8e:	d020      	beq.n	8009dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	2b40      	cmp	r3, #64	@ 0x40
 8009d94:	d01d      	beq.n	8009dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 0308 	and.w	r3, r3, #8
 8009da0:	2b08      	cmp	r3, #8
 8009da2:	d116      	bne.n	8009dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009da4:	2300      	movs	r3, #0
 8009da6:	617b      	str	r3, [r7, #20]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	617b      	str	r3, [r7, #20]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 f857 	bl	8009e6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2208      	movs	r2, #8
 8009dc4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e00f      	b.n	8009df2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	4013      	ands	r3, r2
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	bf0c      	ite	eq
 8009de2:	2301      	moveq	r3, #1
 8009de4:	2300      	movne	r3, #0
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	461a      	mov	r2, r3
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d0b4      	beq.n	8009d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3718      	adds	r7, #24
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	b085      	sub	sp, #20
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	60f8      	str	r0, [r7, #12]
 8009e02:	60b9      	str	r1, [r7, #8]
 8009e04:	4613      	mov	r3, r2
 8009e06:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	88fa      	ldrh	r2, [r7, #6]
 8009e12:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	88fa      	ldrh	r2, [r7, #6]
 8009e18:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2222      	movs	r2, #34	@ 0x22
 8009e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d007      	beq.n	8009e40 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68da      	ldr	r2, [r3, #12]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e3e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	695a      	ldr	r2, [r3, #20]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f042 0201 	orr.w	r2, r2, #1
 8009e4e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68da      	ldr	r2, [r3, #12]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f042 0220 	orr.w	r2, r2, #32
 8009e5e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b095      	sub	sp, #84	@ 0x54
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	330c      	adds	r3, #12
 8009e7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e80:	e853 3f00 	ldrex	r3, [r3]
 8009e84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	330c      	adds	r3, #12
 8009e94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e96:	643a      	str	r2, [r7, #64]	@ 0x40
 8009e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e9e:	e841 2300 	strex	r3, r2, [r1]
 8009ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1e5      	bne.n	8009e76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	3314      	adds	r3, #20
 8009eb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	e853 3f00 	ldrex	r3, [r3]
 8009eb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	f023 0301 	bic.w	r3, r3, #1
 8009ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	3314      	adds	r3, #20
 8009ec8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009eca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ece:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ed2:	e841 2300 	strex	r3, r2, [r1]
 8009ed6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1e5      	bne.n	8009eaa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d119      	bne.n	8009f1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	330c      	adds	r3, #12
 8009eec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	e853 3f00 	ldrex	r3, [r3]
 8009ef4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	f023 0310 	bic.w	r3, r3, #16
 8009efc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	330c      	adds	r3, #12
 8009f04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f06:	61ba      	str	r2, [r7, #24]
 8009f08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	6979      	ldr	r1, [r7, #20]
 8009f0c:	69ba      	ldr	r2, [r7, #24]
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	613b      	str	r3, [r7, #16]
   return(result);
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e5      	bne.n	8009ee6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2220      	movs	r2, #32
 8009f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009f28:	bf00      	nop
 8009f2a:	3754      	adds	r7, #84	@ 0x54
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f7ff fee7 	bl	8009d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f4e:	bf00      	nop
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b085      	sub	sp, #20
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	2b21      	cmp	r3, #33	@ 0x21
 8009f68:	d13e      	bne.n	8009fe8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f72:	d114      	bne.n	8009f9e <UART_Transmit_IT+0x48>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d110      	bne.n	8009f9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a1b      	ldr	r3, [r3, #32]
 8009f80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	461a      	mov	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	1c9a      	adds	r2, r3, #2
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	621a      	str	r2, [r3, #32]
 8009f9c:	e008      	b.n	8009fb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	1c59      	adds	r1, r3, #1
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	6211      	str	r1, [r2, #32]
 8009fa8:	781a      	ldrb	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10f      	bne.n	8009fe4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68da      	ldr	r2, [r3, #12]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68da      	ldr	r2, [r3, #12]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009fe2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	e000      	b.n	8009fea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009fe8:	2302      	movs	r3, #2
  }
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68da      	ldr	r2, [r3, #12]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a00c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2220      	movs	r2, #32
 800a012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7ff fe76 	bl	8009d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b08c      	sub	sp, #48	@ 0x30
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a032:	2300      	movs	r3, #0
 800a034:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	2b22      	cmp	r3, #34	@ 0x22
 800a040:	f040 80aa 	bne.w	800a198 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a04c:	d115      	bne.n	800a07a <UART_Receive_IT+0x54>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d111      	bne.n	800a07a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a05a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	b29b      	uxth	r3, r3
 800a064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a068:	b29a      	uxth	r2, r3
 800a06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a072:	1c9a      	adds	r2, r3, #2
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	629a      	str	r2, [r3, #40]	@ 0x28
 800a078:	e024      	b.n	800a0c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a088:	d007      	beq.n	800a09a <UART_Receive_IT+0x74>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10a      	bne.n	800a0a8 <UART_Receive_IT+0x82>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d106      	bne.n	800a0a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a4:	701a      	strb	r2, [r3, #0]
 800a0a6:	e008      	b.n	800a0ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0be:	1c5a      	adds	r2, r3, #1
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d15d      	bne.n	800a194 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68da      	ldr	r2, [r3, #12]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f022 0220 	bic.w	r2, r2, #32
 800a0e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68da      	ldr	r2, [r3, #12]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a0f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	695a      	ldr	r2, [r3, #20]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f022 0201 	bic.w	r2, r2, #1
 800a106:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2220      	movs	r2, #32
 800a10c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d135      	bne.n	800a18a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	330c      	adds	r3, #12
 800a12a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	e853 3f00 	ldrex	r3, [r3]
 800a132:	613b      	str	r3, [r7, #16]
   return(result);
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	f023 0310 	bic.w	r3, r3, #16
 800a13a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	330c      	adds	r3, #12
 800a142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a144:	623a      	str	r2, [r7, #32]
 800a146:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a148:	69f9      	ldr	r1, [r7, #28]
 800a14a:	6a3a      	ldr	r2, [r7, #32]
 800a14c:	e841 2300 	strex	r3, r2, [r1]
 800a150:	61bb      	str	r3, [r7, #24]
   return(result);
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1e5      	bne.n	800a124 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f003 0310 	and.w	r3, r3, #16
 800a162:	2b10      	cmp	r3, #16
 800a164:	d10a      	bne.n	800a17c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a166:	2300      	movs	r3, #0
 800a168:	60fb      	str	r3, [r7, #12]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	60fb      	str	r3, [r7, #12]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	60fb      	str	r3, [r7, #12]
 800a17a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7ff fdd4 	bl	8009d30 <HAL_UARTEx_RxEventCallback>
 800a188:	e002      	b.n	800a190 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7f7 fdb6 	bl	8001cfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	e002      	b.n	800a19a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a194:	2300      	movs	r3, #0
 800a196:	e000      	b.n	800a19a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a198:	2302      	movs	r3, #2
  }
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3730      	adds	r7, #48	@ 0x30
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
	...

0800a1a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1a8:	b0c0      	sub	sp, #256	@ 0x100
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a1bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1c0:	68d9      	ldr	r1, [r3, #12]
 800a1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	ea40 0301 	orr.w	r3, r0, r1
 800a1cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a1ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1d2:	689a      	ldr	r2, [r3, #8]
 800a1d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	431a      	orrs	r2, r3
 800a1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1e8:	69db      	ldr	r3, [r3, #28]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a1f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a1fc:	f021 010c 	bic.w	r1, r1, #12
 800a200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a20a:	430b      	orrs	r3, r1
 800a20c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a21a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a21e:	6999      	ldr	r1, [r3, #24]
 800a220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	ea40 0301 	orr.w	r3, r0, r1
 800a22a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	4b8f      	ldr	r3, [pc, #572]	@ (800a470 <UART_SetConfig+0x2cc>)
 800a234:	429a      	cmp	r2, r3
 800a236:	d005      	beq.n	800a244 <UART_SetConfig+0xa0>
 800a238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	4b8d      	ldr	r3, [pc, #564]	@ (800a474 <UART_SetConfig+0x2d0>)
 800a240:	429a      	cmp	r2, r3
 800a242:	d104      	bne.n	800a24e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a244:	f7fd fcb6 	bl	8007bb4 <HAL_RCC_GetPCLK2Freq>
 800a248:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a24c:	e003      	b.n	800a256 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a24e:	f7fd fc9d 	bl	8007b8c <HAL_RCC_GetPCLK1Freq>
 800a252:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a25a:	69db      	ldr	r3, [r3, #28]
 800a25c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a260:	f040 810c 	bne.w	800a47c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a268:	2200      	movs	r2, #0
 800a26a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a26e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a272:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a276:	4622      	mov	r2, r4
 800a278:	462b      	mov	r3, r5
 800a27a:	1891      	adds	r1, r2, r2
 800a27c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a27e:	415b      	adcs	r3, r3
 800a280:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a282:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a286:	4621      	mov	r1, r4
 800a288:	eb12 0801 	adds.w	r8, r2, r1
 800a28c:	4629      	mov	r1, r5
 800a28e:	eb43 0901 	adc.w	r9, r3, r1
 800a292:	f04f 0200 	mov.w	r2, #0
 800a296:	f04f 0300 	mov.w	r3, #0
 800a29a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a29e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a2a6:	4690      	mov	r8, r2
 800a2a8:	4699      	mov	r9, r3
 800a2aa:	4623      	mov	r3, r4
 800a2ac:	eb18 0303 	adds.w	r3, r8, r3
 800a2b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a2b4:	462b      	mov	r3, r5
 800a2b6:	eb49 0303 	adc.w	r3, r9, r3
 800a2ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a2ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a2ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	18db      	adds	r3, r3, r3
 800a2d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2d8:	4613      	mov	r3, r2
 800a2da:	eb42 0303 	adc.w	r3, r2, r3
 800a2de:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a2e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a2e8:	f7f6 fcbe 	bl	8000c68 <__aeabi_uldivmod>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	4b61      	ldr	r3, [pc, #388]	@ (800a478 <UART_SetConfig+0x2d4>)
 800a2f2:	fba3 2302 	umull	r2, r3, r3, r2
 800a2f6:	095b      	lsrs	r3, r3, #5
 800a2f8:	011c      	lsls	r4, r3, #4
 800a2fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2fe:	2200      	movs	r2, #0
 800a300:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a304:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a308:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a30c:	4642      	mov	r2, r8
 800a30e:	464b      	mov	r3, r9
 800a310:	1891      	adds	r1, r2, r2
 800a312:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a314:	415b      	adcs	r3, r3
 800a316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a318:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a31c:	4641      	mov	r1, r8
 800a31e:	eb12 0a01 	adds.w	sl, r2, r1
 800a322:	4649      	mov	r1, r9
 800a324:	eb43 0b01 	adc.w	fp, r3, r1
 800a328:	f04f 0200 	mov.w	r2, #0
 800a32c:	f04f 0300 	mov.w	r3, #0
 800a330:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a334:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a33c:	4692      	mov	sl, r2
 800a33e:	469b      	mov	fp, r3
 800a340:	4643      	mov	r3, r8
 800a342:	eb1a 0303 	adds.w	r3, sl, r3
 800a346:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a34a:	464b      	mov	r3, r9
 800a34c:	eb4b 0303 	adc.w	r3, fp, r3
 800a350:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a360:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a364:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a368:	460b      	mov	r3, r1
 800a36a:	18db      	adds	r3, r3, r3
 800a36c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a36e:	4613      	mov	r3, r2
 800a370:	eb42 0303 	adc.w	r3, r2, r3
 800a374:	647b      	str	r3, [r7, #68]	@ 0x44
 800a376:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a37a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a37e:	f7f6 fc73 	bl	8000c68 <__aeabi_uldivmod>
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	4611      	mov	r1, r2
 800a388:	4b3b      	ldr	r3, [pc, #236]	@ (800a478 <UART_SetConfig+0x2d4>)
 800a38a:	fba3 2301 	umull	r2, r3, r3, r1
 800a38e:	095b      	lsrs	r3, r3, #5
 800a390:	2264      	movs	r2, #100	@ 0x64
 800a392:	fb02 f303 	mul.w	r3, r2, r3
 800a396:	1acb      	subs	r3, r1, r3
 800a398:	00db      	lsls	r3, r3, #3
 800a39a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a39e:	4b36      	ldr	r3, [pc, #216]	@ (800a478 <UART_SetConfig+0x2d4>)
 800a3a0:	fba3 2302 	umull	r2, r3, r3, r2
 800a3a4:	095b      	lsrs	r3, r3, #5
 800a3a6:	005b      	lsls	r3, r3, #1
 800a3a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a3ac:	441c      	add	r4, r3
 800a3ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a3b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a3bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a3c0:	4642      	mov	r2, r8
 800a3c2:	464b      	mov	r3, r9
 800a3c4:	1891      	adds	r1, r2, r2
 800a3c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a3c8:	415b      	adcs	r3, r3
 800a3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a3d0:	4641      	mov	r1, r8
 800a3d2:	1851      	adds	r1, r2, r1
 800a3d4:	6339      	str	r1, [r7, #48]	@ 0x30
 800a3d6:	4649      	mov	r1, r9
 800a3d8:	414b      	adcs	r3, r1
 800a3da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3dc:	f04f 0200 	mov.w	r2, #0
 800a3e0:	f04f 0300 	mov.w	r3, #0
 800a3e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a3e8:	4659      	mov	r1, fp
 800a3ea:	00cb      	lsls	r3, r1, #3
 800a3ec:	4651      	mov	r1, sl
 800a3ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3f2:	4651      	mov	r1, sl
 800a3f4:	00ca      	lsls	r2, r1, #3
 800a3f6:	4610      	mov	r0, r2
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	4642      	mov	r2, r8
 800a3fe:	189b      	adds	r3, r3, r2
 800a400:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a404:	464b      	mov	r3, r9
 800a406:	460a      	mov	r2, r1
 800a408:	eb42 0303 	adc.w	r3, r2, r3
 800a40c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a41c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a420:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a424:	460b      	mov	r3, r1
 800a426:	18db      	adds	r3, r3, r3
 800a428:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a42a:	4613      	mov	r3, r2
 800a42c:	eb42 0303 	adc.w	r3, r2, r3
 800a430:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a432:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a436:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a43a:	f7f6 fc15 	bl	8000c68 <__aeabi_uldivmod>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4b0d      	ldr	r3, [pc, #52]	@ (800a478 <UART_SetConfig+0x2d4>)
 800a444:	fba3 1302 	umull	r1, r3, r3, r2
 800a448:	095b      	lsrs	r3, r3, #5
 800a44a:	2164      	movs	r1, #100	@ 0x64
 800a44c:	fb01 f303 	mul.w	r3, r1, r3
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	00db      	lsls	r3, r3, #3
 800a454:	3332      	adds	r3, #50	@ 0x32
 800a456:	4a08      	ldr	r2, [pc, #32]	@ (800a478 <UART_SetConfig+0x2d4>)
 800a458:	fba2 2303 	umull	r2, r3, r2, r3
 800a45c:	095b      	lsrs	r3, r3, #5
 800a45e:	f003 0207 	and.w	r2, r3, #7
 800a462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4422      	add	r2, r4
 800a46a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a46c:	e106      	b.n	800a67c <UART_SetConfig+0x4d8>
 800a46e:	bf00      	nop
 800a470:	40011000 	.word	0x40011000
 800a474:	40011400 	.word	0x40011400
 800a478:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a47c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a480:	2200      	movs	r2, #0
 800a482:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a486:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a48a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a48e:	4642      	mov	r2, r8
 800a490:	464b      	mov	r3, r9
 800a492:	1891      	adds	r1, r2, r2
 800a494:	6239      	str	r1, [r7, #32]
 800a496:	415b      	adcs	r3, r3
 800a498:	627b      	str	r3, [r7, #36]	@ 0x24
 800a49a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a49e:	4641      	mov	r1, r8
 800a4a0:	1854      	adds	r4, r2, r1
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	eb43 0501 	adc.w	r5, r3, r1
 800a4a8:	f04f 0200 	mov.w	r2, #0
 800a4ac:	f04f 0300 	mov.w	r3, #0
 800a4b0:	00eb      	lsls	r3, r5, #3
 800a4b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a4b6:	00e2      	lsls	r2, r4, #3
 800a4b8:	4614      	mov	r4, r2
 800a4ba:	461d      	mov	r5, r3
 800a4bc:	4643      	mov	r3, r8
 800a4be:	18e3      	adds	r3, r4, r3
 800a4c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4c4:	464b      	mov	r3, r9
 800a4c6:	eb45 0303 	adc.w	r3, r5, r3
 800a4ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a4ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a4da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a4de:	f04f 0200 	mov.w	r2, #0
 800a4e2:	f04f 0300 	mov.w	r3, #0
 800a4e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	008b      	lsls	r3, r1, #2
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	008a      	lsls	r2, r1, #2
 800a4f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a4fc:	f7f6 fbb4 	bl	8000c68 <__aeabi_uldivmod>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4b60      	ldr	r3, [pc, #384]	@ (800a688 <UART_SetConfig+0x4e4>)
 800a506:	fba3 2302 	umull	r2, r3, r3, r2
 800a50a:	095b      	lsrs	r3, r3, #5
 800a50c:	011c      	lsls	r4, r3, #4
 800a50e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a512:	2200      	movs	r2, #0
 800a514:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a518:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a51c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a520:	4642      	mov	r2, r8
 800a522:	464b      	mov	r3, r9
 800a524:	1891      	adds	r1, r2, r2
 800a526:	61b9      	str	r1, [r7, #24]
 800a528:	415b      	adcs	r3, r3
 800a52a:	61fb      	str	r3, [r7, #28]
 800a52c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a530:	4641      	mov	r1, r8
 800a532:	1851      	adds	r1, r2, r1
 800a534:	6139      	str	r1, [r7, #16]
 800a536:	4649      	mov	r1, r9
 800a538:	414b      	adcs	r3, r1
 800a53a:	617b      	str	r3, [r7, #20]
 800a53c:	f04f 0200 	mov.w	r2, #0
 800a540:	f04f 0300 	mov.w	r3, #0
 800a544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a548:	4659      	mov	r1, fp
 800a54a:	00cb      	lsls	r3, r1, #3
 800a54c:	4651      	mov	r1, sl
 800a54e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a552:	4651      	mov	r1, sl
 800a554:	00ca      	lsls	r2, r1, #3
 800a556:	4610      	mov	r0, r2
 800a558:	4619      	mov	r1, r3
 800a55a:	4603      	mov	r3, r0
 800a55c:	4642      	mov	r2, r8
 800a55e:	189b      	adds	r3, r3, r2
 800a560:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a564:	464b      	mov	r3, r9
 800a566:	460a      	mov	r2, r1
 800a568:	eb42 0303 	adc.w	r3, r2, r3
 800a56c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a57a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a57c:	f04f 0200 	mov.w	r2, #0
 800a580:	f04f 0300 	mov.w	r3, #0
 800a584:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a588:	4649      	mov	r1, r9
 800a58a:	008b      	lsls	r3, r1, #2
 800a58c:	4641      	mov	r1, r8
 800a58e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a592:	4641      	mov	r1, r8
 800a594:	008a      	lsls	r2, r1, #2
 800a596:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a59a:	f7f6 fb65 	bl	8000c68 <__aeabi_uldivmod>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	4b38      	ldr	r3, [pc, #224]	@ (800a688 <UART_SetConfig+0x4e4>)
 800a5a6:	fba3 2301 	umull	r2, r3, r3, r1
 800a5aa:	095b      	lsrs	r3, r3, #5
 800a5ac:	2264      	movs	r2, #100	@ 0x64
 800a5ae:	fb02 f303 	mul.w	r3, r2, r3
 800a5b2:	1acb      	subs	r3, r1, r3
 800a5b4:	011b      	lsls	r3, r3, #4
 800a5b6:	3332      	adds	r3, #50	@ 0x32
 800a5b8:	4a33      	ldr	r2, [pc, #204]	@ (800a688 <UART_SetConfig+0x4e4>)
 800a5ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a5be:	095b      	lsrs	r3, r3, #5
 800a5c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5c4:	441c      	add	r4, r3
 800a5c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	673b      	str	r3, [r7, #112]	@ 0x70
 800a5ce:	677a      	str	r2, [r7, #116]	@ 0x74
 800a5d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a5d4:	4642      	mov	r2, r8
 800a5d6:	464b      	mov	r3, r9
 800a5d8:	1891      	adds	r1, r2, r2
 800a5da:	60b9      	str	r1, [r7, #8]
 800a5dc:	415b      	adcs	r3, r3
 800a5de:	60fb      	str	r3, [r7, #12]
 800a5e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5e4:	4641      	mov	r1, r8
 800a5e6:	1851      	adds	r1, r2, r1
 800a5e8:	6039      	str	r1, [r7, #0]
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	414b      	adcs	r3, r1
 800a5ee:	607b      	str	r3, [r7, #4]
 800a5f0:	f04f 0200 	mov.w	r2, #0
 800a5f4:	f04f 0300 	mov.w	r3, #0
 800a5f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a5fc:	4659      	mov	r1, fp
 800a5fe:	00cb      	lsls	r3, r1, #3
 800a600:	4651      	mov	r1, sl
 800a602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a606:	4651      	mov	r1, sl
 800a608:	00ca      	lsls	r2, r1, #3
 800a60a:	4610      	mov	r0, r2
 800a60c:	4619      	mov	r1, r3
 800a60e:	4603      	mov	r3, r0
 800a610:	4642      	mov	r2, r8
 800a612:	189b      	adds	r3, r3, r2
 800a614:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a616:	464b      	mov	r3, r9
 800a618:	460a      	mov	r2, r1
 800a61a:	eb42 0303 	adc.w	r3, r2, r3
 800a61e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	663b      	str	r3, [r7, #96]	@ 0x60
 800a62a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a62c:	f04f 0200 	mov.w	r2, #0
 800a630:	f04f 0300 	mov.w	r3, #0
 800a634:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a638:	4649      	mov	r1, r9
 800a63a:	008b      	lsls	r3, r1, #2
 800a63c:	4641      	mov	r1, r8
 800a63e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a642:	4641      	mov	r1, r8
 800a644:	008a      	lsls	r2, r1, #2
 800a646:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a64a:	f7f6 fb0d 	bl	8000c68 <__aeabi_uldivmod>
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	4b0d      	ldr	r3, [pc, #52]	@ (800a688 <UART_SetConfig+0x4e4>)
 800a654:	fba3 1302 	umull	r1, r3, r3, r2
 800a658:	095b      	lsrs	r3, r3, #5
 800a65a:	2164      	movs	r1, #100	@ 0x64
 800a65c:	fb01 f303 	mul.w	r3, r1, r3
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	011b      	lsls	r3, r3, #4
 800a664:	3332      	adds	r3, #50	@ 0x32
 800a666:	4a08      	ldr	r2, [pc, #32]	@ (800a688 <UART_SetConfig+0x4e4>)
 800a668:	fba2 2303 	umull	r2, r3, r2, r3
 800a66c:	095b      	lsrs	r3, r3, #5
 800a66e:	f003 020f 	and.w	r2, r3, #15
 800a672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4422      	add	r2, r4
 800a67a:	609a      	str	r2, [r3, #8]
}
 800a67c:	bf00      	nop
 800a67e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a682:	46bd      	mov	sp, r7
 800a684:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a688:	51eb851f 	.word	0x51eb851f

0800a68c <__NVIC_SetPriority>:
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	6039      	str	r1, [r7, #0]
 800a696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	db0a      	blt.n	800a6b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	490c      	ldr	r1, [pc, #48]	@ (800a6d8 <__NVIC_SetPriority+0x4c>)
 800a6a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6aa:	0112      	lsls	r2, r2, #4
 800a6ac:	b2d2      	uxtb	r2, r2
 800a6ae:	440b      	add	r3, r1
 800a6b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a6b4:	e00a      	b.n	800a6cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	4908      	ldr	r1, [pc, #32]	@ (800a6dc <__NVIC_SetPriority+0x50>)
 800a6bc:	79fb      	ldrb	r3, [r7, #7]
 800a6be:	f003 030f 	and.w	r3, r3, #15
 800a6c2:	3b04      	subs	r3, #4
 800a6c4:	0112      	lsls	r2, r2, #4
 800a6c6:	b2d2      	uxtb	r2, r2
 800a6c8:	440b      	add	r3, r1
 800a6ca:	761a      	strb	r2, [r3, #24]
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	e000e100 	.word	0xe000e100
 800a6dc:	e000ed00 	.word	0xe000ed00

0800a6e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a6e4:	4b05      	ldr	r3, [pc, #20]	@ (800a6fc <SysTick_Handler+0x1c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a6e8:	f001 fd46 	bl	800c178 <xTaskGetSchedulerState>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d001      	beq.n	800a6f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a6f2:	f002 fb41 	bl	800cd78 <xPortSysTickHandler>
  }
}
 800a6f6:	bf00      	nop
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	e000e010 	.word	0xe000e010

0800a700 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a700:	b580      	push	{r7, lr}
 800a702:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a704:	2100      	movs	r1, #0
 800a706:	f06f 0004 	mvn.w	r0, #4
 800a70a:	f7ff ffbf 	bl	800a68c <__NVIC_SetPriority>
#endif
}
 800a70e:	bf00      	nop
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a71a:	f3ef 8305 	mrs	r3, IPSR
 800a71e:	603b      	str	r3, [r7, #0]
  return(result);
 800a720:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a722:	2b00      	cmp	r3, #0
 800a724:	d003      	beq.n	800a72e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a726:	f06f 0305 	mvn.w	r3, #5
 800a72a:	607b      	str	r3, [r7, #4]
 800a72c:	e00c      	b.n	800a748 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a72e:	4b0a      	ldr	r3, [pc, #40]	@ (800a758 <osKernelInitialize+0x44>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d105      	bne.n	800a742 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a736:	4b08      	ldr	r3, [pc, #32]	@ (800a758 <osKernelInitialize+0x44>)
 800a738:	2201      	movs	r2, #1
 800a73a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	607b      	str	r3, [r7, #4]
 800a740:	e002      	b.n	800a748 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a742:	f04f 33ff 	mov.w	r3, #4294967295
 800a746:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a748:	687b      	ldr	r3, [r7, #4]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	2000079c 	.word	0x2000079c

0800a75c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a762:	f3ef 8305 	mrs	r3, IPSR
 800a766:	603b      	str	r3, [r7, #0]
  return(result);
 800a768:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a76e:	f06f 0305 	mvn.w	r3, #5
 800a772:	607b      	str	r3, [r7, #4]
 800a774:	e010      	b.n	800a798 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a776:	4b0b      	ldr	r3, [pc, #44]	@ (800a7a4 <osKernelStart+0x48>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d109      	bne.n	800a792 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a77e:	f7ff ffbf 	bl	800a700 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a782:	4b08      	ldr	r3, [pc, #32]	@ (800a7a4 <osKernelStart+0x48>)
 800a784:	2202      	movs	r2, #2
 800a786:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a788:	f001 f892 	bl	800b8b0 <vTaskStartScheduler>
      stat = osOK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	607b      	str	r3, [r7, #4]
 800a790:	e002      	b.n	800a798 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a792:	f04f 33ff 	mov.w	r3, #4294967295
 800a796:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a798:	687b      	ldr	r3, [r7, #4]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3708      	adds	r7, #8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	2000079c 	.word	0x2000079c

0800a7a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08e      	sub	sp, #56	@ 0x38
 800a7ac:	af04      	add	r7, sp, #16
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7b8:	f3ef 8305 	mrs	r3, IPSR
 800a7bc:	617b      	str	r3, [r7, #20]
  return(result);
 800a7be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d17e      	bne.n	800a8c2 <osThreadNew+0x11a>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d07b      	beq.n	800a8c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a7ca:	2380      	movs	r3, #128	@ 0x80
 800a7cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a7ce:	2318      	movs	r3, #24
 800a7d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d045      	beq.n	800a86e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d002      	beq.n	800a7f0 <osThreadNew+0x48>
        name = attr->name;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d002      	beq.n	800a7fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d008      	beq.n	800a816 <osThreadNew+0x6e>
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	2b38      	cmp	r3, #56	@ 0x38
 800a808:	d805      	bhi.n	800a816 <osThreadNew+0x6e>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	2b00      	cmp	r3, #0
 800a814:	d001      	beq.n	800a81a <osThreadNew+0x72>
        return (NULL);
 800a816:	2300      	movs	r3, #0
 800a818:	e054      	b.n	800a8c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d003      	beq.n	800a82a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	695b      	ldr	r3, [r3, #20]
 800a826:	089b      	lsrs	r3, r3, #2
 800a828:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00e      	beq.n	800a850 <osThreadNew+0xa8>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	2ba7      	cmp	r3, #167	@ 0xa7
 800a838:	d90a      	bls.n	800a850 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d006      	beq.n	800a850 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d002      	beq.n	800a850 <osThreadNew+0xa8>
        mem = 1;
 800a84a:	2301      	movs	r3, #1
 800a84c:	61bb      	str	r3, [r7, #24]
 800a84e:	e010      	b.n	800a872 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10c      	bne.n	800a872 <osThreadNew+0xca>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d108      	bne.n	800a872 <osThreadNew+0xca>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d104      	bne.n	800a872 <osThreadNew+0xca>
          mem = 0;
 800a868:	2300      	movs	r3, #0
 800a86a:	61bb      	str	r3, [r7, #24]
 800a86c:	e001      	b.n	800a872 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a86e:	2300      	movs	r3, #0
 800a870:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d110      	bne.n	800a89a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a880:	9202      	str	r2, [sp, #8]
 800a882:	9301      	str	r3, [sp, #4]
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	6a3a      	ldr	r2, [r7, #32]
 800a88c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f000 fe1a 	bl	800b4c8 <xTaskCreateStatic>
 800a894:	4603      	mov	r3, r0
 800a896:	613b      	str	r3, [r7, #16]
 800a898:	e013      	b.n	800a8c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d110      	bne.n	800a8c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	f107 0310 	add.w	r3, r7, #16
 800a8a8:	9301      	str	r3, [sp, #4]
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	9300      	str	r3, [sp, #0]
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f000 fe68 	bl	800b588 <xTaskCreate>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d001      	beq.n	800a8c2 <osThreadNew+0x11a>
            hTask = NULL;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a8c2:	693b      	ldr	r3, [r7, #16]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3728      	adds	r7, #40	@ 0x28
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8d4:	f3ef 8305 	mrs	r3, IPSR
 800a8d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d003      	beq.n	800a8e8 <osDelay+0x1c>
    stat = osErrorISR;
 800a8e0:	f06f 0305 	mvn.w	r3, #5
 800a8e4:	60fb      	str	r3, [r7, #12]
 800a8e6:	e007      	b.n	800a8f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d002      	beq.n	800a8f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 ffa6 	bl	800b844 <vTaskDelay>
    }
  }

  return (stat);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
	...

0800a904 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4a07      	ldr	r2, [pc, #28]	@ (800a930 <vApplicationGetIdleTaskMemory+0x2c>)
 800a914:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	4a06      	ldr	r2, [pc, #24]	@ (800a934 <vApplicationGetIdleTaskMemory+0x30>)
 800a91a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2280      	movs	r2, #128	@ 0x80
 800a920:	601a      	str	r2, [r3, #0]
}
 800a922:	bf00      	nop
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	200007a0 	.word	0x200007a0
 800a934:	20000848 	.word	0x20000848

0800a938 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	4a07      	ldr	r2, [pc, #28]	@ (800a964 <vApplicationGetTimerTaskMemory+0x2c>)
 800a948:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	4a06      	ldr	r2, [pc, #24]	@ (800a968 <vApplicationGetTimerTaskMemory+0x30>)
 800a94e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a956:	601a      	str	r2, [r3, #0]
}
 800a958:	bf00      	nop
 800a95a:	3714      	adds	r7, #20
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr
 800a964:	20000a48 	.word	0x20000a48
 800a968:	20000af0 	.word	0x20000af0

0800a96c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f103 0208 	add.w	r2, r3, #8
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f04f 32ff 	mov.w	r2, #4294967295
 800a984:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f103 0208 	add.w	r2, r3, #8
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f103 0208 	add.w	r2, r3, #8
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9ba:	bf00      	nop
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b085      	sub	sp, #20
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
 800a9ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	689a      	ldr	r2, [r3, #8]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	683a      	ldr	r2, [r7, #0]
 800a9ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	601a      	str	r2, [r3, #0]
}
 800aa02:	bf00      	nop
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b085      	sub	sp, #20
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa24:	d103      	bne.n	800aa2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	e00c      	b.n	800aa48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	3308      	adds	r3, #8
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	e002      	b.n	800aa3c <vListInsert+0x2e>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d2f6      	bcs.n	800aa36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	685a      	ldr	r2, [r3, #4]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	683a      	ldr	r2, [r7, #0]
 800aa56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	601a      	str	r2, [r3, #0]
}
 800aa74:	bf00      	nop
 800aa76:	3714      	adds	r7, #20
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	6892      	ldr	r2, [r2, #8]
 800aa96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	6852      	ldr	r2, [r2, #4]
 800aaa0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d103      	bne.n	800aab4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	689a      	ldr	r2, [r3, #8]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	1e5a      	subs	r2, r3, #1
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10b      	bne.n	800ab00 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aafa:	bf00      	nop
 800aafc:	bf00      	nop
 800aafe:	e7fd      	b.n	800aafc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab00:	f002 f8aa 	bl	800cc58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab0c:	68f9      	ldr	r1, [r7, #12]
 800ab0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab10:	fb01 f303 	mul.w	r3, r1, r3
 800ab14:	441a      	add	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab30:	3b01      	subs	r3, #1
 800ab32:	68f9      	ldr	r1, [r7, #12]
 800ab34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab36:	fb01 f303 	mul.w	r3, r1, r3
 800ab3a:	441a      	add	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	22ff      	movs	r2, #255	@ 0xff
 800ab44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	22ff      	movs	r2, #255	@ 0xff
 800ab4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d114      	bne.n	800ab80 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d01a      	beq.n	800ab94 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	3310      	adds	r3, #16
 800ab62:	4618      	mov	r0, r3
 800ab64:	f001 f942 	bl	800bdec <xTaskRemoveFromEventList>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d012      	beq.n	800ab94 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab6e:	4b0d      	ldr	r3, [pc, #52]	@ (800aba4 <xQueueGenericReset+0xd0>)
 800ab70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	e009      	b.n	800ab94 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	3310      	adds	r3, #16
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7ff fef1 	bl	800a96c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	3324      	adds	r3, #36	@ 0x24
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7ff feec 	bl	800a96c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab94:	f002 f892 	bl	800ccbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab98:	2301      	movs	r3, #1
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08e      	sub	sp, #56	@ 0x38
 800abac:	af02      	add	r7, sp, #8
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10b      	bne.n	800abd4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800abce:	bf00      	nop
 800abd0:	bf00      	nop
 800abd2:	e7fd      	b.n	800abd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10b      	bne.n	800abf2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800abec:	bf00      	nop
 800abee:	bf00      	nop
 800abf0:	e7fd      	b.n	800abee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d002      	beq.n	800abfe <xQueueGenericCreateStatic+0x56>
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d001      	beq.n	800ac02 <xQueueGenericCreateStatic+0x5a>
 800abfe:	2301      	movs	r3, #1
 800ac00:	e000      	b.n	800ac04 <xQueueGenericCreateStatic+0x5c>
 800ac02:	2300      	movs	r3, #0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10b      	bne.n	800ac20 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ac08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0c:	f383 8811 	msr	BASEPRI, r3
 800ac10:	f3bf 8f6f 	isb	sy
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	623b      	str	r3, [r7, #32]
}
 800ac1a:	bf00      	nop
 800ac1c:	bf00      	nop
 800ac1e:	e7fd      	b.n	800ac1c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d102      	bne.n	800ac2c <xQueueGenericCreateStatic+0x84>
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d101      	bne.n	800ac30 <xQueueGenericCreateStatic+0x88>
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e000      	b.n	800ac32 <xQueueGenericCreateStatic+0x8a>
 800ac30:	2300      	movs	r3, #0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d10b      	bne.n	800ac4e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ac36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3a:	f383 8811 	msr	BASEPRI, r3
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	f3bf 8f4f 	dsb	sy
 800ac46:	61fb      	str	r3, [r7, #28]
}
 800ac48:	bf00      	nop
 800ac4a:	bf00      	nop
 800ac4c:	e7fd      	b.n	800ac4a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac4e:	2350      	movs	r3, #80	@ 0x50
 800ac50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	2b50      	cmp	r3, #80	@ 0x50
 800ac56:	d00b      	beq.n	800ac70 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ac58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	61bb      	str	r3, [r7, #24]
}
 800ac6a:	bf00      	nop
 800ac6c:	bf00      	nop
 800ac6e:	e7fd      	b.n	800ac6c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ac76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d00d      	beq.n	800ac98 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac7e:	2201      	movs	r2, #1
 800ac80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac84:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ac88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	68b9      	ldr	r1, [r7, #8]
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 f805 	bl	800aca2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3730      	adds	r7, #48	@ 0x30
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b084      	sub	sp, #16
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	60f8      	str	r0, [r7, #12]
 800acaa:	60b9      	str	r1, [r7, #8]
 800acac:	607a      	str	r2, [r7, #4]
 800acae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d103      	bne.n	800acbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	69ba      	ldr	r2, [r7, #24]
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	e002      	b.n	800acc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	68ba      	ldr	r2, [r7, #8]
 800acce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acd0:	2101      	movs	r1, #1
 800acd2:	69b8      	ldr	r0, [r7, #24]
 800acd4:	f7ff fefe 	bl	800aad4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	78fa      	ldrb	r2, [r7, #3]
 800acdc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ace0:	bf00      	nop
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b08e      	sub	sp, #56	@ 0x38
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
 800acf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800acf6:	2300      	movs	r3, #0
 800acf8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800acfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10b      	bne.n	800ad1c <xQueueGenericSend+0x34>
	__asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad08:	f383 8811 	msr	BASEPRI, r3
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad16:	bf00      	nop
 800ad18:	bf00      	nop
 800ad1a:	e7fd      	b.n	800ad18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d103      	bne.n	800ad2a <xQueueGenericSend+0x42>
 800ad22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d101      	bne.n	800ad2e <xQueueGenericSend+0x46>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e000      	b.n	800ad30 <xQueueGenericSend+0x48>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d10b      	bne.n	800ad4c <xQueueGenericSend+0x64>
	__asm volatile
 800ad34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad38:	f383 8811 	msr	BASEPRI, r3
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f3bf 8f4f 	dsb	sy
 800ad44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad46:	bf00      	nop
 800ad48:	bf00      	nop
 800ad4a:	e7fd      	b.n	800ad48 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d103      	bne.n	800ad5a <xQueueGenericSend+0x72>
 800ad52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d101      	bne.n	800ad5e <xQueueGenericSend+0x76>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e000      	b.n	800ad60 <xQueueGenericSend+0x78>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10b      	bne.n	800ad7c <xQueueGenericSend+0x94>
	__asm volatile
 800ad64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	623b      	str	r3, [r7, #32]
}
 800ad76:	bf00      	nop
 800ad78:	bf00      	nop
 800ad7a:	e7fd      	b.n	800ad78 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad7c:	f001 f9fc 	bl	800c178 <xTaskGetSchedulerState>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d102      	bne.n	800ad8c <xQueueGenericSend+0xa4>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <xQueueGenericSend+0xa8>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e000      	b.n	800ad92 <xQueueGenericSend+0xaa>
 800ad90:	2300      	movs	r3, #0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10b      	bne.n	800adae <xQueueGenericSend+0xc6>
	__asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	61fb      	str	r3, [r7, #28]
}
 800ada8:	bf00      	nop
 800adaa:	bf00      	nop
 800adac:	e7fd      	b.n	800adaa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adae:	f001 ff53 	bl	800cc58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adba:	429a      	cmp	r2, r3
 800adbc:	d302      	bcc.n	800adc4 <xQueueGenericSend+0xdc>
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d129      	bne.n	800ae18 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	68b9      	ldr	r1, [r7, #8]
 800adc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800adca:	f000 fa0f 	bl	800b1ec <prvCopyDataToQueue>
 800adce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800add0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add4:	2b00      	cmp	r3, #0
 800add6:	d010      	beq.n	800adfa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800add8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adda:	3324      	adds	r3, #36	@ 0x24
 800addc:	4618      	mov	r0, r3
 800adde:	f001 f805 	bl	800bdec <xTaskRemoveFromEventList>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d013      	beq.n	800ae10 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ade8:	4b3f      	ldr	r3, [pc, #252]	@ (800aee8 <xQueueGenericSend+0x200>)
 800adea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adee:	601a      	str	r2, [r3, #0]
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	e00a      	b.n	800ae10 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800adfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d007      	beq.n	800ae10 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae00:	4b39      	ldr	r3, [pc, #228]	@ (800aee8 <xQueueGenericSend+0x200>)
 800ae02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae06:	601a      	str	r2, [r3, #0]
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae10:	f001 ff54 	bl	800ccbc <vPortExitCritical>
				return pdPASS;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e063      	b.n	800aee0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d103      	bne.n	800ae26 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae1e:	f001 ff4d 	bl	800ccbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae22:	2300      	movs	r3, #0
 800ae24:	e05c      	b.n	800aee0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d106      	bne.n	800ae3a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae2c:	f107 0314 	add.w	r3, r7, #20
 800ae30:	4618      	mov	r0, r3
 800ae32:	f001 f83f 	bl	800beb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae36:	2301      	movs	r3, #1
 800ae38:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae3a:	f001 ff3f 	bl	800ccbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae3e:	f000 fda7 	bl	800b990 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae42:	f001 ff09 	bl	800cc58 <vPortEnterCritical>
 800ae46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae4c:	b25b      	sxtb	r3, r3
 800ae4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae52:	d103      	bne.n	800ae5c <xQueueGenericSend+0x174>
 800ae54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae62:	b25b      	sxtb	r3, r3
 800ae64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae68:	d103      	bne.n	800ae72 <xQueueGenericSend+0x18a>
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae72:	f001 ff23 	bl	800ccbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae76:	1d3a      	adds	r2, r7, #4
 800ae78:	f107 0314 	add.w	r3, r7, #20
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f001 f82e 	bl	800bee0 <xTaskCheckForTimeOut>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d124      	bne.n	800aed4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae8c:	f000 faa6 	bl	800b3dc <prvIsQueueFull>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d018      	beq.n	800aec8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae98:	3310      	adds	r3, #16
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 ff52 	bl	800bd48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aea4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aea6:	f000 fa31 	bl	800b30c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aeaa:	f000 fd7f 	bl	800b9ac <xTaskResumeAll>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f47f af7c 	bne.w	800adae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800aeb6:	4b0c      	ldr	r3, [pc, #48]	@ (800aee8 <xQueueGenericSend+0x200>)
 800aeb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	e772      	b.n	800adae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aec8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aeca:	f000 fa1f 	bl	800b30c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aece:	f000 fd6d 	bl	800b9ac <xTaskResumeAll>
 800aed2:	e76c      	b.n	800adae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aed4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aed6:	f000 fa19 	bl	800b30c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aeda:	f000 fd67 	bl	800b9ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aede:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3738      	adds	r7, #56	@ 0x38
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	e000ed04 	.word	0xe000ed04

0800aeec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b090      	sub	sp, #64	@ 0x40
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
 800aef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800aefe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10b      	bne.n	800af1c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800af04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af08:	f383 8811 	msr	BASEPRI, r3
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af16:	bf00      	nop
 800af18:	bf00      	nop
 800af1a:	e7fd      	b.n	800af18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d103      	bne.n	800af2a <xQueueGenericSendFromISR+0x3e>
 800af22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af26:	2b00      	cmp	r3, #0
 800af28:	d101      	bne.n	800af2e <xQueueGenericSendFromISR+0x42>
 800af2a:	2301      	movs	r3, #1
 800af2c:	e000      	b.n	800af30 <xQueueGenericSendFromISR+0x44>
 800af2e:	2300      	movs	r3, #0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10b      	bne.n	800af4c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800af34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800af46:	bf00      	nop
 800af48:	bf00      	nop
 800af4a:	e7fd      	b.n	800af48 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d103      	bne.n	800af5a <xQueueGenericSendFromISR+0x6e>
 800af52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af56:	2b01      	cmp	r3, #1
 800af58:	d101      	bne.n	800af5e <xQueueGenericSendFromISR+0x72>
 800af5a:	2301      	movs	r3, #1
 800af5c:	e000      	b.n	800af60 <xQueueGenericSendFromISR+0x74>
 800af5e:	2300      	movs	r3, #0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10b      	bne.n	800af7c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	623b      	str	r3, [r7, #32]
}
 800af76:	bf00      	nop
 800af78:	bf00      	nop
 800af7a:	e7fd      	b.n	800af78 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af7c:	f001 ff4c 	bl	800ce18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af80:	f3ef 8211 	mrs	r2, BASEPRI
 800af84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	61fa      	str	r2, [r7, #28]
 800af96:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800af98:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af9a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d302      	bcc.n	800afae <xQueueGenericSendFromISR+0xc2>
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d12f      	bne.n	800b00e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800afb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	68b9      	ldr	r1, [r7, #8]
 800afc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800afc4:	f000 f912 	bl	800b1ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800afc8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800afcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd0:	d112      	bne.n	800aff8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d016      	beq.n	800b008 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afdc:	3324      	adds	r3, #36	@ 0x24
 800afde:	4618      	mov	r0, r3
 800afe0:	f000 ff04 	bl	800bdec <xTaskRemoveFromEventList>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00e      	beq.n	800b008 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d00b      	beq.n	800b008 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	601a      	str	r2, [r3, #0]
 800aff6:	e007      	b.n	800b008 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aff8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800affc:	3301      	adds	r3, #1
 800affe:	b2db      	uxtb	r3, r3
 800b000:	b25a      	sxtb	r2, r3
 800b002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b004:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b008:	2301      	movs	r3, #1
 800b00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b00c:	e001      	b.n	800b012 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b00e:	2300      	movs	r3, #0
 800b010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b014:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b01c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b020:	4618      	mov	r0, r3
 800b022:	3740      	adds	r7, #64	@ 0x40
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08c      	sub	sp, #48	@ 0x30
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b034:	2300      	movs	r3, #0
 800b036:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d10b      	bne.n	800b05a <xQueueReceive+0x32>
	__asm volatile
 800b042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	623b      	str	r3, [r7, #32]
}
 800b054:	bf00      	nop
 800b056:	bf00      	nop
 800b058:	e7fd      	b.n	800b056 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d103      	bne.n	800b068 <xQueueReceive+0x40>
 800b060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <xQueueReceive+0x44>
 800b068:	2301      	movs	r3, #1
 800b06a:	e000      	b.n	800b06e <xQueueReceive+0x46>
 800b06c:	2300      	movs	r3, #0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10b      	bne.n	800b08a <xQueueReceive+0x62>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	61fb      	str	r3, [r7, #28]
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop
 800b088:	e7fd      	b.n	800b086 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b08a:	f001 f875 	bl	800c178 <xTaskGetSchedulerState>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d102      	bne.n	800b09a <xQueueReceive+0x72>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d101      	bne.n	800b09e <xQueueReceive+0x76>
 800b09a:	2301      	movs	r3, #1
 800b09c:	e000      	b.n	800b0a0 <xQueueReceive+0x78>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10b      	bne.n	800b0bc <xQueueReceive+0x94>
	__asm volatile
 800b0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a8:	f383 8811 	msr	BASEPRI, r3
 800b0ac:	f3bf 8f6f 	isb	sy
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	61bb      	str	r3, [r7, #24]
}
 800b0b6:	bf00      	nop
 800b0b8:	bf00      	nop
 800b0ba:	e7fd      	b.n	800b0b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0bc:	f001 fdcc 	bl	800cc58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d01f      	beq.n	800b10c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0cc:	68b9      	ldr	r1, [r7, #8]
 800b0ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0d0:	f000 f8f6 	bl	800b2c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d6:	1e5a      	subs	r2, r3, #1
 800b0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00f      	beq.n	800b104 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0e6:	3310      	adds	r3, #16
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 fe7f 	bl	800bdec <xTaskRemoveFromEventList>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d007      	beq.n	800b104 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b0f4:	4b3c      	ldr	r3, [pc, #240]	@ (800b1e8 <xQueueReceive+0x1c0>)
 800b0f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0fa:	601a      	str	r2, [r3, #0]
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b104:	f001 fdda 	bl	800ccbc <vPortExitCritical>
				return pdPASS;
 800b108:	2301      	movs	r3, #1
 800b10a:	e069      	b.n	800b1e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d103      	bne.n	800b11a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b112:	f001 fdd3 	bl	800ccbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b116:	2300      	movs	r3, #0
 800b118:	e062      	b.n	800b1e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d106      	bne.n	800b12e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b120:	f107 0310 	add.w	r3, r7, #16
 800b124:	4618      	mov	r0, r3
 800b126:	f000 fec5 	bl	800beb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b12a:	2301      	movs	r3, #1
 800b12c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b12e:	f001 fdc5 	bl	800ccbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b132:	f000 fc2d 	bl	800b990 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b136:	f001 fd8f 	bl	800cc58 <vPortEnterCritical>
 800b13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b13c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b140:	b25b      	sxtb	r3, r3
 800b142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b146:	d103      	bne.n	800b150 <xQueueReceive+0x128>
 800b148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b152:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b156:	b25b      	sxtb	r3, r3
 800b158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b15c:	d103      	bne.n	800b166 <xQueueReceive+0x13e>
 800b15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b160:	2200      	movs	r2, #0
 800b162:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b166:	f001 fda9 	bl	800ccbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b16a:	1d3a      	adds	r2, r7, #4
 800b16c:	f107 0310 	add.w	r3, r7, #16
 800b170:	4611      	mov	r1, r2
 800b172:	4618      	mov	r0, r3
 800b174:	f000 feb4 	bl	800bee0 <xTaskCheckForTimeOut>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d123      	bne.n	800b1c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b17e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b180:	f000 f916 	bl	800b3b0 <prvIsQueueEmpty>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d017      	beq.n	800b1ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b18a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b18c:	3324      	adds	r3, #36	@ 0x24
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	4611      	mov	r1, r2
 800b192:	4618      	mov	r0, r3
 800b194:	f000 fdd8 	bl	800bd48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b198:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b19a:	f000 f8b7 	bl	800b30c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b19e:	f000 fc05 	bl	800b9ac <xTaskResumeAll>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d189      	bne.n	800b0bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b1a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b1e8 <xQueueReceive+0x1c0>)
 800b1aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	e780      	b.n	800b0bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1bc:	f000 f8a6 	bl	800b30c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1c0:	f000 fbf4 	bl	800b9ac <xTaskResumeAll>
 800b1c4:	e77a      	b.n	800b0bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1c8:	f000 f8a0 	bl	800b30c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1cc:	f000 fbee 	bl	800b9ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1d2:	f000 f8ed 	bl	800b3b0 <prvIsQueueEmpty>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f43f af6f 	beq.w	800b0bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b1de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3730      	adds	r7, #48	@ 0x30
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	e000ed04 	.word	0xe000ed04

0800b1ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b200:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10d      	bne.n	800b226 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d14d      	bne.n	800b2ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	4618      	mov	r0, r3
 800b218:	f000 ffcc 	bl	800c1b4 <xTaskPriorityDisinherit>
 800b21c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	609a      	str	r2, [r3, #8]
 800b224:	e043      	b.n	800b2ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d119      	bne.n	800b260 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	6858      	ldr	r0, [r3, #4]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b234:	461a      	mov	r2, r3
 800b236:	68b9      	ldr	r1, [r7, #8]
 800b238:	f003 f8d5 	bl	800e3e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	685a      	ldr	r2, [r3, #4]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b244:	441a      	add	r2, r3
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	685a      	ldr	r2, [r3, #4]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	429a      	cmp	r2, r3
 800b254:	d32b      	bcc.n	800b2ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	605a      	str	r2, [r3, #4]
 800b25e:	e026      	b.n	800b2ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	68d8      	ldr	r0, [r3, #12]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b268:	461a      	mov	r2, r3
 800b26a:	68b9      	ldr	r1, [r7, #8]
 800b26c:	f003 f8bb 	bl	800e3e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	68da      	ldr	r2, [r3, #12]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b278:	425b      	negs	r3, r3
 800b27a:	441a      	add	r2, r3
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	68da      	ldr	r2, [r3, #12]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d207      	bcs.n	800b29c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	689a      	ldr	r2, [r3, #8]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b294:	425b      	negs	r3, r3
 800b296:	441a      	add	r2, r3
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d105      	bne.n	800b2ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	1c5a      	adds	r2, r3, #1
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b2b6:	697b      	ldr	r3, [r7, #20]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3718      	adds	r7, #24
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d018      	beq.n	800b304 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68da      	ldr	r2, [r3, #12]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2da:	441a      	add	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	68da      	ldr	r2, [r3, #12]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d303      	bcc.n	800b2f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	68d9      	ldr	r1, [r3, #12]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	6838      	ldr	r0, [r7, #0]
 800b300:	f003 f871 	bl	800e3e6 <memcpy>
	}
}
 800b304:	bf00      	nop
 800b306:	3708      	adds	r7, #8
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b314:	f001 fca0 	bl	800cc58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b31e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b320:	e011      	b.n	800b346 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b326:	2b00      	cmp	r3, #0
 800b328:	d012      	beq.n	800b350 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	3324      	adds	r3, #36	@ 0x24
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 fd5c 	bl	800bdec <xTaskRemoveFromEventList>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d001      	beq.n	800b33e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b33a:	f000 fe35 	bl	800bfa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b33e:	7bfb      	ldrb	r3, [r7, #15]
 800b340:	3b01      	subs	r3, #1
 800b342:	b2db      	uxtb	r3, r3
 800b344:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	dce9      	bgt.n	800b322 <prvUnlockQueue+0x16>
 800b34e:	e000      	b.n	800b352 <prvUnlockQueue+0x46>
					break;
 800b350:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	22ff      	movs	r2, #255	@ 0xff
 800b356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b35a:	f001 fcaf 	bl	800ccbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b35e:	f001 fc7b 	bl	800cc58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b368:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b36a:	e011      	b.n	800b390 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d012      	beq.n	800b39a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3310      	adds	r3, #16
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 fd37 	bl	800bdec <xTaskRemoveFromEventList>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d001      	beq.n	800b388 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b384:	f000 fe10 	bl	800bfa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b388:	7bbb      	ldrb	r3, [r7, #14]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b394:	2b00      	cmp	r3, #0
 800b396:	dce9      	bgt.n	800b36c <prvUnlockQueue+0x60>
 800b398:	e000      	b.n	800b39c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b39a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	22ff      	movs	r2, #255	@ 0xff
 800b3a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b3a4:	f001 fc8a 	bl	800ccbc <vPortExitCritical>
}
 800b3a8:	bf00      	nop
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3b8:	f001 fc4e 	bl	800cc58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d102      	bne.n	800b3ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	60fb      	str	r3, [r7, #12]
 800b3c8:	e001      	b.n	800b3ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3ce:	f001 fc75 	bl	800ccbc <vPortExitCritical>

	return xReturn;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3e4:	f001 fc38 	bl	800cc58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d102      	bne.n	800b3fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	60fb      	str	r3, [r7, #12]
 800b3f8:	e001      	b.n	800b3fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3fe:	f001 fc5d 	bl	800ccbc <vPortExitCritical>

	return xReturn;
 800b402:	68fb      	ldr	r3, [r7, #12]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b416:	2300      	movs	r3, #0
 800b418:	60fb      	str	r3, [r7, #12]
 800b41a:	e014      	b.n	800b446 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b41c:	4a0f      	ldr	r2, [pc, #60]	@ (800b45c <vQueueAddToRegistry+0x50>)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10b      	bne.n	800b440 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b428:	490c      	ldr	r1, [pc, #48]	@ (800b45c <vQueueAddToRegistry+0x50>)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b432:	4a0a      	ldr	r2, [pc, #40]	@ (800b45c <vQueueAddToRegistry+0x50>)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	00db      	lsls	r3, r3, #3
 800b438:	4413      	add	r3, r2
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b43e:	e006      	b.n	800b44e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	3301      	adds	r3, #1
 800b444:	60fb      	str	r3, [r7, #12]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2b07      	cmp	r3, #7
 800b44a:	d9e7      	bls.n	800b41c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b44c:	bf00      	nop
 800b44e:	bf00      	nop
 800b450:	3714      	adds	r7, #20
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr
 800b45a:	bf00      	nop
 800b45c:	20000ef0 	.word	0x20000ef0

0800b460 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b460:	b580      	push	{r7, lr}
 800b462:	b086      	sub	sp, #24
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b470:	f001 fbf2 	bl	800cc58 <vPortEnterCritical>
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b47a:	b25b      	sxtb	r3, r3
 800b47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b480:	d103      	bne.n	800b48a <vQueueWaitForMessageRestricted+0x2a>
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	2200      	movs	r2, #0
 800b486:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b490:	b25b      	sxtb	r3, r3
 800b492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b496:	d103      	bne.n	800b4a0 <vQueueWaitForMessageRestricted+0x40>
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b4a0:	f001 fc0c 	bl	800ccbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d106      	bne.n	800b4ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	3324      	adds	r3, #36	@ 0x24
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	68b9      	ldr	r1, [r7, #8]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f000 fc6d 	bl	800bd94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b4ba:	6978      	ldr	r0, [r7, #20]
 800b4bc:	f7ff ff26 	bl	800b30c <prvUnlockQueue>
	}
 800b4c0:	bf00      	nop
 800b4c2:	3718      	adds	r7, #24
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b08e      	sub	sp, #56	@ 0x38
 800b4cc:	af04      	add	r7, sp, #16
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
 800b4d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b4d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10b      	bne.n	800b4f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e0:	f383 8811 	msr	BASEPRI, r3
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	623b      	str	r3, [r7, #32]
}
 800b4ee:	bf00      	nop
 800b4f0:	bf00      	nop
 800b4f2:	e7fd      	b.n	800b4f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d10b      	bne.n	800b512 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	61fb      	str	r3, [r7, #28]
}
 800b50c:	bf00      	nop
 800b50e:	bf00      	nop
 800b510:	e7fd      	b.n	800b50e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b512:	23a8      	movs	r3, #168	@ 0xa8
 800b514:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	2ba8      	cmp	r3, #168	@ 0xa8
 800b51a:	d00b      	beq.n	800b534 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	61bb      	str	r3, [r7, #24]
}
 800b52e:	bf00      	nop
 800b530:	bf00      	nop
 800b532:	e7fd      	b.n	800b530 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b534:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d01e      	beq.n	800b57a <xTaskCreateStatic+0xb2>
 800b53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d01b      	beq.n	800b57a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b544:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b548:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b54a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54e:	2202      	movs	r2, #2
 800b550:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b554:	2300      	movs	r3, #0
 800b556:	9303      	str	r3, [sp, #12]
 800b558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55a:	9302      	str	r3, [sp, #8]
 800b55c:	f107 0314 	add.w	r3, r7, #20
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	68b9      	ldr	r1, [r7, #8]
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f000 f851 	bl	800b614 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b572:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b574:	f000 f8f6 	bl	800b764 <prvAddNewTaskToReadyList>
 800b578:	e001      	b.n	800b57e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b57e:	697b      	ldr	r3, [r7, #20]
	}
 800b580:	4618      	mov	r0, r3
 800b582:	3728      	adds	r7, #40	@ 0x28
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b08c      	sub	sp, #48	@ 0x30
 800b58c:	af04      	add	r7, sp, #16
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	603b      	str	r3, [r7, #0]
 800b594:	4613      	mov	r3, r2
 800b596:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b598:	88fb      	ldrh	r3, [r7, #6]
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4618      	mov	r0, r3
 800b59e:	f001 fc7d 	bl	800ce9c <pvPortMalloc>
 800b5a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00e      	beq.n	800b5c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b5aa:	20a8      	movs	r0, #168	@ 0xa8
 800b5ac:	f001 fc76 	bl	800ce9c <pvPortMalloc>
 800b5b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d003      	beq.n	800b5c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	631a      	str	r2, [r3, #48]	@ 0x30
 800b5be:	e005      	b.n	800b5cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5c0:	6978      	ldr	r0, [r7, #20]
 800b5c2:	f001 fd39 	bl	800d038 <vPortFree>
 800b5c6:	e001      	b.n	800b5cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d017      	beq.n	800b602 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5da:	88fa      	ldrh	r2, [r7, #6]
 800b5dc:	2300      	movs	r3, #0
 800b5de:	9303      	str	r3, [sp, #12]
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	9302      	str	r3, [sp, #8]
 800b5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5e6:	9301      	str	r3, [sp, #4]
 800b5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	68b9      	ldr	r1, [r7, #8]
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f000 f80f 	bl	800b614 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5f6:	69f8      	ldr	r0, [r7, #28]
 800b5f8:	f000 f8b4 	bl	800b764 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	61bb      	str	r3, [r7, #24]
 800b600:	e002      	b.n	800b608 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b602:	f04f 33ff 	mov.w	r3, #4294967295
 800b606:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b608:	69bb      	ldr	r3, [r7, #24]
	}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3720      	adds	r7, #32
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
	...

0800b614 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
 800b620:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b624:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	461a      	mov	r2, r3
 800b62c:	21a5      	movs	r1, #165	@ 0xa5
 800b62e:	f002 fdd8 	bl	800e1e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b634:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b63c:	3b01      	subs	r3, #1
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4413      	add	r3, r2
 800b642:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	f023 0307 	bic.w	r3, r3, #7
 800b64a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	f003 0307 	and.w	r3, r3, #7
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00b      	beq.n	800b66e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b65a:	f383 8811 	msr	BASEPRI, r3
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	f3bf 8f4f 	dsb	sy
 800b666:	617b      	str	r3, [r7, #20]
}
 800b668:	bf00      	nop
 800b66a:	bf00      	nop
 800b66c:	e7fd      	b.n	800b66a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d01f      	beq.n	800b6b4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b674:	2300      	movs	r3, #0
 800b676:	61fb      	str	r3, [r7, #28]
 800b678:	e012      	b.n	800b6a0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	4413      	add	r3, r2
 800b680:	7819      	ldrb	r1, [r3, #0]
 800b682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	4413      	add	r3, r2
 800b688:	3334      	adds	r3, #52	@ 0x34
 800b68a:	460a      	mov	r2, r1
 800b68c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	4413      	add	r3, r2
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d006      	beq.n	800b6a8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	3301      	adds	r3, #1
 800b69e:	61fb      	str	r3, [r7, #28]
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	2b0f      	cmp	r3, #15
 800b6a4:	d9e9      	bls.n	800b67a <prvInitialiseNewTask+0x66>
 800b6a6:	e000      	b.n	800b6aa <prvInitialiseNewTask+0x96>
			{
				break;
 800b6a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b6b2:	e003      	b.n	800b6bc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6be:	2b37      	cmp	r3, #55	@ 0x37
 800b6c0:	d901      	bls.n	800b6c6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6c2:	2337      	movs	r3, #55	@ 0x37
 800b6c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6da:	3304      	adds	r3, #4
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7ff f965 	bl	800a9ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e4:	3318      	adds	r3, #24
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7ff f960 	bl	800a9ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b700:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b704:	2200      	movs	r2, #0
 800b706:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70c:	2200      	movs	r2, #0
 800b70e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b714:	3354      	adds	r3, #84	@ 0x54
 800b716:	224c      	movs	r2, #76	@ 0x4c
 800b718:	2100      	movs	r1, #0
 800b71a:	4618      	mov	r0, r3
 800b71c:	f002 fd61 	bl	800e1e2 <memset>
 800b720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b722:	4a0d      	ldr	r2, [pc, #52]	@ (800b758 <prvInitialiseNewTask+0x144>)
 800b724:	659a      	str	r2, [r3, #88]	@ 0x58
 800b726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b728:	4a0c      	ldr	r2, [pc, #48]	@ (800b75c <prvInitialiseNewTask+0x148>)
 800b72a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b72e:	4a0c      	ldr	r2, [pc, #48]	@ (800b760 <prvInitialiseNewTask+0x14c>)
 800b730:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	68f9      	ldr	r1, [r7, #12]
 800b736:	69b8      	ldr	r0, [r7, #24]
 800b738:	f001 f95a 	bl	800c9f0 <pxPortInitialiseStack>
 800b73c:	4602      	mov	r2, r0
 800b73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b740:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b744:	2b00      	cmp	r3, #0
 800b746:	d002      	beq.n	800b74e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b74a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b74c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b74e:	bf00      	nop
 800b750:	3720      	adds	r7, #32
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	20005584 	.word	0x20005584
 800b75c:	200055ec 	.word	0x200055ec
 800b760:	20005654 	.word	0x20005654

0800b764 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b76c:	f001 fa74 	bl	800cc58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b770:	4b2d      	ldr	r3, [pc, #180]	@ (800b828 <prvAddNewTaskToReadyList+0xc4>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3301      	adds	r3, #1
 800b776:	4a2c      	ldr	r2, [pc, #176]	@ (800b828 <prvAddNewTaskToReadyList+0xc4>)
 800b778:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b77a:	4b2c      	ldr	r3, [pc, #176]	@ (800b82c <prvAddNewTaskToReadyList+0xc8>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d109      	bne.n	800b796 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b782:	4a2a      	ldr	r2, [pc, #168]	@ (800b82c <prvAddNewTaskToReadyList+0xc8>)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b788:	4b27      	ldr	r3, [pc, #156]	@ (800b828 <prvAddNewTaskToReadyList+0xc4>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d110      	bne.n	800b7b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b790:	f000 fc2e 	bl	800bff0 <prvInitialiseTaskLists>
 800b794:	e00d      	b.n	800b7b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b796:	4b26      	ldr	r3, [pc, #152]	@ (800b830 <prvAddNewTaskToReadyList+0xcc>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d109      	bne.n	800b7b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b79e:	4b23      	ldr	r3, [pc, #140]	@ (800b82c <prvAddNewTaskToReadyList+0xc8>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d802      	bhi.n	800b7b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b7ac:	4a1f      	ldr	r2, [pc, #124]	@ (800b82c <prvAddNewTaskToReadyList+0xc8>)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7b2:	4b20      	ldr	r3, [pc, #128]	@ (800b834 <prvAddNewTaskToReadyList+0xd0>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	4a1e      	ldr	r2, [pc, #120]	@ (800b834 <prvAddNewTaskToReadyList+0xd0>)
 800b7ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b7bc:	4b1d      	ldr	r3, [pc, #116]	@ (800b834 <prvAddNewTaskToReadyList+0xd0>)
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7c8:	4b1b      	ldr	r3, [pc, #108]	@ (800b838 <prvAddNewTaskToReadyList+0xd4>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d903      	bls.n	800b7d8 <prvAddNewTaskToReadyList+0x74>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d4:	4a18      	ldr	r2, [pc, #96]	@ (800b838 <prvAddNewTaskToReadyList+0xd4>)
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7dc:	4613      	mov	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4a15      	ldr	r2, [pc, #84]	@ (800b83c <prvAddNewTaskToReadyList+0xd8>)
 800b7e6:	441a      	add	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	3304      	adds	r3, #4
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	f7ff f8e9 	bl	800a9c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7f4:	f001 fa62 	bl	800ccbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7f8:	4b0d      	ldr	r3, [pc, #52]	@ (800b830 <prvAddNewTaskToReadyList+0xcc>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00e      	beq.n	800b81e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b800:	4b0a      	ldr	r3, [pc, #40]	@ (800b82c <prvAddNewTaskToReadyList+0xc8>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d207      	bcs.n	800b81e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b80e:	4b0c      	ldr	r3, [pc, #48]	@ (800b840 <prvAddNewTaskToReadyList+0xdc>)
 800b810:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b814:	601a      	str	r2, [r3, #0]
 800b816:	f3bf 8f4f 	dsb	sy
 800b81a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b81e:	bf00      	nop
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	20001404 	.word	0x20001404
 800b82c:	20000f30 	.word	0x20000f30
 800b830:	20001410 	.word	0x20001410
 800b834:	20001420 	.word	0x20001420
 800b838:	2000140c 	.word	0x2000140c
 800b83c:	20000f34 	.word	0x20000f34
 800b840:	e000ed04 	.word	0xe000ed04

0800b844 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b84c:	2300      	movs	r3, #0
 800b84e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d018      	beq.n	800b888 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b856:	4b14      	ldr	r3, [pc, #80]	@ (800b8a8 <vTaskDelay+0x64>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00b      	beq.n	800b876 <vTaskDelay+0x32>
	__asm volatile
 800b85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	60bb      	str	r3, [r7, #8]
}
 800b870:	bf00      	nop
 800b872:	bf00      	nop
 800b874:	e7fd      	b.n	800b872 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b876:	f000 f88b 	bl	800b990 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b87a:	2100      	movs	r1, #0
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 fd09 	bl	800c294 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b882:	f000 f893 	bl	800b9ac <xTaskResumeAll>
 800b886:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d107      	bne.n	800b89e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b88e:	4b07      	ldr	r3, [pc, #28]	@ (800b8ac <vTaskDelay+0x68>)
 800b890:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b894:	601a      	str	r2, [r3, #0]
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b89e:	bf00      	nop
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	2000142c 	.word	0x2000142c
 800b8ac:	e000ed04 	.word	0xe000ed04

0800b8b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b08a      	sub	sp, #40	@ 0x28
 800b8b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8be:	463a      	mov	r2, r7
 800b8c0:	1d39      	adds	r1, r7, #4
 800b8c2:	f107 0308 	add.w	r3, r7, #8
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7ff f81c 	bl	800a904 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8cc:	6839      	ldr	r1, [r7, #0]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	9202      	str	r2, [sp, #8]
 800b8d4:	9301      	str	r3, [sp, #4]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	2300      	movs	r3, #0
 800b8dc:	460a      	mov	r2, r1
 800b8de:	4924      	ldr	r1, [pc, #144]	@ (800b970 <vTaskStartScheduler+0xc0>)
 800b8e0:	4824      	ldr	r0, [pc, #144]	@ (800b974 <vTaskStartScheduler+0xc4>)
 800b8e2:	f7ff fdf1 	bl	800b4c8 <xTaskCreateStatic>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	4a23      	ldr	r2, [pc, #140]	@ (800b978 <vTaskStartScheduler+0xc8>)
 800b8ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8ec:	4b22      	ldr	r3, [pc, #136]	@ (800b978 <vTaskStartScheduler+0xc8>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	617b      	str	r3, [r7, #20]
 800b8f8:	e001      	b.n	800b8fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2b01      	cmp	r3, #1
 800b902:	d102      	bne.n	800b90a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b904:	f000 fd1a 	bl	800c33c <xTimerCreateTimerTask>
 800b908:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d11b      	bne.n	800b948 <vTaskStartScheduler+0x98>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	613b      	str	r3, [r7, #16]
}
 800b922:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b924:	4b15      	ldr	r3, [pc, #84]	@ (800b97c <vTaskStartScheduler+0xcc>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	3354      	adds	r3, #84	@ 0x54
 800b92a:	4a15      	ldr	r2, [pc, #84]	@ (800b980 <vTaskStartScheduler+0xd0>)
 800b92c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b92e:	4b15      	ldr	r3, [pc, #84]	@ (800b984 <vTaskStartScheduler+0xd4>)
 800b930:	f04f 32ff 	mov.w	r2, #4294967295
 800b934:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b936:	4b14      	ldr	r3, [pc, #80]	@ (800b988 <vTaskStartScheduler+0xd8>)
 800b938:	2201      	movs	r2, #1
 800b93a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b93c:	4b13      	ldr	r3, [pc, #76]	@ (800b98c <vTaskStartScheduler+0xdc>)
 800b93e:	2200      	movs	r2, #0
 800b940:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b942:	f001 f8e5 	bl	800cb10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b946:	e00f      	b.n	800b968 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94e:	d10b      	bne.n	800b968 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	60fb      	str	r3, [r7, #12]
}
 800b962:	bf00      	nop
 800b964:	bf00      	nop
 800b966:	e7fd      	b.n	800b964 <vTaskStartScheduler+0xb4>
}
 800b968:	bf00      	nop
 800b96a:	3718      	adds	r7, #24
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	080105e4 	.word	0x080105e4
 800b974:	0800bfc1 	.word	0x0800bfc1
 800b978:	20001428 	.word	0x20001428
 800b97c:	20000f30 	.word	0x20000f30
 800b980:	20000020 	.word	0x20000020
 800b984:	20001424 	.word	0x20001424
 800b988:	20001410 	.word	0x20001410
 800b98c:	20001408 	.word	0x20001408

0800b990 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b990:	b480      	push	{r7}
 800b992:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b994:	4b04      	ldr	r3, [pc, #16]	@ (800b9a8 <vTaskSuspendAll+0x18>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	3301      	adds	r3, #1
 800b99a:	4a03      	ldr	r2, [pc, #12]	@ (800b9a8 <vTaskSuspendAll+0x18>)
 800b99c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b99e:	bf00      	nop
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr
 800b9a8:	2000142c 	.word	0x2000142c

0800b9ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9ba:	4b42      	ldr	r3, [pc, #264]	@ (800bac4 <xTaskResumeAll+0x118>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d10b      	bne.n	800b9da <xTaskResumeAll+0x2e>
	__asm volatile
 800b9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	603b      	str	r3, [r7, #0]
}
 800b9d4:	bf00      	nop
 800b9d6:	bf00      	nop
 800b9d8:	e7fd      	b.n	800b9d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9da:	f001 f93d 	bl	800cc58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9de:	4b39      	ldr	r3, [pc, #228]	@ (800bac4 <xTaskResumeAll+0x118>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3b01      	subs	r3, #1
 800b9e4:	4a37      	ldr	r2, [pc, #220]	@ (800bac4 <xTaskResumeAll+0x118>)
 800b9e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9e8:	4b36      	ldr	r3, [pc, #216]	@ (800bac4 <xTaskResumeAll+0x118>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d162      	bne.n	800bab6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9f0:	4b35      	ldr	r3, [pc, #212]	@ (800bac8 <xTaskResumeAll+0x11c>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d05e      	beq.n	800bab6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9f8:	e02f      	b.n	800ba5a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9fa:	4b34      	ldr	r3, [pc, #208]	@ (800bacc <xTaskResumeAll+0x120>)
 800b9fc:	68db      	ldr	r3, [r3, #12]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	3318      	adds	r3, #24
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7ff f83a 	bl	800aa80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	3304      	adds	r3, #4
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7ff f835 	bl	800aa80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba1a:	4b2d      	ldr	r3, [pc, #180]	@ (800bad0 <xTaskResumeAll+0x124>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d903      	bls.n	800ba2a <xTaskResumeAll+0x7e>
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba26:	4a2a      	ldr	r2, [pc, #168]	@ (800bad0 <xTaskResumeAll+0x124>)
 800ba28:	6013      	str	r3, [r2, #0]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba2e:	4613      	mov	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	4a27      	ldr	r2, [pc, #156]	@ (800bad4 <xTaskResumeAll+0x128>)
 800ba38:	441a      	add	r2, r3
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4610      	mov	r0, r2
 800ba42:	f7fe ffc0 	bl	800a9c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba4a:	4b23      	ldr	r3, [pc, #140]	@ (800bad8 <xTaskResumeAll+0x12c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d302      	bcc.n	800ba5a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ba54:	4b21      	ldr	r3, [pc, #132]	@ (800badc <xTaskResumeAll+0x130>)
 800ba56:	2201      	movs	r2, #1
 800ba58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba5a:	4b1c      	ldr	r3, [pc, #112]	@ (800bacc <xTaskResumeAll+0x120>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1cb      	bne.n	800b9fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d001      	beq.n	800ba6c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba68:	f000 fb66 	bl	800c138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba6c:	4b1c      	ldr	r3, [pc, #112]	@ (800bae0 <xTaskResumeAll+0x134>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d010      	beq.n	800ba9a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba78:	f000 f846 	bl	800bb08 <xTaskIncrementTick>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ba82:	4b16      	ldr	r3, [pc, #88]	@ (800badc <xTaskResumeAll+0x130>)
 800ba84:	2201      	movs	r2, #1
 800ba86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1f1      	bne.n	800ba78 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ba94:	4b12      	ldr	r3, [pc, #72]	@ (800bae0 <xTaskResumeAll+0x134>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba9a:	4b10      	ldr	r3, [pc, #64]	@ (800badc <xTaskResumeAll+0x130>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d009      	beq.n	800bab6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800baa2:	2301      	movs	r3, #1
 800baa4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800baa6:	4b0f      	ldr	r3, [pc, #60]	@ (800bae4 <xTaskResumeAll+0x138>)
 800baa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baac:	601a      	str	r2, [r3, #0]
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bab6:	f001 f901 	bl	800ccbc <vPortExitCritical>

	return xAlreadyYielded;
 800baba:	68bb      	ldr	r3, [r7, #8]
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	2000142c 	.word	0x2000142c
 800bac8:	20001404 	.word	0x20001404
 800bacc:	200013c4 	.word	0x200013c4
 800bad0:	2000140c 	.word	0x2000140c
 800bad4:	20000f34 	.word	0x20000f34
 800bad8:	20000f30 	.word	0x20000f30
 800badc:	20001418 	.word	0x20001418
 800bae0:	20001414 	.word	0x20001414
 800bae4:	e000ed04 	.word	0xe000ed04

0800bae8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800baee:	4b05      	ldr	r3, [pc, #20]	@ (800bb04 <xTaskGetTickCount+0x1c>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800baf4:	687b      	ldr	r3, [r7, #4]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	20001408 	.word	0x20001408

0800bb08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb12:	4b4f      	ldr	r3, [pc, #316]	@ (800bc50 <xTaskIncrementTick+0x148>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f040 8090 	bne.w	800bc3c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb1c:	4b4d      	ldr	r3, [pc, #308]	@ (800bc54 <xTaskIncrementTick+0x14c>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	3301      	adds	r3, #1
 800bb22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb24:	4a4b      	ldr	r2, [pc, #300]	@ (800bc54 <xTaskIncrementTick+0x14c>)
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d121      	bne.n	800bb74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb30:	4b49      	ldr	r3, [pc, #292]	@ (800bc58 <xTaskIncrementTick+0x150>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00b      	beq.n	800bb52 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	603b      	str	r3, [r7, #0]
}
 800bb4c:	bf00      	nop
 800bb4e:	bf00      	nop
 800bb50:	e7fd      	b.n	800bb4e <xTaskIncrementTick+0x46>
 800bb52:	4b41      	ldr	r3, [pc, #260]	@ (800bc58 <xTaskIncrementTick+0x150>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	60fb      	str	r3, [r7, #12]
 800bb58:	4b40      	ldr	r3, [pc, #256]	@ (800bc5c <xTaskIncrementTick+0x154>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a3e      	ldr	r2, [pc, #248]	@ (800bc58 <xTaskIncrementTick+0x150>)
 800bb5e:	6013      	str	r3, [r2, #0]
 800bb60:	4a3e      	ldr	r2, [pc, #248]	@ (800bc5c <xTaskIncrementTick+0x154>)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	4b3e      	ldr	r3, [pc, #248]	@ (800bc60 <xTaskIncrementTick+0x158>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	4a3c      	ldr	r2, [pc, #240]	@ (800bc60 <xTaskIncrementTick+0x158>)
 800bb6e:	6013      	str	r3, [r2, #0]
 800bb70:	f000 fae2 	bl	800c138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb74:	4b3b      	ldr	r3, [pc, #236]	@ (800bc64 <xTaskIncrementTick+0x15c>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d349      	bcc.n	800bc12 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb7e:	4b36      	ldr	r3, [pc, #216]	@ (800bc58 <xTaskIncrementTick+0x150>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d104      	bne.n	800bb92 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb88:	4b36      	ldr	r3, [pc, #216]	@ (800bc64 <xTaskIncrementTick+0x15c>)
 800bb8a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb8e:	601a      	str	r2, [r3, #0]
					break;
 800bb90:	e03f      	b.n	800bc12 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb92:	4b31      	ldr	r3, [pc, #196]	@ (800bc58 <xTaskIncrementTick+0x150>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	68db      	ldr	r3, [r3, #12]
 800bb9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bba2:	693a      	ldr	r2, [r7, #16]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d203      	bcs.n	800bbb2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bbaa:	4a2e      	ldr	r2, [pc, #184]	@ (800bc64 <xTaskIncrementTick+0x15c>)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bbb0:	e02f      	b.n	800bc12 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fe ff62 	bl	800aa80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d004      	beq.n	800bbce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	3318      	adds	r3, #24
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fe ff59 	bl	800aa80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbd2:	4b25      	ldr	r3, [pc, #148]	@ (800bc68 <xTaskIncrementTick+0x160>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d903      	bls.n	800bbe2 <xTaskIncrementTick+0xda>
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbde:	4a22      	ldr	r2, [pc, #136]	@ (800bc68 <xTaskIncrementTick+0x160>)
 800bbe0:	6013      	str	r3, [r2, #0]
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	4413      	add	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4a1f      	ldr	r2, [pc, #124]	@ (800bc6c <xTaskIncrementTick+0x164>)
 800bbf0:	441a      	add	r2, r3
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	3304      	adds	r3, #4
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	4610      	mov	r0, r2
 800bbfa:	f7fe fee4 	bl	800a9c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc02:	4b1b      	ldr	r3, [pc, #108]	@ (800bc70 <xTaskIncrementTick+0x168>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d3b8      	bcc.n	800bb7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc10:	e7b5      	b.n	800bb7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc12:	4b17      	ldr	r3, [pc, #92]	@ (800bc70 <xTaskIncrementTick+0x168>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc18:	4914      	ldr	r1, [pc, #80]	@ (800bc6c <xTaskIncrementTick+0x164>)
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4413      	add	r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	440b      	add	r3, r1
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d901      	bls.n	800bc2e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc2e:	4b11      	ldr	r3, [pc, #68]	@ (800bc74 <xTaskIncrementTick+0x16c>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d007      	beq.n	800bc46 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bc36:	2301      	movs	r3, #1
 800bc38:	617b      	str	r3, [r7, #20]
 800bc3a:	e004      	b.n	800bc46 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc3c:	4b0e      	ldr	r3, [pc, #56]	@ (800bc78 <xTaskIncrementTick+0x170>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	3301      	adds	r3, #1
 800bc42:	4a0d      	ldr	r2, [pc, #52]	@ (800bc78 <xTaskIncrementTick+0x170>)
 800bc44:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc46:	697b      	ldr	r3, [r7, #20]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3718      	adds	r7, #24
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	2000142c 	.word	0x2000142c
 800bc54:	20001408 	.word	0x20001408
 800bc58:	200013bc 	.word	0x200013bc
 800bc5c:	200013c0 	.word	0x200013c0
 800bc60:	2000141c 	.word	0x2000141c
 800bc64:	20001424 	.word	0x20001424
 800bc68:	2000140c 	.word	0x2000140c
 800bc6c:	20000f34 	.word	0x20000f34
 800bc70:	20000f30 	.word	0x20000f30
 800bc74:	20001418 	.word	0x20001418
 800bc78:	20001414 	.word	0x20001414

0800bc7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc82:	4b2b      	ldr	r3, [pc, #172]	@ (800bd30 <vTaskSwitchContext+0xb4>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d003      	beq.n	800bc92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc8a:	4b2a      	ldr	r3, [pc, #168]	@ (800bd34 <vTaskSwitchContext+0xb8>)
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc90:	e047      	b.n	800bd22 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800bc92:	4b28      	ldr	r3, [pc, #160]	@ (800bd34 <vTaskSwitchContext+0xb8>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc98:	4b27      	ldr	r3, [pc, #156]	@ (800bd38 <vTaskSwitchContext+0xbc>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	60fb      	str	r3, [r7, #12]
 800bc9e:	e011      	b.n	800bcc4 <vTaskSwitchContext+0x48>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10b      	bne.n	800bcbe <vTaskSwitchContext+0x42>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	607b      	str	r3, [r7, #4]
}
 800bcb8:	bf00      	nop
 800bcba:	bf00      	nop
 800bcbc:	e7fd      	b.n	800bcba <vTaskSwitchContext+0x3e>
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	60fb      	str	r3, [r7, #12]
 800bcc4:	491d      	ldr	r1, [pc, #116]	@ (800bd3c <vTaskSwitchContext+0xc0>)
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	4613      	mov	r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	4413      	add	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	440b      	add	r3, r1
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d0e3      	beq.n	800bca0 <vTaskSwitchContext+0x24>
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	4a16      	ldr	r2, [pc, #88]	@ (800bd3c <vTaskSwitchContext+0xc0>)
 800bce4:	4413      	add	r3, r2
 800bce6:	60bb      	str	r3, [r7, #8]
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	685a      	ldr	r2, [r3, #4]
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	605a      	str	r2, [r3, #4]
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	685a      	ldr	r2, [r3, #4]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d104      	bne.n	800bd08 <vTaskSwitchContext+0x8c>
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	685a      	ldr	r2, [r3, #4]
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	605a      	str	r2, [r3, #4]
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	4a0c      	ldr	r2, [pc, #48]	@ (800bd40 <vTaskSwitchContext+0xc4>)
 800bd10:	6013      	str	r3, [r2, #0]
 800bd12:	4a09      	ldr	r2, [pc, #36]	@ (800bd38 <vTaskSwitchContext+0xbc>)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd18:	4b09      	ldr	r3, [pc, #36]	@ (800bd40 <vTaskSwitchContext+0xc4>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	3354      	adds	r3, #84	@ 0x54
 800bd1e:	4a09      	ldr	r2, [pc, #36]	@ (800bd44 <vTaskSwitchContext+0xc8>)
 800bd20:	6013      	str	r3, [r2, #0]
}
 800bd22:	bf00      	nop
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	2000142c 	.word	0x2000142c
 800bd34:	20001418 	.word	0x20001418
 800bd38:	2000140c 	.word	0x2000140c
 800bd3c:	20000f34 	.word	0x20000f34
 800bd40:	20000f30 	.word	0x20000f30
 800bd44:	20000020 	.word	0x20000020

0800bd48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d10b      	bne.n	800bd70 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bd58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	60fb      	str	r3, [r7, #12]
}
 800bd6a:	bf00      	nop
 800bd6c:	bf00      	nop
 800bd6e:	e7fd      	b.n	800bd6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd70:	4b07      	ldr	r3, [pc, #28]	@ (800bd90 <vTaskPlaceOnEventList+0x48>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	3318      	adds	r3, #24
 800bd76:	4619      	mov	r1, r3
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f7fe fe48 	bl	800aa0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd7e:	2101      	movs	r1, #1
 800bd80:	6838      	ldr	r0, [r7, #0]
 800bd82:	f000 fa87 	bl	800c294 <prvAddCurrentTaskToDelayedList>
}
 800bd86:	bf00      	nop
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	20000f30 	.word	0x20000f30

0800bd94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10b      	bne.n	800bdbe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	617b      	str	r3, [r7, #20]
}
 800bdb8:	bf00      	nop
 800bdba:	bf00      	nop
 800bdbc:	e7fd      	b.n	800bdba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdbe:	4b0a      	ldr	r3, [pc, #40]	@ (800bde8 <vTaskPlaceOnEventListRestricted+0x54>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3318      	adds	r3, #24
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f7fe fdfd 	bl	800a9c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d002      	beq.n	800bdd8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bdd2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdd6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bdd8:	6879      	ldr	r1, [r7, #4]
 800bdda:	68b8      	ldr	r0, [r7, #8]
 800bddc:	f000 fa5a 	bl	800c294 <prvAddCurrentTaskToDelayedList>
	}
 800bde0:	bf00      	nop
 800bde2:	3718      	adds	r7, #24
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	20000f30 	.word	0x20000f30

0800bdec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d10b      	bne.n	800be1a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800be02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be06:	f383 8811 	msr	BASEPRI, r3
 800be0a:	f3bf 8f6f 	isb	sy
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	60fb      	str	r3, [r7, #12]
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop
 800be18:	e7fd      	b.n	800be16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	3318      	adds	r3, #24
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fe fe2e 	bl	800aa80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be24:	4b1d      	ldr	r3, [pc, #116]	@ (800be9c <xTaskRemoveFromEventList+0xb0>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d11d      	bne.n	800be68 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	3304      	adds	r3, #4
 800be30:	4618      	mov	r0, r3
 800be32:	f7fe fe25 	bl	800aa80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be3a:	4b19      	ldr	r3, [pc, #100]	@ (800bea0 <xTaskRemoveFromEventList+0xb4>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d903      	bls.n	800be4a <xTaskRemoveFromEventList+0x5e>
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be46:	4a16      	ldr	r2, [pc, #88]	@ (800bea0 <xTaskRemoveFromEventList+0xb4>)
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be4e:	4613      	mov	r3, r2
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	4413      	add	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	4a13      	ldr	r2, [pc, #76]	@ (800bea4 <xTaskRemoveFromEventList+0xb8>)
 800be58:	441a      	add	r2, r3
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	3304      	adds	r3, #4
 800be5e:	4619      	mov	r1, r3
 800be60:	4610      	mov	r0, r2
 800be62:	f7fe fdb0 	bl	800a9c6 <vListInsertEnd>
 800be66:	e005      	b.n	800be74 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	3318      	adds	r3, #24
 800be6c:	4619      	mov	r1, r3
 800be6e:	480e      	ldr	r0, [pc, #56]	@ (800bea8 <xTaskRemoveFromEventList+0xbc>)
 800be70:	f7fe fda9 	bl	800a9c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be78:	4b0c      	ldr	r3, [pc, #48]	@ (800beac <xTaskRemoveFromEventList+0xc0>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be7e:	429a      	cmp	r2, r3
 800be80:	d905      	bls.n	800be8e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be82:	2301      	movs	r3, #1
 800be84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be86:	4b0a      	ldr	r3, [pc, #40]	@ (800beb0 <xTaskRemoveFromEventList+0xc4>)
 800be88:	2201      	movs	r2, #1
 800be8a:	601a      	str	r2, [r3, #0]
 800be8c:	e001      	b.n	800be92 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800be8e:	2300      	movs	r3, #0
 800be90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be92:	697b      	ldr	r3, [r7, #20]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3718      	adds	r7, #24
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	2000142c 	.word	0x2000142c
 800bea0:	2000140c 	.word	0x2000140c
 800bea4:	20000f34 	.word	0x20000f34
 800bea8:	200013c4 	.word	0x200013c4
 800beac:	20000f30 	.word	0x20000f30
 800beb0:	20001418 	.word	0x20001418

0800beb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bebc:	4b06      	ldr	r3, [pc, #24]	@ (800bed8 <vTaskInternalSetTimeOutState+0x24>)
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bec4:	4b05      	ldr	r3, [pc, #20]	@ (800bedc <vTaskInternalSetTimeOutState+0x28>)
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	605a      	str	r2, [r3, #4]
}
 800becc:	bf00      	nop
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	2000141c 	.word	0x2000141c
 800bedc:	20001408 	.word	0x20001408

0800bee0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b088      	sub	sp, #32
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10b      	bne.n	800bf08 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	613b      	str	r3, [r7, #16]
}
 800bf02:	bf00      	nop
 800bf04:	bf00      	nop
 800bf06:	e7fd      	b.n	800bf04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10b      	bne.n	800bf26 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	60fb      	str	r3, [r7, #12]
}
 800bf20:	bf00      	nop
 800bf22:	bf00      	nop
 800bf24:	e7fd      	b.n	800bf22 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bf26:	f000 fe97 	bl	800cc58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bf2a:	4b1d      	ldr	r3, [pc, #116]	@ (800bfa0 <xTaskCheckForTimeOut+0xc0>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	69ba      	ldr	r2, [r7, #24]
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf42:	d102      	bne.n	800bf4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf44:	2300      	movs	r3, #0
 800bf46:	61fb      	str	r3, [r7, #28]
 800bf48:	e023      	b.n	800bf92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	4b15      	ldr	r3, [pc, #84]	@ (800bfa4 <xTaskCheckForTimeOut+0xc4>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d007      	beq.n	800bf66 <xTaskCheckForTimeOut+0x86>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	69ba      	ldr	r2, [r7, #24]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d302      	bcc.n	800bf66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf60:	2301      	movs	r3, #1
 800bf62:	61fb      	str	r3, [r7, #28]
 800bf64:	e015      	b.n	800bf92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	697a      	ldr	r2, [r7, #20]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d20b      	bcs.n	800bf88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	1ad2      	subs	r2, r2, r3
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f7ff ff99 	bl	800beb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf82:	2300      	movs	r3, #0
 800bf84:	61fb      	str	r3, [r7, #28]
 800bf86:	e004      	b.n	800bf92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf92:	f000 fe93 	bl	800ccbc <vPortExitCritical>

	return xReturn;
 800bf96:	69fb      	ldr	r3, [r7, #28]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3720      	adds	r7, #32
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	20001408 	.word	0x20001408
 800bfa4:	2000141c 	.word	0x2000141c

0800bfa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bfac:	4b03      	ldr	r3, [pc, #12]	@ (800bfbc <vTaskMissedYield+0x14>)
 800bfae:	2201      	movs	r2, #1
 800bfb0:	601a      	str	r2, [r3, #0]
}
 800bfb2:	bf00      	nop
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr
 800bfbc:	20001418 	.word	0x20001418

0800bfc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bfc8:	f000 f852 	bl	800c070 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bfcc:	4b06      	ldr	r3, [pc, #24]	@ (800bfe8 <prvIdleTask+0x28>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d9f9      	bls.n	800bfc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bfd4:	4b05      	ldr	r3, [pc, #20]	@ (800bfec <prvIdleTask+0x2c>)
 800bfd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bfe4:	e7f0      	b.n	800bfc8 <prvIdleTask+0x8>
 800bfe6:	bf00      	nop
 800bfe8:	20000f34 	.word	0x20000f34
 800bfec:	e000ed04 	.word	0xe000ed04

0800bff0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bff6:	2300      	movs	r3, #0
 800bff8:	607b      	str	r3, [r7, #4]
 800bffa:	e00c      	b.n	800c016 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	4613      	mov	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	4413      	add	r3, r2
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	4a12      	ldr	r2, [pc, #72]	@ (800c050 <prvInitialiseTaskLists+0x60>)
 800c008:	4413      	add	r3, r2
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fe fcae 	bl	800a96c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	3301      	adds	r3, #1
 800c014:	607b      	str	r3, [r7, #4]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2b37      	cmp	r3, #55	@ 0x37
 800c01a:	d9ef      	bls.n	800bffc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c01c:	480d      	ldr	r0, [pc, #52]	@ (800c054 <prvInitialiseTaskLists+0x64>)
 800c01e:	f7fe fca5 	bl	800a96c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c022:	480d      	ldr	r0, [pc, #52]	@ (800c058 <prvInitialiseTaskLists+0x68>)
 800c024:	f7fe fca2 	bl	800a96c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c028:	480c      	ldr	r0, [pc, #48]	@ (800c05c <prvInitialiseTaskLists+0x6c>)
 800c02a:	f7fe fc9f 	bl	800a96c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c02e:	480c      	ldr	r0, [pc, #48]	@ (800c060 <prvInitialiseTaskLists+0x70>)
 800c030:	f7fe fc9c 	bl	800a96c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c034:	480b      	ldr	r0, [pc, #44]	@ (800c064 <prvInitialiseTaskLists+0x74>)
 800c036:	f7fe fc99 	bl	800a96c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c03a:	4b0b      	ldr	r3, [pc, #44]	@ (800c068 <prvInitialiseTaskLists+0x78>)
 800c03c:	4a05      	ldr	r2, [pc, #20]	@ (800c054 <prvInitialiseTaskLists+0x64>)
 800c03e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c040:	4b0a      	ldr	r3, [pc, #40]	@ (800c06c <prvInitialiseTaskLists+0x7c>)
 800c042:	4a05      	ldr	r2, [pc, #20]	@ (800c058 <prvInitialiseTaskLists+0x68>)
 800c044:	601a      	str	r2, [r3, #0]
}
 800c046:	bf00      	nop
 800c048:	3708      	adds	r7, #8
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	20000f34 	.word	0x20000f34
 800c054:	20001394 	.word	0x20001394
 800c058:	200013a8 	.word	0x200013a8
 800c05c:	200013c4 	.word	0x200013c4
 800c060:	200013d8 	.word	0x200013d8
 800c064:	200013f0 	.word	0x200013f0
 800c068:	200013bc 	.word	0x200013bc
 800c06c:	200013c0 	.word	0x200013c0

0800c070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c076:	e019      	b.n	800c0ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c078:	f000 fdee 	bl	800cc58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c07c:	4b10      	ldr	r3, [pc, #64]	@ (800c0c0 <prvCheckTasksWaitingTermination+0x50>)
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	3304      	adds	r3, #4
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fe fcf9 	bl	800aa80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c08e:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c4 <prvCheckTasksWaitingTermination+0x54>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	3b01      	subs	r3, #1
 800c094:	4a0b      	ldr	r2, [pc, #44]	@ (800c0c4 <prvCheckTasksWaitingTermination+0x54>)
 800c096:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c098:	4b0b      	ldr	r3, [pc, #44]	@ (800c0c8 <prvCheckTasksWaitingTermination+0x58>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	3b01      	subs	r3, #1
 800c09e:	4a0a      	ldr	r2, [pc, #40]	@ (800c0c8 <prvCheckTasksWaitingTermination+0x58>)
 800c0a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c0a2:	f000 fe0b 	bl	800ccbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 f810 	bl	800c0cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0ac:	4b06      	ldr	r3, [pc, #24]	@ (800c0c8 <prvCheckTasksWaitingTermination+0x58>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1e1      	bne.n	800c078 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop
 800c0b8:	3708      	adds	r7, #8
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	200013d8 	.word	0x200013d8
 800c0c4:	20001404 	.word	0x20001404
 800c0c8:	200013ec 	.word	0x200013ec

0800c0cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	3354      	adds	r3, #84	@ 0x54
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f002 f8c3 	bl	800e264 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d108      	bne.n	800c0fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f000 ffa3 	bl	800d038 <vPortFree>
				vPortFree( pxTCB );
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 ffa0 	bl	800d038 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c0f8:	e019      	b.n	800c12e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c100:	2b01      	cmp	r3, #1
 800c102:	d103      	bne.n	800c10c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 ff97 	bl	800d038 <vPortFree>
	}
 800c10a:	e010      	b.n	800c12e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c112:	2b02      	cmp	r3, #2
 800c114:	d00b      	beq.n	800c12e <prvDeleteTCB+0x62>
	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c11a:	f383 8811 	msr	BASEPRI, r3
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	60fb      	str	r3, [r7, #12]
}
 800c128:	bf00      	nop
 800c12a:	bf00      	nop
 800c12c:	e7fd      	b.n	800c12a <prvDeleteTCB+0x5e>
	}
 800c12e:	bf00      	nop
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
	...

0800c138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c13e:	4b0c      	ldr	r3, [pc, #48]	@ (800c170 <prvResetNextTaskUnblockTime+0x38>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d104      	bne.n	800c152 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c148:	4b0a      	ldr	r3, [pc, #40]	@ (800c174 <prvResetNextTaskUnblockTime+0x3c>)
 800c14a:	f04f 32ff 	mov.w	r2, #4294967295
 800c14e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c150:	e008      	b.n	800c164 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c152:	4b07      	ldr	r3, [pc, #28]	@ (800c170 <prvResetNextTaskUnblockTime+0x38>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	4a04      	ldr	r2, [pc, #16]	@ (800c174 <prvResetNextTaskUnblockTime+0x3c>)
 800c162:	6013      	str	r3, [r2, #0]
}
 800c164:	bf00      	nop
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr
 800c170:	200013bc 	.word	0x200013bc
 800c174:	20001424 	.word	0x20001424

0800c178 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c17e:	4b0b      	ldr	r3, [pc, #44]	@ (800c1ac <xTaskGetSchedulerState+0x34>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d102      	bne.n	800c18c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c186:	2301      	movs	r3, #1
 800c188:	607b      	str	r3, [r7, #4]
 800c18a:	e008      	b.n	800c19e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c18c:	4b08      	ldr	r3, [pc, #32]	@ (800c1b0 <xTaskGetSchedulerState+0x38>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d102      	bne.n	800c19a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c194:	2302      	movs	r3, #2
 800c196:	607b      	str	r3, [r7, #4]
 800c198:	e001      	b.n	800c19e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c19a:	2300      	movs	r3, #0
 800c19c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c19e:	687b      	ldr	r3, [r7, #4]
	}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	20001410 	.word	0x20001410
 800c1b0:	2000142c 	.word	0x2000142c

0800c1b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b086      	sub	sp, #24
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d058      	beq.n	800c27c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c1ca:	4b2f      	ldr	r3, [pc, #188]	@ (800c288 <xTaskPriorityDisinherit+0xd4>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d00b      	beq.n	800c1ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d8:	f383 8811 	msr	BASEPRI, r3
 800c1dc:	f3bf 8f6f 	isb	sy
 800c1e0:	f3bf 8f4f 	dsb	sy
 800c1e4:	60fb      	str	r3, [r7, #12]
}
 800c1e6:	bf00      	nop
 800c1e8:	bf00      	nop
 800c1ea:	e7fd      	b.n	800c1e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d10b      	bne.n	800c20c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f8:	f383 8811 	msr	BASEPRI, r3
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	f3bf 8f4f 	dsb	sy
 800c204:	60bb      	str	r3, [r7, #8]
}
 800c206:	bf00      	nop
 800c208:	bf00      	nop
 800c20a:	e7fd      	b.n	800c208 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c210:	1e5a      	subs	r2, r3, #1
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c21e:	429a      	cmp	r2, r3
 800c220:	d02c      	beq.n	800c27c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c226:	2b00      	cmp	r3, #0
 800c228:	d128      	bne.n	800c27c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	3304      	adds	r3, #4
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fe fc26 	bl	800aa80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c240:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c24c:	4b0f      	ldr	r3, [pc, #60]	@ (800c28c <xTaskPriorityDisinherit+0xd8>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	429a      	cmp	r2, r3
 800c252:	d903      	bls.n	800c25c <xTaskPriorityDisinherit+0xa8>
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c258:	4a0c      	ldr	r2, [pc, #48]	@ (800c28c <xTaskPriorityDisinherit+0xd8>)
 800c25a:	6013      	str	r3, [r2, #0]
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c260:	4613      	mov	r3, r2
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	4413      	add	r3, r2
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	4a09      	ldr	r2, [pc, #36]	@ (800c290 <xTaskPriorityDisinherit+0xdc>)
 800c26a:	441a      	add	r2, r3
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	3304      	adds	r3, #4
 800c270:	4619      	mov	r1, r3
 800c272:	4610      	mov	r0, r2
 800c274:	f7fe fba7 	bl	800a9c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c278:	2301      	movs	r3, #1
 800c27a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c27c:	697b      	ldr	r3, [r7, #20]
	}
 800c27e:	4618      	mov	r0, r3
 800c280:	3718      	adds	r7, #24
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	20000f30 	.word	0x20000f30
 800c28c:	2000140c 	.word	0x2000140c
 800c290:	20000f34 	.word	0x20000f34

0800c294 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c29e:	4b21      	ldr	r3, [pc, #132]	@ (800c324 <prvAddCurrentTaskToDelayedList+0x90>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2a4:	4b20      	ldr	r3, [pc, #128]	@ (800c328 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fe fbe8 	bl	800aa80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b6:	d10a      	bne.n	800c2ce <prvAddCurrentTaskToDelayedList+0x3a>
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d007      	beq.n	800c2ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2be:	4b1a      	ldr	r3, [pc, #104]	@ (800c328 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	4819      	ldr	r0, [pc, #100]	@ (800c32c <prvAddCurrentTaskToDelayedList+0x98>)
 800c2c8:	f7fe fb7d 	bl	800a9c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2cc:	e026      	b.n	800c31c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2d6:	4b14      	ldr	r3, [pc, #80]	@ (800c328 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68ba      	ldr	r2, [r7, #8]
 800c2dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d209      	bcs.n	800c2fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2e6:	4b12      	ldr	r3, [pc, #72]	@ (800c330 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	4b0f      	ldr	r3, [pc, #60]	@ (800c328 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	3304      	adds	r3, #4
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	f7fe fb8b 	bl	800aa0e <vListInsert>
}
 800c2f8:	e010      	b.n	800c31c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c334 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	4b0a      	ldr	r3, [pc, #40]	@ (800c328 <prvAddCurrentTaskToDelayedList+0x94>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	3304      	adds	r3, #4
 800c304:	4619      	mov	r1, r3
 800c306:	4610      	mov	r0, r2
 800c308:	f7fe fb81 	bl	800aa0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c30c:	4b0a      	ldr	r3, [pc, #40]	@ (800c338 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	429a      	cmp	r2, r3
 800c314:	d202      	bcs.n	800c31c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c316:	4a08      	ldr	r2, [pc, #32]	@ (800c338 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	6013      	str	r3, [r2, #0]
}
 800c31c:	bf00      	nop
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	20001408 	.word	0x20001408
 800c328:	20000f30 	.word	0x20000f30
 800c32c:	200013f0 	.word	0x200013f0
 800c330:	200013c0 	.word	0x200013c0
 800c334:	200013bc 	.word	0x200013bc
 800c338:	20001424 	.word	0x20001424

0800c33c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b08a      	sub	sp, #40	@ 0x28
 800c340:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c342:	2300      	movs	r3, #0
 800c344:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c346:	f000 fb13 	bl	800c970 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c34a:	4b1d      	ldr	r3, [pc, #116]	@ (800c3c0 <xTimerCreateTimerTask+0x84>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d021      	beq.n	800c396 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c356:	2300      	movs	r3, #0
 800c358:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c35a:	1d3a      	adds	r2, r7, #4
 800c35c:	f107 0108 	add.w	r1, r7, #8
 800c360:	f107 030c 	add.w	r3, r7, #12
 800c364:	4618      	mov	r0, r3
 800c366:	f7fe fae7 	bl	800a938 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c36a:	6879      	ldr	r1, [r7, #4]
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	9202      	str	r2, [sp, #8]
 800c372:	9301      	str	r3, [sp, #4]
 800c374:	2302      	movs	r3, #2
 800c376:	9300      	str	r3, [sp, #0]
 800c378:	2300      	movs	r3, #0
 800c37a:	460a      	mov	r2, r1
 800c37c:	4911      	ldr	r1, [pc, #68]	@ (800c3c4 <xTimerCreateTimerTask+0x88>)
 800c37e:	4812      	ldr	r0, [pc, #72]	@ (800c3c8 <xTimerCreateTimerTask+0x8c>)
 800c380:	f7ff f8a2 	bl	800b4c8 <xTaskCreateStatic>
 800c384:	4603      	mov	r3, r0
 800c386:	4a11      	ldr	r2, [pc, #68]	@ (800c3cc <xTimerCreateTimerTask+0x90>)
 800c388:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c38a:	4b10      	ldr	r3, [pc, #64]	@ (800c3cc <xTimerCreateTimerTask+0x90>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d001      	beq.n	800c396 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c392:	2301      	movs	r3, #1
 800c394:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10b      	bne.n	800c3b4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	613b      	str	r3, [r7, #16]
}
 800c3ae:	bf00      	nop
 800c3b0:	bf00      	nop
 800c3b2:	e7fd      	b.n	800c3b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c3b4:	697b      	ldr	r3, [r7, #20]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3718      	adds	r7, #24
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	20001460 	.word	0x20001460
 800c3c4:	080105ec 	.word	0x080105ec
 800c3c8:	0800c509 	.word	0x0800c509
 800c3cc:	20001464 	.word	0x20001464

0800c3d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b08a      	sub	sp, #40	@ 0x28
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	607a      	str	r2, [r7, #4]
 800c3dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10b      	bne.n	800c400 <xTimerGenericCommand+0x30>
	__asm volatile
 800c3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ec:	f383 8811 	msr	BASEPRI, r3
 800c3f0:	f3bf 8f6f 	isb	sy
 800c3f4:	f3bf 8f4f 	dsb	sy
 800c3f8:	623b      	str	r3, [r7, #32]
}
 800c3fa:	bf00      	nop
 800c3fc:	bf00      	nop
 800c3fe:	e7fd      	b.n	800c3fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c400:	4b19      	ldr	r3, [pc, #100]	@ (800c468 <xTimerGenericCommand+0x98>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d02a      	beq.n	800c45e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	2b05      	cmp	r3, #5
 800c418:	dc18      	bgt.n	800c44c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c41a:	f7ff fead 	bl	800c178 <xTaskGetSchedulerState>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b02      	cmp	r3, #2
 800c422:	d109      	bne.n	800c438 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c424:	4b10      	ldr	r3, [pc, #64]	@ (800c468 <xTimerGenericCommand+0x98>)
 800c426:	6818      	ldr	r0, [r3, #0]
 800c428:	f107 0110 	add.w	r1, r7, #16
 800c42c:	2300      	movs	r3, #0
 800c42e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c430:	f7fe fc5a 	bl	800ace8 <xQueueGenericSend>
 800c434:	6278      	str	r0, [r7, #36]	@ 0x24
 800c436:	e012      	b.n	800c45e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c438:	4b0b      	ldr	r3, [pc, #44]	@ (800c468 <xTimerGenericCommand+0x98>)
 800c43a:	6818      	ldr	r0, [r3, #0]
 800c43c:	f107 0110 	add.w	r1, r7, #16
 800c440:	2300      	movs	r3, #0
 800c442:	2200      	movs	r2, #0
 800c444:	f7fe fc50 	bl	800ace8 <xQueueGenericSend>
 800c448:	6278      	str	r0, [r7, #36]	@ 0x24
 800c44a:	e008      	b.n	800c45e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c44c:	4b06      	ldr	r3, [pc, #24]	@ (800c468 <xTimerGenericCommand+0x98>)
 800c44e:	6818      	ldr	r0, [r3, #0]
 800c450:	f107 0110 	add.w	r1, r7, #16
 800c454:	2300      	movs	r3, #0
 800c456:	683a      	ldr	r2, [r7, #0]
 800c458:	f7fe fd48 	bl	800aeec <xQueueGenericSendFromISR>
 800c45c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c460:	4618      	mov	r0, r3
 800c462:	3728      	adds	r7, #40	@ 0x28
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	20001460 	.word	0x20001460

0800c46c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b088      	sub	sp, #32
 800c470:	af02      	add	r7, sp, #8
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c476:	4b23      	ldr	r3, [pc, #140]	@ (800c504 <prvProcessExpiredTimer+0x98>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	3304      	adds	r3, #4
 800c484:	4618      	mov	r0, r3
 800c486:	f7fe fafb 	bl	800aa80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c490:	f003 0304 	and.w	r3, r3, #4
 800c494:	2b00      	cmp	r3, #0
 800c496:	d023      	beq.n	800c4e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	699a      	ldr	r2, [r3, #24]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	18d1      	adds	r1, r2, r3
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	683a      	ldr	r2, [r7, #0]
 800c4a4:	6978      	ldr	r0, [r7, #20]
 800c4a6:	f000 f8d5 	bl	800c654 <prvInsertTimerInActiveList>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d020      	beq.n	800c4f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	6978      	ldr	r0, [r7, #20]
 800c4bc:	f7ff ff88 	bl	800c3d0 <xTimerGenericCommand>
 800c4c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d114      	bne.n	800c4f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4cc:	f383 8811 	msr	BASEPRI, r3
 800c4d0:	f3bf 8f6f 	isb	sy
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	60fb      	str	r3, [r7, #12]
}
 800c4da:	bf00      	nop
 800c4dc:	bf00      	nop
 800c4de:	e7fd      	b.n	800c4dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4e6:	f023 0301 	bic.w	r3, r3, #1
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	6978      	ldr	r0, [r7, #20]
 800c4f8:	4798      	blx	r3
}
 800c4fa:	bf00      	nop
 800c4fc:	3718      	adds	r7, #24
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	20001458 	.word	0x20001458

0800c508 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c510:	f107 0308 	add.w	r3, r7, #8
 800c514:	4618      	mov	r0, r3
 800c516:	f000 f859 	bl	800c5cc <prvGetNextExpireTime>
 800c51a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	4619      	mov	r1, r3
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f000 f805 	bl	800c530 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c526:	f000 f8d7 	bl	800c6d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c52a:	bf00      	nop
 800c52c:	e7f0      	b.n	800c510 <prvTimerTask+0x8>
	...

0800c530 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c53a:	f7ff fa29 	bl	800b990 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c53e:	f107 0308 	add.w	r3, r7, #8
 800c542:	4618      	mov	r0, r3
 800c544:	f000 f866 	bl	800c614 <prvSampleTimeNow>
 800c548:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d130      	bne.n	800c5b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10a      	bne.n	800c56c <prvProcessTimerOrBlockTask+0x3c>
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d806      	bhi.n	800c56c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c55e:	f7ff fa25 	bl	800b9ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c562:	68f9      	ldr	r1, [r7, #12]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f7ff ff81 	bl	800c46c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c56a:	e024      	b.n	800c5b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d008      	beq.n	800c584 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c572:	4b13      	ldr	r3, [pc, #76]	@ (800c5c0 <prvProcessTimerOrBlockTask+0x90>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d101      	bne.n	800c580 <prvProcessTimerOrBlockTask+0x50>
 800c57c:	2301      	movs	r3, #1
 800c57e:	e000      	b.n	800c582 <prvProcessTimerOrBlockTask+0x52>
 800c580:	2300      	movs	r3, #0
 800c582:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c584:	4b0f      	ldr	r3, [pc, #60]	@ (800c5c4 <prvProcessTimerOrBlockTask+0x94>)
 800c586:	6818      	ldr	r0, [r3, #0]
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	1ad3      	subs	r3, r2, r3
 800c58e:	683a      	ldr	r2, [r7, #0]
 800c590:	4619      	mov	r1, r3
 800c592:	f7fe ff65 	bl	800b460 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c596:	f7ff fa09 	bl	800b9ac <xTaskResumeAll>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d10a      	bne.n	800c5b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c5a0:	4b09      	ldr	r3, [pc, #36]	@ (800c5c8 <prvProcessTimerOrBlockTask+0x98>)
 800c5a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5a6:	601a      	str	r2, [r3, #0]
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	f3bf 8f6f 	isb	sy
}
 800c5b0:	e001      	b.n	800c5b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c5b2:	f7ff f9fb 	bl	800b9ac <xTaskResumeAll>
}
 800c5b6:	bf00      	nop
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	2000145c 	.word	0x2000145c
 800c5c4:	20001460 	.word	0x20001460
 800c5c8:	e000ed04 	.word	0xe000ed04

0800c5cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b085      	sub	sp, #20
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c5d4:	4b0e      	ldr	r3, [pc, #56]	@ (800c610 <prvGetNextExpireTime+0x44>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d101      	bne.n	800c5e2 <prvGetNextExpireTime+0x16>
 800c5de:	2201      	movs	r2, #1
 800c5e0:	e000      	b.n	800c5e4 <prvGetNextExpireTime+0x18>
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d105      	bne.n	800c5fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5f0:	4b07      	ldr	r3, [pc, #28]	@ (800c610 <prvGetNextExpireTime+0x44>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	60fb      	str	r3, [r7, #12]
 800c5fa:	e001      	b.n	800c600 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c600:	68fb      	ldr	r3, [r7, #12]
}
 800c602:	4618      	mov	r0, r3
 800c604:	3714      	adds	r7, #20
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop
 800c610:	20001458 	.word	0x20001458

0800c614 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c61c:	f7ff fa64 	bl	800bae8 <xTaskGetTickCount>
 800c620:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c622:	4b0b      	ldr	r3, [pc, #44]	@ (800c650 <prvSampleTimeNow+0x3c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d205      	bcs.n	800c638 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c62c:	f000 f93a 	bl	800c8a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	601a      	str	r2, [r3, #0]
 800c636:	e002      	b.n	800c63e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c63e:	4a04      	ldr	r2, [pc, #16]	@ (800c650 <prvSampleTimeNow+0x3c>)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c644:	68fb      	ldr	r3, [r7, #12]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	20001468 	.word	0x20001468

0800c654 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	607a      	str	r2, [r7, #4]
 800c660:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c662:	2300      	movs	r3, #0
 800c664:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	429a      	cmp	r2, r3
 800c678:	d812      	bhi.n	800c6a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	1ad2      	subs	r2, r2, r3
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	699b      	ldr	r3, [r3, #24]
 800c684:	429a      	cmp	r2, r3
 800c686:	d302      	bcc.n	800c68e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c688:	2301      	movs	r3, #1
 800c68a:	617b      	str	r3, [r7, #20]
 800c68c:	e01b      	b.n	800c6c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c68e:	4b10      	ldr	r3, [pc, #64]	@ (800c6d0 <prvInsertTimerInActiveList+0x7c>)
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	3304      	adds	r3, #4
 800c696:	4619      	mov	r1, r3
 800c698:	4610      	mov	r0, r2
 800c69a:	f7fe f9b8 	bl	800aa0e <vListInsert>
 800c69e:	e012      	b.n	800c6c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d206      	bcs.n	800c6b6 <prvInsertTimerInActiveList+0x62>
 800c6a8:	68ba      	ldr	r2, [r7, #8]
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d302      	bcc.n	800c6b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	617b      	str	r3, [r7, #20]
 800c6b4:	e007      	b.n	800c6c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6b6:	4b07      	ldr	r3, [pc, #28]	@ (800c6d4 <prvInsertTimerInActiveList+0x80>)
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	4619      	mov	r1, r3
 800c6c0:	4610      	mov	r0, r2
 800c6c2:	f7fe f9a4 	bl	800aa0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c6c6:	697b      	ldr	r3, [r7, #20]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3718      	adds	r7, #24
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	2000145c 	.word	0x2000145c
 800c6d4:	20001458 	.word	0x20001458

0800c6d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b08e      	sub	sp, #56	@ 0x38
 800c6dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6de:	e0ce      	b.n	800c87e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	da19      	bge.n	800c71a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c6e6:	1d3b      	adds	r3, r7, #4
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10b      	bne.n	800c70a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f6:	f383 8811 	msr	BASEPRI, r3
 800c6fa:	f3bf 8f6f 	isb	sy
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	61fb      	str	r3, [r7, #28]
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop
 800c708:	e7fd      	b.n	800c706 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c710:	6850      	ldr	r0, [r2, #4]
 800c712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c714:	6892      	ldr	r2, [r2, #8]
 800c716:	4611      	mov	r1, r2
 800c718:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f2c0 80ae 	blt.w	800c87e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c728:	695b      	ldr	r3, [r3, #20]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d004      	beq.n	800c738 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c730:	3304      	adds	r3, #4
 800c732:	4618      	mov	r0, r3
 800c734:	f7fe f9a4 	bl	800aa80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c738:	463b      	mov	r3, r7
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7ff ff6a 	bl	800c614 <prvSampleTimeNow>
 800c740:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2b09      	cmp	r3, #9
 800c746:	f200 8097 	bhi.w	800c878 <prvProcessReceivedCommands+0x1a0>
 800c74a:	a201      	add	r2, pc, #4	@ (adr r2, 800c750 <prvProcessReceivedCommands+0x78>)
 800c74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c750:	0800c779 	.word	0x0800c779
 800c754:	0800c779 	.word	0x0800c779
 800c758:	0800c779 	.word	0x0800c779
 800c75c:	0800c7ef 	.word	0x0800c7ef
 800c760:	0800c803 	.word	0x0800c803
 800c764:	0800c84f 	.word	0x0800c84f
 800c768:	0800c779 	.word	0x0800c779
 800c76c:	0800c779 	.word	0x0800c779
 800c770:	0800c7ef 	.word	0x0800c7ef
 800c774:	0800c803 	.word	0x0800c803
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c77a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c77e:	f043 0301 	orr.w	r3, r3, #1
 800c782:	b2da      	uxtb	r2, r3
 800c784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c786:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	18d1      	adds	r1, r2, r3
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c798:	f7ff ff5c 	bl	800c654 <prvInsertTimerInActiveList>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d06c      	beq.n	800c87c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a4:	6a1b      	ldr	r3, [r3, #32]
 800c7a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7b0:	f003 0304 	and.w	r3, r3, #4
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d061      	beq.n	800c87c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c7b8:	68ba      	ldr	r2, [r7, #8]
 800c7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	441a      	add	r2, r3
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7ca:	f7ff fe01 	bl	800c3d0 <xTimerGenericCommand>
 800c7ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c7d0:	6a3b      	ldr	r3, [r7, #32]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d152      	bne.n	800c87c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	61bb      	str	r3, [r7, #24]
}
 800c7e8:	bf00      	nop
 800c7ea:	bf00      	nop
 800c7ec:	e7fd      	b.n	800c7ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7f4:	f023 0301 	bic.w	r3, r3, #1
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c800:	e03d      	b.n	800c87e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c804:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c808:	f043 0301 	orr.w	r3, r3, #1
 800c80c:	b2da      	uxtb	r2, r3
 800c80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c810:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c818:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c81c:	699b      	ldr	r3, [r3, #24]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10b      	bne.n	800c83a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c826:	f383 8811 	msr	BASEPRI, r3
 800c82a:	f3bf 8f6f 	isb	sy
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	617b      	str	r3, [r7, #20]
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop
 800c838:	e7fd      	b.n	800c836 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c83c:	699a      	ldr	r2, [r3, #24]
 800c83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c840:	18d1      	adds	r1, r2, r3
 800c842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c848:	f7ff ff04 	bl	800c654 <prvInsertTimerInActiveList>
					break;
 800c84c:	e017      	b.n	800c87e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c854:	f003 0302 	and.w	r3, r3, #2
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d103      	bne.n	800c864 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c85c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c85e:	f000 fbeb 	bl	800d038 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c862:	e00c      	b.n	800c87e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c866:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c86a:	f023 0301 	bic.w	r3, r3, #1
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c872:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c876:	e002      	b.n	800c87e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c878:	bf00      	nop
 800c87a:	e000      	b.n	800c87e <prvProcessReceivedCommands+0x1a6>
					break;
 800c87c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c87e:	4b08      	ldr	r3, [pc, #32]	@ (800c8a0 <prvProcessReceivedCommands+0x1c8>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	1d39      	adds	r1, r7, #4
 800c884:	2200      	movs	r2, #0
 800c886:	4618      	mov	r0, r3
 800c888:	f7fe fbce 	bl	800b028 <xQueueReceive>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	f47f af26 	bne.w	800c6e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c894:	bf00      	nop
 800c896:	bf00      	nop
 800c898:	3730      	adds	r7, #48	@ 0x30
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	20001460 	.word	0x20001460

0800c8a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b088      	sub	sp, #32
 800c8a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8aa:	e049      	b.n	800c940 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8ac:	4b2e      	ldr	r3, [pc, #184]	@ (800c968 <prvSwitchTimerLists+0xc4>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8b6:	4b2c      	ldr	r3, [pc, #176]	@ (800c968 <prvSwitchTimerLists+0xc4>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fe f8db 	bl	800aa80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8d8:	f003 0304 	and.w	r3, r3, #4
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d02f      	beq.n	800c940 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	699b      	ldr	r3, [r3, #24]
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c8ea:	68ba      	ldr	r2, [r7, #8]
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d90e      	bls.n	800c910 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8fe:	4b1a      	ldr	r3, [pc, #104]	@ (800c968 <prvSwitchTimerLists+0xc4>)
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	3304      	adds	r3, #4
 800c906:	4619      	mov	r1, r3
 800c908:	4610      	mov	r0, r2
 800c90a:	f7fe f880 	bl	800aa0e <vListInsert>
 800c90e:	e017      	b.n	800c940 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c910:	2300      	movs	r3, #0
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	2300      	movs	r3, #0
 800c916:	693a      	ldr	r2, [r7, #16]
 800c918:	2100      	movs	r1, #0
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f7ff fd58 	bl	800c3d0 <xTimerGenericCommand>
 800c920:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d10b      	bne.n	800c940 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92c:	f383 8811 	msr	BASEPRI, r3
 800c930:	f3bf 8f6f 	isb	sy
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	603b      	str	r3, [r7, #0]
}
 800c93a:	bf00      	nop
 800c93c:	bf00      	nop
 800c93e:	e7fd      	b.n	800c93c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c940:	4b09      	ldr	r3, [pc, #36]	@ (800c968 <prvSwitchTimerLists+0xc4>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1b0      	bne.n	800c8ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c94a:	4b07      	ldr	r3, [pc, #28]	@ (800c968 <prvSwitchTimerLists+0xc4>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c950:	4b06      	ldr	r3, [pc, #24]	@ (800c96c <prvSwitchTimerLists+0xc8>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a04      	ldr	r2, [pc, #16]	@ (800c968 <prvSwitchTimerLists+0xc4>)
 800c956:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c958:	4a04      	ldr	r2, [pc, #16]	@ (800c96c <prvSwitchTimerLists+0xc8>)
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	6013      	str	r3, [r2, #0]
}
 800c95e:	bf00      	nop
 800c960:	3718      	adds	r7, #24
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	20001458 	.word	0x20001458
 800c96c:	2000145c 	.word	0x2000145c

0800c970 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c976:	f000 f96f 	bl	800cc58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c97a:	4b15      	ldr	r3, [pc, #84]	@ (800c9d0 <prvCheckForValidListAndQueue+0x60>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d120      	bne.n	800c9c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c982:	4814      	ldr	r0, [pc, #80]	@ (800c9d4 <prvCheckForValidListAndQueue+0x64>)
 800c984:	f7fd fff2 	bl	800a96c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c988:	4813      	ldr	r0, [pc, #76]	@ (800c9d8 <prvCheckForValidListAndQueue+0x68>)
 800c98a:	f7fd ffef 	bl	800a96c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c98e:	4b13      	ldr	r3, [pc, #76]	@ (800c9dc <prvCheckForValidListAndQueue+0x6c>)
 800c990:	4a10      	ldr	r2, [pc, #64]	@ (800c9d4 <prvCheckForValidListAndQueue+0x64>)
 800c992:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c994:	4b12      	ldr	r3, [pc, #72]	@ (800c9e0 <prvCheckForValidListAndQueue+0x70>)
 800c996:	4a10      	ldr	r2, [pc, #64]	@ (800c9d8 <prvCheckForValidListAndQueue+0x68>)
 800c998:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c99a:	2300      	movs	r3, #0
 800c99c:	9300      	str	r3, [sp, #0]
 800c99e:	4b11      	ldr	r3, [pc, #68]	@ (800c9e4 <prvCheckForValidListAndQueue+0x74>)
 800c9a0:	4a11      	ldr	r2, [pc, #68]	@ (800c9e8 <prvCheckForValidListAndQueue+0x78>)
 800c9a2:	2110      	movs	r1, #16
 800c9a4:	200a      	movs	r0, #10
 800c9a6:	f7fe f8ff 	bl	800aba8 <xQueueGenericCreateStatic>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	4a08      	ldr	r2, [pc, #32]	@ (800c9d0 <prvCheckForValidListAndQueue+0x60>)
 800c9ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c9b0:	4b07      	ldr	r3, [pc, #28]	@ (800c9d0 <prvCheckForValidListAndQueue+0x60>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d005      	beq.n	800c9c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9b8:	4b05      	ldr	r3, [pc, #20]	@ (800c9d0 <prvCheckForValidListAndQueue+0x60>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	490b      	ldr	r1, [pc, #44]	@ (800c9ec <prvCheckForValidListAndQueue+0x7c>)
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7fe fd24 	bl	800b40c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9c4:	f000 f97a 	bl	800ccbc <vPortExitCritical>
}
 800c9c8:	bf00      	nop
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20001460 	.word	0x20001460
 800c9d4:	20001430 	.word	0x20001430
 800c9d8:	20001444 	.word	0x20001444
 800c9dc:	20001458 	.word	0x20001458
 800c9e0:	2000145c 	.word	0x2000145c
 800c9e4:	2000150c 	.word	0x2000150c
 800c9e8:	2000146c 	.word	0x2000146c
 800c9ec:	080105f4 	.word	0x080105f4

0800c9f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	3b04      	subs	r3, #4
 800ca00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ca08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	3b04      	subs	r3, #4
 800ca0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	f023 0201 	bic.w	r2, r3, #1
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	3b04      	subs	r3, #4
 800ca1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca20:	4a0c      	ldr	r2, [pc, #48]	@ (800ca54 <pxPortInitialiseStack+0x64>)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3b14      	subs	r3, #20
 800ca2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	3b04      	subs	r3, #4
 800ca36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f06f 0202 	mvn.w	r2, #2
 800ca3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3b20      	subs	r3, #32
 800ca44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca46:	68fb      	ldr	r3, [r7, #12]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3714      	adds	r7, #20
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr
 800ca54:	0800ca59 	.word	0x0800ca59

0800ca58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ca62:	4b13      	ldr	r3, [pc, #76]	@ (800cab0 <prvTaskExitError+0x58>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca6a:	d00b      	beq.n	800ca84 <prvTaskExitError+0x2c>
	__asm volatile
 800ca6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca70:	f383 8811 	msr	BASEPRI, r3
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	60fb      	str	r3, [r7, #12]
}
 800ca7e:	bf00      	nop
 800ca80:	bf00      	nop
 800ca82:	e7fd      	b.n	800ca80 <prvTaskExitError+0x28>
	__asm volatile
 800ca84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca88:	f383 8811 	msr	BASEPRI, r3
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f3bf 8f4f 	dsb	sy
 800ca94:	60bb      	str	r3, [r7, #8]
}
 800ca96:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca98:	bf00      	nop
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d0fc      	beq.n	800ca9a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800caa0:	bf00      	nop
 800caa2:	bf00      	nop
 800caa4:	3714      	adds	r7, #20
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	20000010 	.word	0x20000010
	...

0800cac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cac0:	4b07      	ldr	r3, [pc, #28]	@ (800cae0 <pxCurrentTCBConst2>)
 800cac2:	6819      	ldr	r1, [r3, #0]
 800cac4:	6808      	ldr	r0, [r1, #0]
 800cac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caca:	f380 8809 	msr	PSP, r0
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	f04f 0000 	mov.w	r0, #0
 800cad6:	f380 8811 	msr	BASEPRI, r0
 800cada:	4770      	bx	lr
 800cadc:	f3af 8000 	nop.w

0800cae0 <pxCurrentTCBConst2>:
 800cae0:	20000f30 	.word	0x20000f30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cae4:	bf00      	nop
 800cae6:	bf00      	nop

0800cae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cae8:	4808      	ldr	r0, [pc, #32]	@ (800cb0c <prvPortStartFirstTask+0x24>)
 800caea:	6800      	ldr	r0, [r0, #0]
 800caec:	6800      	ldr	r0, [r0, #0]
 800caee:	f380 8808 	msr	MSP, r0
 800caf2:	f04f 0000 	mov.w	r0, #0
 800caf6:	f380 8814 	msr	CONTROL, r0
 800cafa:	b662      	cpsie	i
 800cafc:	b661      	cpsie	f
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	df00      	svc	0
 800cb08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb0a:	bf00      	nop
 800cb0c:	e000ed08 	.word	0xe000ed08

0800cb10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b086      	sub	sp, #24
 800cb14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb16:	4b47      	ldr	r3, [pc, #284]	@ (800cc34 <xPortStartScheduler+0x124>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a47      	ldr	r2, [pc, #284]	@ (800cc38 <xPortStartScheduler+0x128>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d10b      	bne.n	800cb38 <xPortStartScheduler+0x28>
	__asm volatile
 800cb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb24:	f383 8811 	msr	BASEPRI, r3
 800cb28:	f3bf 8f6f 	isb	sy
 800cb2c:	f3bf 8f4f 	dsb	sy
 800cb30:	60fb      	str	r3, [r7, #12]
}
 800cb32:	bf00      	nop
 800cb34:	bf00      	nop
 800cb36:	e7fd      	b.n	800cb34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cb38:	4b3e      	ldr	r3, [pc, #248]	@ (800cc34 <xPortStartScheduler+0x124>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a3f      	ldr	r2, [pc, #252]	@ (800cc3c <xPortStartScheduler+0x12c>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d10b      	bne.n	800cb5a <xPortStartScheduler+0x4a>
	__asm volatile
 800cb42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	613b      	str	r3, [r7, #16]
}
 800cb54:	bf00      	nop
 800cb56:	bf00      	nop
 800cb58:	e7fd      	b.n	800cb56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb5a:	4b39      	ldr	r3, [pc, #228]	@ (800cc40 <xPortStartScheduler+0x130>)
 800cb5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	22ff      	movs	r2, #255	@ 0xff
 800cb6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb74:	78fb      	ldrb	r3, [r7, #3]
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cb7c:	b2da      	uxtb	r2, r3
 800cb7e:	4b31      	ldr	r3, [pc, #196]	@ (800cc44 <xPortStartScheduler+0x134>)
 800cb80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb82:	4b31      	ldr	r3, [pc, #196]	@ (800cc48 <xPortStartScheduler+0x138>)
 800cb84:	2207      	movs	r2, #7
 800cb86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb88:	e009      	b.n	800cb9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cb8a:	4b2f      	ldr	r3, [pc, #188]	@ (800cc48 <xPortStartScheduler+0x138>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	4a2d      	ldr	r2, [pc, #180]	@ (800cc48 <xPortStartScheduler+0x138>)
 800cb92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb94:	78fb      	ldrb	r3, [r7, #3]
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	005b      	lsls	r3, r3, #1
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb9e:	78fb      	ldrb	r3, [r7, #3]
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cba6:	2b80      	cmp	r3, #128	@ 0x80
 800cba8:	d0ef      	beq.n	800cb8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cbaa:	4b27      	ldr	r3, [pc, #156]	@ (800cc48 <xPortStartScheduler+0x138>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f1c3 0307 	rsb	r3, r3, #7
 800cbb2:	2b04      	cmp	r3, #4
 800cbb4:	d00b      	beq.n	800cbce <xPortStartScheduler+0xbe>
	__asm volatile
 800cbb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbba:	f383 8811 	msr	BASEPRI, r3
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f3bf 8f4f 	dsb	sy
 800cbc6:	60bb      	str	r3, [r7, #8]
}
 800cbc8:	bf00      	nop
 800cbca:	bf00      	nop
 800cbcc:	e7fd      	b.n	800cbca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cbce:	4b1e      	ldr	r3, [pc, #120]	@ (800cc48 <xPortStartScheduler+0x138>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	021b      	lsls	r3, r3, #8
 800cbd4:	4a1c      	ldr	r2, [pc, #112]	@ (800cc48 <xPortStartScheduler+0x138>)
 800cbd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cbd8:	4b1b      	ldr	r3, [pc, #108]	@ (800cc48 <xPortStartScheduler+0x138>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cbe0:	4a19      	ldr	r2, [pc, #100]	@ (800cc48 <xPortStartScheduler+0x138>)
 800cbe2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	b2da      	uxtb	r2, r3
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbec:	4b17      	ldr	r3, [pc, #92]	@ (800cc4c <xPortStartScheduler+0x13c>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a16      	ldr	r2, [pc, #88]	@ (800cc4c <xPortStartScheduler+0x13c>)
 800cbf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cbf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cbf8:	4b14      	ldr	r3, [pc, #80]	@ (800cc4c <xPortStartScheduler+0x13c>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a13      	ldr	r2, [pc, #76]	@ (800cc4c <xPortStartScheduler+0x13c>)
 800cbfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cc02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc04:	f000 f8da 	bl	800cdbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc08:	4b11      	ldr	r3, [pc, #68]	@ (800cc50 <xPortStartScheduler+0x140>)
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc0e:	f000 f8f9 	bl	800ce04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc12:	4b10      	ldr	r3, [pc, #64]	@ (800cc54 <xPortStartScheduler+0x144>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a0f      	ldr	r2, [pc, #60]	@ (800cc54 <xPortStartScheduler+0x144>)
 800cc18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cc1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc1e:	f7ff ff63 	bl	800cae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc22:	f7ff f82b 	bl	800bc7c <vTaskSwitchContext>
	prvTaskExitError();
 800cc26:	f7ff ff17 	bl	800ca58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3718      	adds	r7, #24
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	e000ed00 	.word	0xe000ed00
 800cc38:	410fc271 	.word	0x410fc271
 800cc3c:	410fc270 	.word	0x410fc270
 800cc40:	e000e400 	.word	0xe000e400
 800cc44:	2000155c 	.word	0x2000155c
 800cc48:	20001560 	.word	0x20001560
 800cc4c:	e000ed20 	.word	0xe000ed20
 800cc50:	20000010 	.word	0x20000010
 800cc54:	e000ef34 	.word	0xe000ef34

0800cc58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	607b      	str	r3, [r7, #4]
}
 800cc70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc72:	4b10      	ldr	r3, [pc, #64]	@ (800ccb4 <vPortEnterCritical+0x5c>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	3301      	adds	r3, #1
 800cc78:	4a0e      	ldr	r2, [pc, #56]	@ (800ccb4 <vPortEnterCritical+0x5c>)
 800cc7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc7c:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb4 <vPortEnterCritical+0x5c>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d110      	bne.n	800cca6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc84:	4b0c      	ldr	r3, [pc, #48]	@ (800ccb8 <vPortEnterCritical+0x60>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d00b      	beq.n	800cca6 <vPortEnterCritical+0x4e>
	__asm volatile
 800cc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc92:	f383 8811 	msr	BASEPRI, r3
 800cc96:	f3bf 8f6f 	isb	sy
 800cc9a:	f3bf 8f4f 	dsb	sy
 800cc9e:	603b      	str	r3, [r7, #0]
}
 800cca0:	bf00      	nop
 800cca2:	bf00      	nop
 800cca4:	e7fd      	b.n	800cca2 <vPortEnterCritical+0x4a>
	}
}
 800cca6:	bf00      	nop
 800cca8:	370c      	adds	r7, #12
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr
 800ccb2:	bf00      	nop
 800ccb4:	20000010 	.word	0x20000010
 800ccb8:	e000ed04 	.word	0xe000ed04

0800ccbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccc2:	4b12      	ldr	r3, [pc, #72]	@ (800cd0c <vPortExitCritical+0x50>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d10b      	bne.n	800cce2 <vPortExitCritical+0x26>
	__asm volatile
 800ccca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccce:	f383 8811 	msr	BASEPRI, r3
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	607b      	str	r3, [r7, #4]
}
 800ccdc:	bf00      	nop
 800ccde:	bf00      	nop
 800cce0:	e7fd      	b.n	800ccde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cce2:	4b0a      	ldr	r3, [pc, #40]	@ (800cd0c <vPortExitCritical+0x50>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	3b01      	subs	r3, #1
 800cce8:	4a08      	ldr	r2, [pc, #32]	@ (800cd0c <vPortExitCritical+0x50>)
 800ccea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ccec:	4b07      	ldr	r3, [pc, #28]	@ (800cd0c <vPortExitCritical+0x50>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d105      	bne.n	800cd00 <vPortExitCritical+0x44>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	f383 8811 	msr	BASEPRI, r3
}
 800ccfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr
 800cd0c:	20000010 	.word	0x20000010

0800cd10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd10:	f3ef 8009 	mrs	r0, PSP
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	4b15      	ldr	r3, [pc, #84]	@ (800cd70 <pxCurrentTCBConst>)
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	f01e 0f10 	tst.w	lr, #16
 800cd20:	bf08      	it	eq
 800cd22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd2a:	6010      	str	r0, [r2, #0]
 800cd2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cd34:	f380 8811 	msr	BASEPRI, r0
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	f3bf 8f6f 	isb	sy
 800cd40:	f7fe ff9c 	bl	800bc7c <vTaskSwitchContext>
 800cd44:	f04f 0000 	mov.w	r0, #0
 800cd48:	f380 8811 	msr	BASEPRI, r0
 800cd4c:	bc09      	pop	{r0, r3}
 800cd4e:	6819      	ldr	r1, [r3, #0]
 800cd50:	6808      	ldr	r0, [r1, #0]
 800cd52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd56:	f01e 0f10 	tst.w	lr, #16
 800cd5a:	bf08      	it	eq
 800cd5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd60:	f380 8809 	msr	PSP, r0
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	f3af 8000 	nop.w

0800cd70 <pxCurrentTCBConst>:
 800cd70:	20000f30 	.word	0x20000f30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd74:	bf00      	nop
 800cd76:	bf00      	nop

0800cd78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd82:	f383 8811 	msr	BASEPRI, r3
 800cd86:	f3bf 8f6f 	isb	sy
 800cd8a:	f3bf 8f4f 	dsb	sy
 800cd8e:	607b      	str	r3, [r7, #4]
}
 800cd90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd92:	f7fe feb9 	bl	800bb08 <xTaskIncrementTick>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d003      	beq.n	800cda4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd9c:	4b06      	ldr	r3, [pc, #24]	@ (800cdb8 <xPortSysTickHandler+0x40>)
 800cd9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cda2:	601a      	str	r2, [r3, #0]
 800cda4:	2300      	movs	r3, #0
 800cda6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	f383 8811 	msr	BASEPRI, r3
}
 800cdae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cdb0:	bf00      	nop
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	e000ed04 	.word	0xe000ed04

0800cdbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cdc0:	4b0b      	ldr	r3, [pc, #44]	@ (800cdf0 <vPortSetupTimerInterrupt+0x34>)
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdc6:	4b0b      	ldr	r3, [pc, #44]	@ (800cdf4 <vPortSetupTimerInterrupt+0x38>)
 800cdc8:	2200      	movs	r2, #0
 800cdca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdcc:	4b0a      	ldr	r3, [pc, #40]	@ (800cdf8 <vPortSetupTimerInterrupt+0x3c>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a0a      	ldr	r2, [pc, #40]	@ (800cdfc <vPortSetupTimerInterrupt+0x40>)
 800cdd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cdd6:	099b      	lsrs	r3, r3, #6
 800cdd8:	4a09      	ldr	r2, [pc, #36]	@ (800ce00 <vPortSetupTimerInterrupt+0x44>)
 800cdda:	3b01      	subs	r3, #1
 800cddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cdde:	4b04      	ldr	r3, [pc, #16]	@ (800cdf0 <vPortSetupTimerInterrupt+0x34>)
 800cde0:	2207      	movs	r2, #7
 800cde2:	601a      	str	r2, [r3, #0]
}
 800cde4:	bf00      	nop
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	e000e010 	.word	0xe000e010
 800cdf4:	e000e018 	.word	0xe000e018
 800cdf8:	20000004 	.word	0x20000004
 800cdfc:	10624dd3 	.word	0x10624dd3
 800ce00:	e000e014 	.word	0xe000e014

0800ce04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ce14 <vPortEnableVFP+0x10>
 800ce08:	6801      	ldr	r1, [r0, #0]
 800ce0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ce0e:	6001      	str	r1, [r0, #0]
 800ce10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce12:	bf00      	nop
 800ce14:	e000ed88 	.word	0xe000ed88

0800ce18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce1e:	f3ef 8305 	mrs	r3, IPSR
 800ce22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2b0f      	cmp	r3, #15
 800ce28:	d915      	bls.n	800ce56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce2a:	4a18      	ldr	r2, [pc, #96]	@ (800ce8c <vPortValidateInterruptPriority+0x74>)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	4413      	add	r3, r2
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce34:	4b16      	ldr	r3, [pc, #88]	@ (800ce90 <vPortValidateInterruptPriority+0x78>)
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	7afa      	ldrb	r2, [r7, #11]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d20b      	bcs.n	800ce56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ce3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	607b      	str	r3, [r7, #4]
}
 800ce50:	bf00      	nop
 800ce52:	bf00      	nop
 800ce54:	e7fd      	b.n	800ce52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce56:	4b0f      	ldr	r3, [pc, #60]	@ (800ce94 <vPortValidateInterruptPriority+0x7c>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ce5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ce98 <vPortValidateInterruptPriority+0x80>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d90b      	bls.n	800ce7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ce66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce6a:	f383 8811 	msr	BASEPRI, r3
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	f3bf 8f4f 	dsb	sy
 800ce76:	603b      	str	r3, [r7, #0]
}
 800ce78:	bf00      	nop
 800ce7a:	bf00      	nop
 800ce7c:	e7fd      	b.n	800ce7a <vPortValidateInterruptPriority+0x62>
	}
 800ce7e:	bf00      	nop
 800ce80:	3714      	adds	r7, #20
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	e000e3f0 	.word	0xe000e3f0
 800ce90:	2000155c 	.word	0x2000155c
 800ce94:	e000ed0c 	.word	0xe000ed0c
 800ce98:	20001560 	.word	0x20001560

0800ce9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b08a      	sub	sp, #40	@ 0x28
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cea4:	2300      	movs	r3, #0
 800cea6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cea8:	f7fe fd72 	bl	800b990 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ceac:	4b5c      	ldr	r3, [pc, #368]	@ (800d020 <pvPortMalloc+0x184>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d101      	bne.n	800ceb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ceb4:	f000 f924 	bl	800d100 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ceb8:	4b5a      	ldr	r3, [pc, #360]	@ (800d024 <pvPortMalloc+0x188>)
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	4013      	ands	r3, r2
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	f040 8095 	bne.w	800cff0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d01e      	beq.n	800cf0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cecc:	2208      	movs	r2, #8
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4413      	add	r3, r2
 800ced2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f003 0307 	and.w	r3, r3, #7
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d015      	beq.n	800cf0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f023 0307 	bic.w	r3, r3, #7
 800cee4:	3308      	adds	r3, #8
 800cee6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f003 0307 	and.w	r3, r3, #7
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d00b      	beq.n	800cf0a <pvPortMalloc+0x6e>
	__asm volatile
 800cef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef6:	f383 8811 	msr	BASEPRI, r3
 800cefa:	f3bf 8f6f 	isb	sy
 800cefe:	f3bf 8f4f 	dsb	sy
 800cf02:	617b      	str	r3, [r7, #20]
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop
 800cf08:	e7fd      	b.n	800cf06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d06f      	beq.n	800cff0 <pvPortMalloc+0x154>
 800cf10:	4b45      	ldr	r3, [pc, #276]	@ (800d028 <pvPortMalloc+0x18c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d86a      	bhi.n	800cff0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cf1a:	4b44      	ldr	r3, [pc, #272]	@ (800d02c <pvPortMalloc+0x190>)
 800cf1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf1e:	4b43      	ldr	r3, [pc, #268]	@ (800d02c <pvPortMalloc+0x190>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf24:	e004      	b.n	800cf30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cf26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d903      	bls.n	800cf42 <pvPortMalloc+0xa6>
 800cf3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1f1      	bne.n	800cf26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf42:	4b37      	ldr	r3, [pc, #220]	@ (800d020 <pvPortMalloc+0x184>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d051      	beq.n	800cff0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf4c:	6a3b      	ldr	r3, [r7, #32]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	2208      	movs	r2, #8
 800cf52:	4413      	add	r3, r2
 800cf54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cf56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	6a3b      	ldr	r3, [r7, #32]
 800cf5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cf5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf60:	685a      	ldr	r2, [r3, #4]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	1ad2      	subs	r2, r2, r3
 800cf66:	2308      	movs	r3, #8
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d920      	bls.n	800cfb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	4413      	add	r3, r2
 800cf74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	f003 0307 	and.w	r3, r3, #7
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d00b      	beq.n	800cf98 <pvPortMalloc+0xfc>
	__asm volatile
 800cf80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf84:	f383 8811 	msr	BASEPRI, r3
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	613b      	str	r3, [r7, #16]
}
 800cf92:	bf00      	nop
 800cf94:	bf00      	nop
 800cf96:	e7fd      	b.n	800cf94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9a:	685a      	ldr	r2, [r3, #4]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	1ad2      	subs	r2, r2, r3
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa6:	687a      	ldr	r2, [r7, #4]
 800cfa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cfaa:	69b8      	ldr	r0, [r7, #24]
 800cfac:	f000 f90a 	bl	800d1c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cfb0:	4b1d      	ldr	r3, [pc, #116]	@ (800d028 <pvPortMalloc+0x18c>)
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	1ad3      	subs	r3, r2, r3
 800cfba:	4a1b      	ldr	r2, [pc, #108]	@ (800d028 <pvPortMalloc+0x18c>)
 800cfbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cfbe:	4b1a      	ldr	r3, [pc, #104]	@ (800d028 <pvPortMalloc+0x18c>)
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	4b1b      	ldr	r3, [pc, #108]	@ (800d030 <pvPortMalloc+0x194>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d203      	bcs.n	800cfd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cfca:	4b17      	ldr	r3, [pc, #92]	@ (800d028 <pvPortMalloc+0x18c>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a18      	ldr	r2, [pc, #96]	@ (800d030 <pvPortMalloc+0x194>)
 800cfd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd4:	685a      	ldr	r2, [r3, #4]
 800cfd6:	4b13      	ldr	r3, [pc, #76]	@ (800d024 <pvPortMalloc+0x188>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	431a      	orrs	r2, r3
 800cfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cfe6:	4b13      	ldr	r3, [pc, #76]	@ (800d034 <pvPortMalloc+0x198>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	3301      	adds	r3, #1
 800cfec:	4a11      	ldr	r2, [pc, #68]	@ (800d034 <pvPortMalloc+0x198>)
 800cfee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cff0:	f7fe fcdc 	bl	800b9ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	f003 0307 	and.w	r3, r3, #7
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00b      	beq.n	800d016 <pvPortMalloc+0x17a>
	__asm volatile
 800cffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d002:	f383 8811 	msr	BASEPRI, r3
 800d006:	f3bf 8f6f 	isb	sy
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	60fb      	str	r3, [r7, #12]
}
 800d010:	bf00      	nop
 800d012:	bf00      	nop
 800d014:	e7fd      	b.n	800d012 <pvPortMalloc+0x176>
	return pvReturn;
 800d016:	69fb      	ldr	r3, [r7, #28]
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3728      	adds	r7, #40	@ 0x28
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	2000516c 	.word	0x2000516c
 800d024:	20005180 	.word	0x20005180
 800d028:	20005170 	.word	0x20005170
 800d02c:	20005164 	.word	0x20005164
 800d030:	20005174 	.word	0x20005174
 800d034:	20005178 	.word	0x20005178

0800d038 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d04f      	beq.n	800d0ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d04a:	2308      	movs	r3, #8
 800d04c:	425b      	negs	r3, r3
 800d04e:	697a      	ldr	r2, [r7, #20]
 800d050:	4413      	add	r3, r2
 800d052:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	4b25      	ldr	r3, [pc, #148]	@ (800d0f4 <vPortFree+0xbc>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4013      	ands	r3, r2
 800d062:	2b00      	cmp	r3, #0
 800d064:	d10b      	bne.n	800d07e <vPortFree+0x46>
	__asm volatile
 800d066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d06a:	f383 8811 	msr	BASEPRI, r3
 800d06e:	f3bf 8f6f 	isb	sy
 800d072:	f3bf 8f4f 	dsb	sy
 800d076:	60fb      	str	r3, [r7, #12]
}
 800d078:	bf00      	nop
 800d07a:	bf00      	nop
 800d07c:	e7fd      	b.n	800d07a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d00b      	beq.n	800d09e <vPortFree+0x66>
	__asm volatile
 800d086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d08a:	f383 8811 	msr	BASEPRI, r3
 800d08e:	f3bf 8f6f 	isb	sy
 800d092:	f3bf 8f4f 	dsb	sy
 800d096:	60bb      	str	r3, [r7, #8]
}
 800d098:	bf00      	nop
 800d09a:	bf00      	nop
 800d09c:	e7fd      	b.n	800d09a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	685a      	ldr	r2, [r3, #4]
 800d0a2:	4b14      	ldr	r3, [pc, #80]	@ (800d0f4 <vPortFree+0xbc>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4013      	ands	r3, r2
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d01e      	beq.n	800d0ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d11a      	bne.n	800d0ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	685a      	ldr	r2, [r3, #4]
 800d0b8:	4b0e      	ldr	r3, [pc, #56]	@ (800d0f4 <vPortFree+0xbc>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	43db      	mvns	r3, r3
 800d0be:	401a      	ands	r2, r3
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d0c4:	f7fe fc64 	bl	800b990 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	685a      	ldr	r2, [r3, #4]
 800d0cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d0f8 <vPortFree+0xc0>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	4a09      	ldr	r2, [pc, #36]	@ (800d0f8 <vPortFree+0xc0>)
 800d0d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d0d6:	6938      	ldr	r0, [r7, #16]
 800d0d8:	f000 f874 	bl	800d1c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d0dc:	4b07      	ldr	r3, [pc, #28]	@ (800d0fc <vPortFree+0xc4>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	4a06      	ldr	r2, [pc, #24]	@ (800d0fc <vPortFree+0xc4>)
 800d0e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d0e6:	f7fe fc61 	bl	800b9ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d0ea:	bf00      	nop
 800d0ec:	3718      	adds	r7, #24
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	20005180 	.word	0x20005180
 800d0f8:	20005170 	.word	0x20005170
 800d0fc:	2000517c 	.word	0x2000517c

0800d100 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d106:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d10a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d10c:	4b27      	ldr	r3, [pc, #156]	@ (800d1ac <prvHeapInit+0xac>)
 800d10e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f003 0307 	and.w	r3, r3, #7
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00c      	beq.n	800d134 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	3307      	adds	r3, #7
 800d11e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f023 0307 	bic.w	r3, r3, #7
 800d126:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d128:	68ba      	ldr	r2, [r7, #8]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	1ad3      	subs	r3, r2, r3
 800d12e:	4a1f      	ldr	r2, [pc, #124]	@ (800d1ac <prvHeapInit+0xac>)
 800d130:	4413      	add	r3, r2
 800d132:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d138:	4a1d      	ldr	r2, [pc, #116]	@ (800d1b0 <prvHeapInit+0xb0>)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d13e:	4b1c      	ldr	r3, [pc, #112]	@ (800d1b0 <prvHeapInit+0xb0>)
 800d140:	2200      	movs	r2, #0
 800d142:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	68ba      	ldr	r2, [r7, #8]
 800d148:	4413      	add	r3, r2
 800d14a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d14c:	2208      	movs	r2, #8
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	1a9b      	subs	r3, r3, r2
 800d152:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f023 0307 	bic.w	r3, r3, #7
 800d15a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	4a15      	ldr	r2, [pc, #84]	@ (800d1b4 <prvHeapInit+0xb4>)
 800d160:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d162:	4b14      	ldr	r3, [pc, #80]	@ (800d1b4 <prvHeapInit+0xb4>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2200      	movs	r2, #0
 800d168:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d16a:	4b12      	ldr	r3, [pc, #72]	@ (800d1b4 <prvHeapInit+0xb4>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	2200      	movs	r2, #0
 800d170:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	1ad2      	subs	r2, r2, r3
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d180:	4b0c      	ldr	r3, [pc, #48]	@ (800d1b4 <prvHeapInit+0xb4>)
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	4a0a      	ldr	r2, [pc, #40]	@ (800d1b8 <prvHeapInit+0xb8>)
 800d18e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	4a09      	ldr	r2, [pc, #36]	@ (800d1bc <prvHeapInit+0xbc>)
 800d196:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d198:	4b09      	ldr	r3, [pc, #36]	@ (800d1c0 <prvHeapInit+0xc0>)
 800d19a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d19e:	601a      	str	r2, [r3, #0]
}
 800d1a0:	bf00      	nop
 800d1a2:	3714      	adds	r7, #20
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr
 800d1ac:	20001564 	.word	0x20001564
 800d1b0:	20005164 	.word	0x20005164
 800d1b4:	2000516c 	.word	0x2000516c
 800d1b8:	20005174 	.word	0x20005174
 800d1bc:	20005170 	.word	0x20005170
 800d1c0:	20005180 	.word	0x20005180

0800d1c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d1cc:	4b28      	ldr	r3, [pc, #160]	@ (800d270 <prvInsertBlockIntoFreeList+0xac>)
 800d1ce:	60fb      	str	r3, [r7, #12]
 800d1d0:	e002      	b.n	800d1d8 <prvInsertBlockIntoFreeList+0x14>
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	60fb      	str	r3, [r7, #12]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d8f7      	bhi.n	800d1d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	68ba      	ldr	r2, [r7, #8]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d108      	bne.n	800d206 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	685a      	ldr	r2, [r3, #4]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	441a      	add	r2, r3
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	441a      	add	r2, r3
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	429a      	cmp	r2, r3
 800d218:	d118      	bne.n	800d24c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	4b15      	ldr	r3, [pc, #84]	@ (800d274 <prvInsertBlockIntoFreeList+0xb0>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	429a      	cmp	r2, r3
 800d224:	d00d      	beq.n	800d242 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	685a      	ldr	r2, [r3, #4]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	441a      	add	r2, r3
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	601a      	str	r2, [r3, #0]
 800d240:	e008      	b.n	800d254 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d242:	4b0c      	ldr	r3, [pc, #48]	@ (800d274 <prvInsertBlockIntoFreeList+0xb0>)
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	601a      	str	r2, [r3, #0]
 800d24a:	e003      	b.n	800d254 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d002      	beq.n	800d262 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d262:	bf00      	nop
 800d264:	3714      	adds	r7, #20
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	20005164 	.word	0x20005164
 800d274:	2000516c 	.word	0x2000516c

0800d278 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800d27e:	2300      	movs	r3, #0
 800d280:	71fb      	strb	r3, [r7, #7]
 800d282:	e026      	b.n	800d2d2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800d284:	79fb      	ldrb	r3, [r7, #7]
 800d286:	3b50      	subs	r3, #80	@ 0x50
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	2100      	movs	r1, #0
 800d28c:	4618      	mov	r0, r3
 800d28e:	f000 f82b 	bl	800d2e8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800d292:	2100      	movs	r1, #0
 800d294:	2000      	movs	r0, #0
 800d296:	f000 f827 	bl	800d2e8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800d29a:	2100      	movs	r1, #0
 800d29c:	2010      	movs	r0, #16
 800d29e:	f000 f823 	bl	800d2e8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	71bb      	strb	r3, [r7, #6]
 800d2a6:	e00d      	b.n	800d2c4 <OLED_Refresh_Gram+0x4c>
 800d2a8:	79ba      	ldrb	r2, [r7, #6]
 800d2aa:	79fb      	ldrb	r3, [r7, #7]
 800d2ac:	490d      	ldr	r1, [pc, #52]	@ (800d2e4 <OLED_Refresh_Gram+0x6c>)
 800d2ae:	00d2      	lsls	r2, r2, #3
 800d2b0:	440a      	add	r2, r1
 800d2b2:	4413      	add	r3, r2
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	2101      	movs	r1, #1
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f000 f815 	bl	800d2e8 <OLED_WR_Byte>
 800d2be:	79bb      	ldrb	r3, [r7, #6]
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	71bb      	strb	r3, [r7, #6]
 800d2c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	daed      	bge.n	800d2a8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800d2cc:	79fb      	ldrb	r3, [r7, #7]
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	71fb      	strb	r3, [r7, #7]
 800d2d2:	79fb      	ldrb	r3, [r7, #7]
 800d2d4:	2b07      	cmp	r3, #7
 800d2d6:	d9d5      	bls.n	800d284 <OLED_Refresh_Gram+0xc>
	}   
}
 800d2d8:	bf00      	nop
 800d2da:	bf00      	nop
 800d2dc:	3708      	adds	r7, #8
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	20005184 	.word	0x20005184

0800d2e8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	460a      	mov	r2, r1
 800d2f2:	71fb      	strb	r3, [r7, #7]
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800d2f8:	79bb      	ldrb	r3, [r7, #6]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d006      	beq.n	800d30c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800d2fe:	2201      	movs	r2, #1
 800d300:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d304:	481e      	ldr	r0, [pc, #120]	@ (800d380 <OLED_WR_Byte+0x98>)
 800d306:	f7f8 fae1 	bl	80058cc <HAL_GPIO_WritePin>
 800d30a:	e005      	b.n	800d318 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800d30c:	2200      	movs	r2, #0
 800d30e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d312:	481b      	ldr	r0, [pc, #108]	@ (800d380 <OLED_WR_Byte+0x98>)
 800d314:	f7f8 fada 	bl	80058cc <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800d318:	2300      	movs	r3, #0
 800d31a:	73fb      	strb	r3, [r7, #15]
 800d31c:	e022      	b.n	800d364 <OLED_WR_Byte+0x7c>
	{			  
		OLED_SCLK_Clr();
 800d31e:	2200      	movs	r2, #0
 800d320:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d324:	4816      	ldr	r0, [pc, #88]	@ (800d380 <OLED_WR_Byte+0x98>)
 800d326:	f7f8 fad1 	bl	80058cc <HAL_GPIO_WritePin>
		if(dat&0x80)
 800d32a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	da06      	bge.n	800d340 <OLED_WR_Byte+0x58>
		   OLED_SDIN_Set();
 800d332:	2201      	movs	r2, #1
 800d334:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d338:	4811      	ldr	r0, [pc, #68]	@ (800d380 <OLED_WR_Byte+0x98>)
 800d33a:	f7f8 fac7 	bl	80058cc <HAL_GPIO_WritePin>
 800d33e:	e005      	b.n	800d34c <OLED_WR_Byte+0x64>
		else 
		   OLED_SDIN_Clr();
 800d340:	2200      	movs	r2, #0
 800d342:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d346:	480e      	ldr	r0, [pc, #56]	@ (800d380 <OLED_WR_Byte+0x98>)
 800d348:	f7f8 fac0 	bl	80058cc <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800d34c:	2201      	movs	r2, #1
 800d34e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800d352:	480b      	ldr	r0, [pc, #44]	@ (800d380 <OLED_WR_Byte+0x98>)
 800d354:	f7f8 faba 	bl	80058cc <HAL_GPIO_WritePin>
		dat<<=1;   
 800d358:	79fb      	ldrb	r3, [r7, #7]
 800d35a:	005b      	lsls	r3, r3, #1
 800d35c:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800d35e:	7bfb      	ldrb	r3, [r7, #15]
 800d360:	3301      	adds	r3, #1
 800d362:	73fb      	strb	r3, [r7, #15]
 800d364:	7bfb      	ldrb	r3, [r7, #15]
 800d366:	2b07      	cmp	r3, #7
 800d368:	d9d9      	bls.n	800d31e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800d36a:	2201      	movs	r2, #1
 800d36c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d370:	4803      	ldr	r0, [pc, #12]	@ (800d380 <OLED_WR_Byte+0x98>)
 800d372:	f7f8 faab 	bl	80058cc <HAL_GPIO_WritePin>
} 
 800d376:	bf00      	nop
 800d378:	3710      	adds	r7, #16
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	40020c00 	.word	0x40020c00

0800d384 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800d38a:	2300      	movs	r3, #0
 800d38c:	71fb      	strb	r3, [r7, #7]
 800d38e:	e014      	b.n	800d3ba <OLED_Clear+0x36>
 800d390:	2300      	movs	r3, #0
 800d392:	71bb      	strb	r3, [r7, #6]
 800d394:	e00a      	b.n	800d3ac <OLED_Clear+0x28>
 800d396:	79ba      	ldrb	r2, [r7, #6]
 800d398:	79fb      	ldrb	r3, [r7, #7]
 800d39a:	490c      	ldr	r1, [pc, #48]	@ (800d3cc <OLED_Clear+0x48>)
 800d39c:	00d2      	lsls	r2, r2, #3
 800d39e:	440a      	add	r2, r1
 800d3a0:	4413      	add	r3, r2
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	701a      	strb	r2, [r3, #0]
 800d3a6:	79bb      	ldrb	r3, [r7, #6]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	71bb      	strb	r3, [r7, #6]
 800d3ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	daf0      	bge.n	800d396 <OLED_Clear+0x12>
 800d3b4:	79fb      	ldrb	r3, [r7, #7]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	71fb      	strb	r3, [r7, #7]
 800d3ba:	79fb      	ldrb	r3, [r7, #7]
 800d3bc:	2b07      	cmp	r3, #7
 800d3be:	d9e7      	bls.n	800d390 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800d3c0:	f7ff ff5a 	bl	800d278 <OLED_Refresh_Gram>
}
 800d3c4:	bf00      	nop
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	20005184 	.word	0x20005184

0800d3d0 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	71fb      	strb	r3, [r7, #7]
 800d3da:	460b      	mov	r3, r1
 800d3dc:	71bb      	strb	r3, [r7, #6]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800d3e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	db41      	blt.n	800d472 <OLED_DrawPoint+0xa2>
 800d3ee:	79bb      	ldrb	r3, [r7, #6]
 800d3f0:	2b3f      	cmp	r3, #63	@ 0x3f
 800d3f2:	d83e      	bhi.n	800d472 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800d3f4:	79bb      	ldrb	r3, [r7, #6]
 800d3f6:	08db      	lsrs	r3, r3, #3
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	f1c3 0307 	rsb	r3, r3, #7
 800d3fe:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800d400:	79bb      	ldrb	r3, [r7, #6]
 800d402:	f003 0307 	and.w	r3, r3, #7
 800d406:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800d408:	7b7b      	ldrb	r3, [r7, #13]
 800d40a:	f1c3 0307 	rsb	r3, r3, #7
 800d40e:	2201      	movs	r2, #1
 800d410:	fa02 f303 	lsl.w	r3, r2, r3
 800d414:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800d416:	797b      	ldrb	r3, [r7, #5]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d012      	beq.n	800d442 <OLED_DrawPoint+0x72>
 800d41c:	79fa      	ldrb	r2, [r7, #7]
 800d41e:	7bbb      	ldrb	r3, [r7, #14]
 800d420:	4917      	ldr	r1, [pc, #92]	@ (800d480 <OLED_DrawPoint+0xb0>)
 800d422:	00d2      	lsls	r2, r2, #3
 800d424:	440a      	add	r2, r1
 800d426:	4413      	add	r3, r2
 800d428:	7818      	ldrb	r0, [r3, #0]
 800d42a:	79fa      	ldrb	r2, [r7, #7]
 800d42c:	7bbb      	ldrb	r3, [r7, #14]
 800d42e:	7bf9      	ldrb	r1, [r7, #15]
 800d430:	4301      	orrs	r1, r0
 800d432:	b2c8      	uxtb	r0, r1
 800d434:	4912      	ldr	r1, [pc, #72]	@ (800d480 <OLED_DrawPoint+0xb0>)
 800d436:	00d2      	lsls	r2, r2, #3
 800d438:	440a      	add	r2, r1
 800d43a:	4413      	add	r3, r2
 800d43c:	4602      	mov	r2, r0
 800d43e:	701a      	strb	r2, [r3, #0]
 800d440:	e018      	b.n	800d474 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800d442:	79fa      	ldrb	r2, [r7, #7]
 800d444:	7bbb      	ldrb	r3, [r7, #14]
 800d446:	490e      	ldr	r1, [pc, #56]	@ (800d480 <OLED_DrawPoint+0xb0>)
 800d448:	00d2      	lsls	r2, r2, #3
 800d44a:	440a      	add	r2, r1
 800d44c:	4413      	add	r3, r2
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	b25a      	sxtb	r2, r3
 800d452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d456:	43db      	mvns	r3, r3
 800d458:	b25b      	sxtb	r3, r3
 800d45a:	4013      	ands	r3, r2
 800d45c:	b259      	sxtb	r1, r3
 800d45e:	79fa      	ldrb	r2, [r7, #7]
 800d460:	7bbb      	ldrb	r3, [r7, #14]
 800d462:	b2c8      	uxtb	r0, r1
 800d464:	4906      	ldr	r1, [pc, #24]	@ (800d480 <OLED_DrawPoint+0xb0>)
 800d466:	00d2      	lsls	r2, r2, #3
 800d468:	440a      	add	r2, r1
 800d46a:	4413      	add	r3, r2
 800d46c:	4602      	mov	r2, r0
 800d46e:	701a      	strb	r2, [r3, #0]
 800d470:	e000      	b.n	800d474 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800d472:	bf00      	nop
}
 800d474:	3714      	adds	r7, #20
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop
 800d480:	20005184 	.word	0x20005184

0800d484 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800d484:	b590      	push	{r4, r7, lr}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
 800d48a:	4604      	mov	r4, r0
 800d48c:	4608      	mov	r0, r1
 800d48e:	4611      	mov	r1, r2
 800d490:	461a      	mov	r2, r3
 800d492:	4623      	mov	r3, r4
 800d494:	71fb      	strb	r3, [r7, #7]
 800d496:	4603      	mov	r3, r0
 800d498:	71bb      	strb	r3, [r7, #6]
 800d49a:	460b      	mov	r3, r1
 800d49c:	717b      	strb	r3, [r7, #5]
 800d49e:	4613      	mov	r3, r2
 800d4a0:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800d4a2:	79bb      	ldrb	r3, [r7, #6]
 800d4a4:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800d4a6:	797b      	ldrb	r3, [r7, #5]
 800d4a8:	3b20      	subs	r3, #32
 800d4aa:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	73bb      	strb	r3, [r7, #14]
 800d4b0:	e04d      	b.n	800d54e <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800d4b2:	793b      	ldrb	r3, [r7, #4]
 800d4b4:	2b0c      	cmp	r3, #12
 800d4b6:	d10b      	bne.n	800d4d0 <OLED_ShowChar+0x4c>
 800d4b8:	797a      	ldrb	r2, [r7, #5]
 800d4ba:	7bb9      	ldrb	r1, [r7, #14]
 800d4bc:	4828      	ldr	r0, [pc, #160]	@ (800d560 <OLED_ShowChar+0xdc>)
 800d4be:	4613      	mov	r3, r2
 800d4c0:	005b      	lsls	r3, r3, #1
 800d4c2:	4413      	add	r3, r2
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	4403      	add	r3, r0
 800d4c8:	440b      	add	r3, r1
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	73fb      	strb	r3, [r7, #15]
 800d4ce:	e007      	b.n	800d4e0 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800d4d0:	797a      	ldrb	r2, [r7, #5]
 800d4d2:	7bbb      	ldrb	r3, [r7, #14]
 800d4d4:	4923      	ldr	r1, [pc, #140]	@ (800d564 <OLED_ShowChar+0xe0>)
 800d4d6:	0112      	lsls	r2, r2, #4
 800d4d8:	440a      	add	r2, r1
 800d4da:	4413      	add	r3, r2
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	737b      	strb	r3, [r7, #13]
 800d4e4:	e02d      	b.n	800d542 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800d4e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	da07      	bge.n	800d4fe <OLED_ShowChar+0x7a>
 800d4ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d4f2:	79b9      	ldrb	r1, [r7, #6]
 800d4f4:	79fb      	ldrb	r3, [r7, #7]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7ff ff6a 	bl	800d3d0 <OLED_DrawPoint>
 800d4fc:	e00c      	b.n	800d518 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800d4fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d502:	2b00      	cmp	r3, #0
 800d504:	bf0c      	ite	eq
 800d506:	2301      	moveq	r3, #1
 800d508:	2300      	movne	r3, #0
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	461a      	mov	r2, r3
 800d50e:	79b9      	ldrb	r1, [r7, #6]
 800d510:	79fb      	ldrb	r3, [r7, #7]
 800d512:	4618      	mov	r0, r3
 800d514:	f7ff ff5c 	bl	800d3d0 <OLED_DrawPoint>
			temp<<=1;
 800d518:	7bfb      	ldrb	r3, [r7, #15]
 800d51a:	005b      	lsls	r3, r3, #1
 800d51c:	73fb      	strb	r3, [r7, #15]
			y++;
 800d51e:	79bb      	ldrb	r3, [r7, #6]
 800d520:	3301      	adds	r3, #1
 800d522:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800d524:	79ba      	ldrb	r2, [r7, #6]
 800d526:	7b3b      	ldrb	r3, [r7, #12]
 800d528:	1ad2      	subs	r2, r2, r3
 800d52a:	793b      	ldrb	r3, [r7, #4]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d105      	bne.n	800d53c <OLED_ShowChar+0xb8>
			{
				y=y0;
 800d530:	7b3b      	ldrb	r3, [r7, #12]
 800d532:	71bb      	strb	r3, [r7, #6]
				x++;
 800d534:	79fb      	ldrb	r3, [r7, #7]
 800d536:	3301      	adds	r3, #1
 800d538:	71fb      	strb	r3, [r7, #7]
				break;
 800d53a:	e005      	b.n	800d548 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800d53c:	7b7b      	ldrb	r3, [r7, #13]
 800d53e:	3301      	adds	r3, #1
 800d540:	737b      	strb	r3, [r7, #13]
 800d542:	7b7b      	ldrb	r3, [r7, #13]
 800d544:	2b07      	cmp	r3, #7
 800d546:	d9ce      	bls.n	800d4e6 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800d548:	7bbb      	ldrb	r3, [r7, #14]
 800d54a:	3301      	adds	r3, #1
 800d54c:	73bb      	strb	r3, [r7, #14]
 800d54e:	7bba      	ldrb	r2, [r7, #14]
 800d550:	793b      	ldrb	r3, [r7, #4]
 800d552:	429a      	cmp	r2, r3
 800d554:	d3ad      	bcc.n	800d4b2 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800d556:	bf00      	nop
 800d558:	bf00      	nop
 800d55a:	3714      	adds	r7, #20
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd90      	pop	{r4, r7, pc}
 800d560:	0801077c 	.word	0x0801077c
 800d564:	08010bf0 	.word	0x08010bf0

0800d568 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af02      	add	r7, sp, #8
 800d56e:	4603      	mov	r3, r0
 800d570:	603a      	str	r2, [r7, #0]
 800d572:	71fb      	strb	r3, [r7, #7]
 800d574:	460b      	mov	r3, r1
 800d576:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800d578:	e01f      	b.n	800d5ba <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800d57a:	79fb      	ldrb	r3, [r7, #7]
 800d57c:	2b7a      	cmp	r3, #122	@ 0x7a
 800d57e:	d904      	bls.n	800d58a <OLED_ShowString+0x22>
 800d580:	2300      	movs	r3, #0
 800d582:	71fb      	strb	r3, [r7, #7]
 800d584:	79bb      	ldrb	r3, [r7, #6]
 800d586:	3310      	adds	r3, #16
 800d588:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800d58a:	79bb      	ldrb	r3, [r7, #6]
 800d58c:	2b3a      	cmp	r3, #58	@ 0x3a
 800d58e:	d905      	bls.n	800d59c <OLED_ShowString+0x34>
 800d590:	2300      	movs	r3, #0
 800d592:	71fb      	strb	r3, [r7, #7]
 800d594:	79fb      	ldrb	r3, [r7, #7]
 800d596:	71bb      	strb	r3, [r7, #6]
 800d598:	f7ff fef4 	bl	800d384 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	781a      	ldrb	r2, [r3, #0]
 800d5a0:	79b9      	ldrb	r1, [r7, #6]
 800d5a2:	79f8      	ldrb	r0, [r7, #7]
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	230c      	movs	r3, #12
 800d5aa:	f7ff ff6b 	bl	800d484 <OLED_ShowChar>
        x+=8;
 800d5ae:	79fb      	ldrb	r3, [r7, #7]
 800d5b0:	3308      	adds	r3, #8
 800d5b2:	71fb      	strb	r3, [r7, #7]
        p++;
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d1db      	bne.n	800d57a <OLED_ShowString+0x12>
    }  
}	 
 800d5c2:	bf00      	nop
 800d5c4:	bf00      	nop
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <OLED_Init>:

void OLED_Init(void)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800d5d0:	f7f9 fe84 	bl	80072dc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800d5d4:	4b42      	ldr	r3, [pc, #264]	@ (800d6e0 <OLED_Init+0x114>)
 800d5d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5d8:	4a41      	ldr	r2, [pc, #260]	@ (800d6e0 <OLED_Init+0x114>)
 800d5da:	f023 0301 	bic.w	r3, r3, #1
 800d5de:	6713      	str	r3, [r2, #112]	@ 0x70
 800d5e0:	4b3f      	ldr	r3, [pc, #252]	@ (800d6e0 <OLED_Init+0x114>)
 800d5e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5e4:	4a3e      	ldr	r2, [pc, #248]	@ (800d6e0 <OLED_Init+0x114>)
 800d5e6:	f023 0304 	bic.w	r3, r3, #4
 800d5ea:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800d5ec:	f7f9 fe8a 	bl	8007304 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d5f6:	483b      	ldr	r0, [pc, #236]	@ (800d6e4 <OLED_Init+0x118>)
 800d5f8:	f7f8 f968 	bl	80058cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800d5fc:	2064      	movs	r0, #100	@ 0x64
 800d5fe:	f7f7 f91d 	bl	800483c <HAL_Delay>
	OLED_RST_Set();
 800d602:	2201      	movs	r2, #1
 800d604:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d608:	4836      	ldr	r0, [pc, #216]	@ (800d6e4 <OLED_Init+0x118>)
 800d60a:	f7f8 f95f 	bl	80058cc <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800d60e:	2100      	movs	r1, #0
 800d610:	20ae      	movs	r0, #174	@ 0xae
 800d612:	f7ff fe69 	bl	800d2e8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800d616:	2100      	movs	r1, #0
 800d618:	20d5      	movs	r0, #213	@ 0xd5
 800d61a:	f7ff fe65 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800d61e:	2100      	movs	r1, #0
 800d620:	2050      	movs	r0, #80	@ 0x50
 800d622:	f7ff fe61 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800d626:	2100      	movs	r1, #0
 800d628:	20a8      	movs	r0, #168	@ 0xa8
 800d62a:	f7ff fe5d 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800d62e:	2100      	movs	r1, #0
 800d630:	203f      	movs	r0, #63	@ 0x3f
 800d632:	f7ff fe59 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800d636:	2100      	movs	r1, #0
 800d638:	20d3      	movs	r0, #211	@ 0xd3
 800d63a:	f7ff fe55 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800d63e:	2100      	movs	r1, #0
 800d640:	2000      	movs	r0, #0
 800d642:	f7ff fe51 	bl	800d2e8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800d646:	2100      	movs	r1, #0
 800d648:	2040      	movs	r0, #64	@ 0x40
 800d64a:	f7ff fe4d 	bl	800d2e8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800d64e:	2100      	movs	r1, #0
 800d650:	208d      	movs	r0, #141	@ 0x8d
 800d652:	f7ff fe49 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800d656:	2100      	movs	r1, #0
 800d658:	2014      	movs	r0, #20
 800d65a:	f7ff fe45 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800d65e:	2100      	movs	r1, #0
 800d660:	2020      	movs	r0, #32
 800d662:	f7ff fe41 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800d666:	2100      	movs	r1, #0
 800d668:	2002      	movs	r0, #2
 800d66a:	f7ff fe3d 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800d66e:	2100      	movs	r1, #0
 800d670:	20a1      	movs	r0, #161	@ 0xa1
 800d672:	f7ff fe39 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800d676:	2100      	movs	r1, #0
 800d678:	20c0      	movs	r0, #192	@ 0xc0
 800d67a:	f7ff fe35 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800d67e:	2100      	movs	r1, #0
 800d680:	20da      	movs	r0, #218	@ 0xda
 800d682:	f7ff fe31 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800d686:	2100      	movs	r1, #0
 800d688:	2012      	movs	r0, #18
 800d68a:	f7ff fe2d 	bl	800d2e8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800d68e:	2100      	movs	r1, #0
 800d690:	2081      	movs	r0, #129	@ 0x81
 800d692:	f7ff fe29 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800d696:	2100      	movs	r1, #0
 800d698:	20ef      	movs	r0, #239	@ 0xef
 800d69a:	f7ff fe25 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800d69e:	2100      	movs	r1, #0
 800d6a0:	20d9      	movs	r0, #217	@ 0xd9
 800d6a2:	f7ff fe21 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	20f1      	movs	r0, #241	@ 0xf1
 800d6aa:	f7ff fe1d 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	20db      	movs	r0, #219	@ 0xdb
 800d6b2:	f7ff fe19 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	2030      	movs	r0, #48	@ 0x30
 800d6ba:	f7ff fe15 	bl	800d2e8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800d6be:	2100      	movs	r1, #0
 800d6c0:	20a4      	movs	r0, #164	@ 0xa4
 800d6c2:	f7ff fe11 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	20a6      	movs	r0, #166	@ 0xa6
 800d6ca:	f7ff fe0d 	bl	800d2e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	20af      	movs	r0, #175	@ 0xaf
 800d6d2:	f7ff fe09 	bl	800d2e8 <OLED_WR_Byte>
	OLED_Clear(); 
 800d6d6:	f7ff fe55 	bl	800d384 <OLED_Clear>
 800d6da:	bf00      	nop
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	40023800 	.word	0x40023800
 800d6e4:	40020c00 	.word	0x40020c00

0800d6e8 <__cvt>:
 800d6e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6ec:	ec57 6b10 	vmov	r6, r7, d0
 800d6f0:	2f00      	cmp	r7, #0
 800d6f2:	460c      	mov	r4, r1
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	463b      	mov	r3, r7
 800d6f8:	bfbb      	ittet	lt
 800d6fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d6fe:	461f      	movlt	r7, r3
 800d700:	2300      	movge	r3, #0
 800d702:	232d      	movlt	r3, #45	@ 0x2d
 800d704:	700b      	strb	r3, [r1, #0]
 800d706:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d708:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d70c:	4691      	mov	r9, r2
 800d70e:	f023 0820 	bic.w	r8, r3, #32
 800d712:	bfbc      	itt	lt
 800d714:	4632      	movlt	r2, r6
 800d716:	4616      	movlt	r6, r2
 800d718:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d71c:	d005      	beq.n	800d72a <__cvt+0x42>
 800d71e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d722:	d100      	bne.n	800d726 <__cvt+0x3e>
 800d724:	3401      	adds	r4, #1
 800d726:	2102      	movs	r1, #2
 800d728:	e000      	b.n	800d72c <__cvt+0x44>
 800d72a:	2103      	movs	r1, #3
 800d72c:	ab03      	add	r3, sp, #12
 800d72e:	9301      	str	r3, [sp, #4]
 800d730:	ab02      	add	r3, sp, #8
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	ec47 6b10 	vmov	d0, r6, r7
 800d738:	4653      	mov	r3, sl
 800d73a:	4622      	mov	r2, r4
 800d73c:	f000 feec 	bl	800e518 <_dtoa_r>
 800d740:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d744:	4605      	mov	r5, r0
 800d746:	d119      	bne.n	800d77c <__cvt+0x94>
 800d748:	f019 0f01 	tst.w	r9, #1
 800d74c:	d00e      	beq.n	800d76c <__cvt+0x84>
 800d74e:	eb00 0904 	add.w	r9, r0, r4
 800d752:	2200      	movs	r2, #0
 800d754:	2300      	movs	r3, #0
 800d756:	4630      	mov	r0, r6
 800d758:	4639      	mov	r1, r7
 800d75a:	f7f3 f9c5 	bl	8000ae8 <__aeabi_dcmpeq>
 800d75e:	b108      	cbz	r0, 800d764 <__cvt+0x7c>
 800d760:	f8cd 900c 	str.w	r9, [sp, #12]
 800d764:	2230      	movs	r2, #48	@ 0x30
 800d766:	9b03      	ldr	r3, [sp, #12]
 800d768:	454b      	cmp	r3, r9
 800d76a:	d31e      	bcc.n	800d7aa <__cvt+0xc2>
 800d76c:	9b03      	ldr	r3, [sp, #12]
 800d76e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d770:	1b5b      	subs	r3, r3, r5
 800d772:	4628      	mov	r0, r5
 800d774:	6013      	str	r3, [r2, #0]
 800d776:	b004      	add	sp, #16
 800d778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d77c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d780:	eb00 0904 	add.w	r9, r0, r4
 800d784:	d1e5      	bne.n	800d752 <__cvt+0x6a>
 800d786:	7803      	ldrb	r3, [r0, #0]
 800d788:	2b30      	cmp	r3, #48	@ 0x30
 800d78a:	d10a      	bne.n	800d7a2 <__cvt+0xba>
 800d78c:	2200      	movs	r2, #0
 800d78e:	2300      	movs	r3, #0
 800d790:	4630      	mov	r0, r6
 800d792:	4639      	mov	r1, r7
 800d794:	f7f3 f9a8 	bl	8000ae8 <__aeabi_dcmpeq>
 800d798:	b918      	cbnz	r0, 800d7a2 <__cvt+0xba>
 800d79a:	f1c4 0401 	rsb	r4, r4, #1
 800d79e:	f8ca 4000 	str.w	r4, [sl]
 800d7a2:	f8da 3000 	ldr.w	r3, [sl]
 800d7a6:	4499      	add	r9, r3
 800d7a8:	e7d3      	b.n	800d752 <__cvt+0x6a>
 800d7aa:	1c59      	adds	r1, r3, #1
 800d7ac:	9103      	str	r1, [sp, #12]
 800d7ae:	701a      	strb	r2, [r3, #0]
 800d7b0:	e7d9      	b.n	800d766 <__cvt+0x7e>

0800d7b2 <__exponent>:
 800d7b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7b4:	2900      	cmp	r1, #0
 800d7b6:	bfba      	itte	lt
 800d7b8:	4249      	neglt	r1, r1
 800d7ba:	232d      	movlt	r3, #45	@ 0x2d
 800d7bc:	232b      	movge	r3, #43	@ 0x2b
 800d7be:	2909      	cmp	r1, #9
 800d7c0:	7002      	strb	r2, [r0, #0]
 800d7c2:	7043      	strb	r3, [r0, #1]
 800d7c4:	dd29      	ble.n	800d81a <__exponent+0x68>
 800d7c6:	f10d 0307 	add.w	r3, sp, #7
 800d7ca:	461d      	mov	r5, r3
 800d7cc:	270a      	movs	r7, #10
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	fbb1 f6f7 	udiv	r6, r1, r7
 800d7d4:	fb07 1416 	mls	r4, r7, r6, r1
 800d7d8:	3430      	adds	r4, #48	@ 0x30
 800d7da:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d7de:	460c      	mov	r4, r1
 800d7e0:	2c63      	cmp	r4, #99	@ 0x63
 800d7e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d7e6:	4631      	mov	r1, r6
 800d7e8:	dcf1      	bgt.n	800d7ce <__exponent+0x1c>
 800d7ea:	3130      	adds	r1, #48	@ 0x30
 800d7ec:	1e94      	subs	r4, r2, #2
 800d7ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d7f2:	1c41      	adds	r1, r0, #1
 800d7f4:	4623      	mov	r3, r4
 800d7f6:	42ab      	cmp	r3, r5
 800d7f8:	d30a      	bcc.n	800d810 <__exponent+0x5e>
 800d7fa:	f10d 0309 	add.w	r3, sp, #9
 800d7fe:	1a9b      	subs	r3, r3, r2
 800d800:	42ac      	cmp	r4, r5
 800d802:	bf88      	it	hi
 800d804:	2300      	movhi	r3, #0
 800d806:	3302      	adds	r3, #2
 800d808:	4403      	add	r3, r0
 800d80a:	1a18      	subs	r0, r3, r0
 800d80c:	b003      	add	sp, #12
 800d80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d810:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d814:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d818:	e7ed      	b.n	800d7f6 <__exponent+0x44>
 800d81a:	2330      	movs	r3, #48	@ 0x30
 800d81c:	3130      	adds	r1, #48	@ 0x30
 800d81e:	7083      	strb	r3, [r0, #2]
 800d820:	70c1      	strb	r1, [r0, #3]
 800d822:	1d03      	adds	r3, r0, #4
 800d824:	e7f1      	b.n	800d80a <__exponent+0x58>
	...

0800d828 <_printf_float>:
 800d828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82c:	b08d      	sub	sp, #52	@ 0x34
 800d82e:	460c      	mov	r4, r1
 800d830:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d834:	4616      	mov	r6, r2
 800d836:	461f      	mov	r7, r3
 800d838:	4605      	mov	r5, r0
 800d83a:	f000 fcff 	bl	800e23c <_localeconv_r>
 800d83e:	6803      	ldr	r3, [r0, #0]
 800d840:	9304      	str	r3, [sp, #16]
 800d842:	4618      	mov	r0, r3
 800d844:	f7f2 fd24 	bl	8000290 <strlen>
 800d848:	2300      	movs	r3, #0
 800d84a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d84c:	f8d8 3000 	ldr.w	r3, [r8]
 800d850:	9005      	str	r0, [sp, #20]
 800d852:	3307      	adds	r3, #7
 800d854:	f023 0307 	bic.w	r3, r3, #7
 800d858:	f103 0208 	add.w	r2, r3, #8
 800d85c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d860:	f8d4 b000 	ldr.w	fp, [r4]
 800d864:	f8c8 2000 	str.w	r2, [r8]
 800d868:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d86c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d870:	9307      	str	r3, [sp, #28]
 800d872:	f8cd 8018 	str.w	r8, [sp, #24]
 800d876:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d87a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d87e:	4b9c      	ldr	r3, [pc, #624]	@ (800daf0 <_printf_float+0x2c8>)
 800d880:	f04f 32ff 	mov.w	r2, #4294967295
 800d884:	f7f3 f962 	bl	8000b4c <__aeabi_dcmpun>
 800d888:	bb70      	cbnz	r0, 800d8e8 <_printf_float+0xc0>
 800d88a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d88e:	4b98      	ldr	r3, [pc, #608]	@ (800daf0 <_printf_float+0x2c8>)
 800d890:	f04f 32ff 	mov.w	r2, #4294967295
 800d894:	f7f3 f93c 	bl	8000b10 <__aeabi_dcmple>
 800d898:	bb30      	cbnz	r0, 800d8e8 <_printf_float+0xc0>
 800d89a:	2200      	movs	r2, #0
 800d89c:	2300      	movs	r3, #0
 800d89e:	4640      	mov	r0, r8
 800d8a0:	4649      	mov	r1, r9
 800d8a2:	f7f3 f92b 	bl	8000afc <__aeabi_dcmplt>
 800d8a6:	b110      	cbz	r0, 800d8ae <_printf_float+0x86>
 800d8a8:	232d      	movs	r3, #45	@ 0x2d
 800d8aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8ae:	4a91      	ldr	r2, [pc, #580]	@ (800daf4 <_printf_float+0x2cc>)
 800d8b0:	4b91      	ldr	r3, [pc, #580]	@ (800daf8 <_printf_float+0x2d0>)
 800d8b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d8b6:	bf8c      	ite	hi
 800d8b8:	4690      	movhi	r8, r2
 800d8ba:	4698      	movls	r8, r3
 800d8bc:	2303      	movs	r3, #3
 800d8be:	6123      	str	r3, [r4, #16]
 800d8c0:	f02b 0304 	bic.w	r3, fp, #4
 800d8c4:	6023      	str	r3, [r4, #0]
 800d8c6:	f04f 0900 	mov.w	r9, #0
 800d8ca:	9700      	str	r7, [sp, #0]
 800d8cc:	4633      	mov	r3, r6
 800d8ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d8d0:	4621      	mov	r1, r4
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	f000 f9d2 	bl	800dc7c <_printf_common>
 800d8d8:	3001      	adds	r0, #1
 800d8da:	f040 808d 	bne.w	800d9f8 <_printf_float+0x1d0>
 800d8de:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e2:	b00d      	add	sp, #52	@ 0x34
 800d8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8e8:	4642      	mov	r2, r8
 800d8ea:	464b      	mov	r3, r9
 800d8ec:	4640      	mov	r0, r8
 800d8ee:	4649      	mov	r1, r9
 800d8f0:	f7f3 f92c 	bl	8000b4c <__aeabi_dcmpun>
 800d8f4:	b140      	cbz	r0, 800d908 <_printf_float+0xe0>
 800d8f6:	464b      	mov	r3, r9
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	bfbc      	itt	lt
 800d8fc:	232d      	movlt	r3, #45	@ 0x2d
 800d8fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d902:	4a7e      	ldr	r2, [pc, #504]	@ (800dafc <_printf_float+0x2d4>)
 800d904:	4b7e      	ldr	r3, [pc, #504]	@ (800db00 <_printf_float+0x2d8>)
 800d906:	e7d4      	b.n	800d8b2 <_printf_float+0x8a>
 800d908:	6863      	ldr	r3, [r4, #4]
 800d90a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d90e:	9206      	str	r2, [sp, #24]
 800d910:	1c5a      	adds	r2, r3, #1
 800d912:	d13b      	bne.n	800d98c <_printf_float+0x164>
 800d914:	2306      	movs	r3, #6
 800d916:	6063      	str	r3, [r4, #4]
 800d918:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d91c:	2300      	movs	r3, #0
 800d91e:	6022      	str	r2, [r4, #0]
 800d920:	9303      	str	r3, [sp, #12]
 800d922:	ab0a      	add	r3, sp, #40	@ 0x28
 800d924:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d928:	ab09      	add	r3, sp, #36	@ 0x24
 800d92a:	9300      	str	r3, [sp, #0]
 800d92c:	6861      	ldr	r1, [r4, #4]
 800d92e:	ec49 8b10 	vmov	d0, r8, r9
 800d932:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d936:	4628      	mov	r0, r5
 800d938:	f7ff fed6 	bl	800d6e8 <__cvt>
 800d93c:	9b06      	ldr	r3, [sp, #24]
 800d93e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d940:	2b47      	cmp	r3, #71	@ 0x47
 800d942:	4680      	mov	r8, r0
 800d944:	d129      	bne.n	800d99a <_printf_float+0x172>
 800d946:	1cc8      	adds	r0, r1, #3
 800d948:	db02      	blt.n	800d950 <_printf_float+0x128>
 800d94a:	6863      	ldr	r3, [r4, #4]
 800d94c:	4299      	cmp	r1, r3
 800d94e:	dd41      	ble.n	800d9d4 <_printf_float+0x1ac>
 800d950:	f1aa 0a02 	sub.w	sl, sl, #2
 800d954:	fa5f fa8a 	uxtb.w	sl, sl
 800d958:	3901      	subs	r1, #1
 800d95a:	4652      	mov	r2, sl
 800d95c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d960:	9109      	str	r1, [sp, #36]	@ 0x24
 800d962:	f7ff ff26 	bl	800d7b2 <__exponent>
 800d966:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d968:	1813      	adds	r3, r2, r0
 800d96a:	2a01      	cmp	r2, #1
 800d96c:	4681      	mov	r9, r0
 800d96e:	6123      	str	r3, [r4, #16]
 800d970:	dc02      	bgt.n	800d978 <_printf_float+0x150>
 800d972:	6822      	ldr	r2, [r4, #0]
 800d974:	07d2      	lsls	r2, r2, #31
 800d976:	d501      	bpl.n	800d97c <_printf_float+0x154>
 800d978:	3301      	adds	r3, #1
 800d97a:	6123      	str	r3, [r4, #16]
 800d97c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d980:	2b00      	cmp	r3, #0
 800d982:	d0a2      	beq.n	800d8ca <_printf_float+0xa2>
 800d984:	232d      	movs	r3, #45	@ 0x2d
 800d986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d98a:	e79e      	b.n	800d8ca <_printf_float+0xa2>
 800d98c:	9a06      	ldr	r2, [sp, #24]
 800d98e:	2a47      	cmp	r2, #71	@ 0x47
 800d990:	d1c2      	bne.n	800d918 <_printf_float+0xf0>
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1c0      	bne.n	800d918 <_printf_float+0xf0>
 800d996:	2301      	movs	r3, #1
 800d998:	e7bd      	b.n	800d916 <_printf_float+0xee>
 800d99a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d99e:	d9db      	bls.n	800d958 <_printf_float+0x130>
 800d9a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d9a4:	d118      	bne.n	800d9d8 <_printf_float+0x1b0>
 800d9a6:	2900      	cmp	r1, #0
 800d9a8:	6863      	ldr	r3, [r4, #4]
 800d9aa:	dd0b      	ble.n	800d9c4 <_printf_float+0x19c>
 800d9ac:	6121      	str	r1, [r4, #16]
 800d9ae:	b913      	cbnz	r3, 800d9b6 <_printf_float+0x18e>
 800d9b0:	6822      	ldr	r2, [r4, #0]
 800d9b2:	07d0      	lsls	r0, r2, #31
 800d9b4:	d502      	bpl.n	800d9bc <_printf_float+0x194>
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	440b      	add	r3, r1
 800d9ba:	6123      	str	r3, [r4, #16]
 800d9bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d9be:	f04f 0900 	mov.w	r9, #0
 800d9c2:	e7db      	b.n	800d97c <_printf_float+0x154>
 800d9c4:	b913      	cbnz	r3, 800d9cc <_printf_float+0x1a4>
 800d9c6:	6822      	ldr	r2, [r4, #0]
 800d9c8:	07d2      	lsls	r2, r2, #31
 800d9ca:	d501      	bpl.n	800d9d0 <_printf_float+0x1a8>
 800d9cc:	3302      	adds	r3, #2
 800d9ce:	e7f4      	b.n	800d9ba <_printf_float+0x192>
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e7f2      	b.n	800d9ba <_printf_float+0x192>
 800d9d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d9d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9da:	4299      	cmp	r1, r3
 800d9dc:	db05      	blt.n	800d9ea <_printf_float+0x1c2>
 800d9de:	6823      	ldr	r3, [r4, #0]
 800d9e0:	6121      	str	r1, [r4, #16]
 800d9e2:	07d8      	lsls	r0, r3, #31
 800d9e4:	d5ea      	bpl.n	800d9bc <_printf_float+0x194>
 800d9e6:	1c4b      	adds	r3, r1, #1
 800d9e8:	e7e7      	b.n	800d9ba <_printf_float+0x192>
 800d9ea:	2900      	cmp	r1, #0
 800d9ec:	bfd4      	ite	le
 800d9ee:	f1c1 0202 	rsble	r2, r1, #2
 800d9f2:	2201      	movgt	r2, #1
 800d9f4:	4413      	add	r3, r2
 800d9f6:	e7e0      	b.n	800d9ba <_printf_float+0x192>
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	055a      	lsls	r2, r3, #21
 800d9fc:	d407      	bmi.n	800da0e <_printf_float+0x1e6>
 800d9fe:	6923      	ldr	r3, [r4, #16]
 800da00:	4642      	mov	r2, r8
 800da02:	4631      	mov	r1, r6
 800da04:	4628      	mov	r0, r5
 800da06:	47b8      	blx	r7
 800da08:	3001      	adds	r0, #1
 800da0a:	d12b      	bne.n	800da64 <_printf_float+0x23c>
 800da0c:	e767      	b.n	800d8de <_printf_float+0xb6>
 800da0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800da12:	f240 80dd 	bls.w	800dbd0 <_printf_float+0x3a8>
 800da16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800da1a:	2200      	movs	r2, #0
 800da1c:	2300      	movs	r3, #0
 800da1e:	f7f3 f863 	bl	8000ae8 <__aeabi_dcmpeq>
 800da22:	2800      	cmp	r0, #0
 800da24:	d033      	beq.n	800da8e <_printf_float+0x266>
 800da26:	4a37      	ldr	r2, [pc, #220]	@ (800db04 <_printf_float+0x2dc>)
 800da28:	2301      	movs	r3, #1
 800da2a:	4631      	mov	r1, r6
 800da2c:	4628      	mov	r0, r5
 800da2e:	47b8      	blx	r7
 800da30:	3001      	adds	r0, #1
 800da32:	f43f af54 	beq.w	800d8de <_printf_float+0xb6>
 800da36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800da3a:	4543      	cmp	r3, r8
 800da3c:	db02      	blt.n	800da44 <_printf_float+0x21c>
 800da3e:	6823      	ldr	r3, [r4, #0]
 800da40:	07d8      	lsls	r0, r3, #31
 800da42:	d50f      	bpl.n	800da64 <_printf_float+0x23c>
 800da44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da48:	4631      	mov	r1, r6
 800da4a:	4628      	mov	r0, r5
 800da4c:	47b8      	blx	r7
 800da4e:	3001      	adds	r0, #1
 800da50:	f43f af45 	beq.w	800d8de <_printf_float+0xb6>
 800da54:	f04f 0900 	mov.w	r9, #0
 800da58:	f108 38ff 	add.w	r8, r8, #4294967295
 800da5c:	f104 0a1a 	add.w	sl, r4, #26
 800da60:	45c8      	cmp	r8, r9
 800da62:	dc09      	bgt.n	800da78 <_printf_float+0x250>
 800da64:	6823      	ldr	r3, [r4, #0]
 800da66:	079b      	lsls	r3, r3, #30
 800da68:	f100 8103 	bmi.w	800dc72 <_printf_float+0x44a>
 800da6c:	68e0      	ldr	r0, [r4, #12]
 800da6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da70:	4298      	cmp	r0, r3
 800da72:	bfb8      	it	lt
 800da74:	4618      	movlt	r0, r3
 800da76:	e734      	b.n	800d8e2 <_printf_float+0xba>
 800da78:	2301      	movs	r3, #1
 800da7a:	4652      	mov	r2, sl
 800da7c:	4631      	mov	r1, r6
 800da7e:	4628      	mov	r0, r5
 800da80:	47b8      	blx	r7
 800da82:	3001      	adds	r0, #1
 800da84:	f43f af2b 	beq.w	800d8de <_printf_float+0xb6>
 800da88:	f109 0901 	add.w	r9, r9, #1
 800da8c:	e7e8      	b.n	800da60 <_printf_float+0x238>
 800da8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da90:	2b00      	cmp	r3, #0
 800da92:	dc39      	bgt.n	800db08 <_printf_float+0x2e0>
 800da94:	4a1b      	ldr	r2, [pc, #108]	@ (800db04 <_printf_float+0x2dc>)
 800da96:	2301      	movs	r3, #1
 800da98:	4631      	mov	r1, r6
 800da9a:	4628      	mov	r0, r5
 800da9c:	47b8      	blx	r7
 800da9e:	3001      	adds	r0, #1
 800daa0:	f43f af1d 	beq.w	800d8de <_printf_float+0xb6>
 800daa4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800daa8:	ea59 0303 	orrs.w	r3, r9, r3
 800daac:	d102      	bne.n	800dab4 <_printf_float+0x28c>
 800daae:	6823      	ldr	r3, [r4, #0]
 800dab0:	07d9      	lsls	r1, r3, #31
 800dab2:	d5d7      	bpl.n	800da64 <_printf_float+0x23c>
 800dab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dab8:	4631      	mov	r1, r6
 800daba:	4628      	mov	r0, r5
 800dabc:	47b8      	blx	r7
 800dabe:	3001      	adds	r0, #1
 800dac0:	f43f af0d 	beq.w	800d8de <_printf_float+0xb6>
 800dac4:	f04f 0a00 	mov.w	sl, #0
 800dac8:	f104 0b1a 	add.w	fp, r4, #26
 800dacc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dace:	425b      	negs	r3, r3
 800dad0:	4553      	cmp	r3, sl
 800dad2:	dc01      	bgt.n	800dad8 <_printf_float+0x2b0>
 800dad4:	464b      	mov	r3, r9
 800dad6:	e793      	b.n	800da00 <_printf_float+0x1d8>
 800dad8:	2301      	movs	r3, #1
 800dada:	465a      	mov	r2, fp
 800dadc:	4631      	mov	r1, r6
 800dade:	4628      	mov	r0, r5
 800dae0:	47b8      	blx	r7
 800dae2:	3001      	adds	r0, #1
 800dae4:	f43f aefb 	beq.w	800d8de <_printf_float+0xb6>
 800dae8:	f10a 0a01 	add.w	sl, sl, #1
 800daec:	e7ee      	b.n	800dacc <_printf_float+0x2a4>
 800daee:	bf00      	nop
 800daf0:	7fefffff 	.word	0x7fefffff
 800daf4:	080111e4 	.word	0x080111e4
 800daf8:	080111e0 	.word	0x080111e0
 800dafc:	080111ec 	.word	0x080111ec
 800db00:	080111e8 	.word	0x080111e8
 800db04:	080111f0 	.word	0x080111f0
 800db08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800db0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800db0e:	4553      	cmp	r3, sl
 800db10:	bfa8      	it	ge
 800db12:	4653      	movge	r3, sl
 800db14:	2b00      	cmp	r3, #0
 800db16:	4699      	mov	r9, r3
 800db18:	dc36      	bgt.n	800db88 <_printf_float+0x360>
 800db1a:	f04f 0b00 	mov.w	fp, #0
 800db1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db22:	f104 021a 	add.w	r2, r4, #26
 800db26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800db28:	9306      	str	r3, [sp, #24]
 800db2a:	eba3 0309 	sub.w	r3, r3, r9
 800db2e:	455b      	cmp	r3, fp
 800db30:	dc31      	bgt.n	800db96 <_printf_float+0x36e>
 800db32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db34:	459a      	cmp	sl, r3
 800db36:	dc3a      	bgt.n	800dbae <_printf_float+0x386>
 800db38:	6823      	ldr	r3, [r4, #0]
 800db3a:	07da      	lsls	r2, r3, #31
 800db3c:	d437      	bmi.n	800dbae <_printf_float+0x386>
 800db3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db40:	ebaa 0903 	sub.w	r9, sl, r3
 800db44:	9b06      	ldr	r3, [sp, #24]
 800db46:	ebaa 0303 	sub.w	r3, sl, r3
 800db4a:	4599      	cmp	r9, r3
 800db4c:	bfa8      	it	ge
 800db4e:	4699      	movge	r9, r3
 800db50:	f1b9 0f00 	cmp.w	r9, #0
 800db54:	dc33      	bgt.n	800dbbe <_printf_float+0x396>
 800db56:	f04f 0800 	mov.w	r8, #0
 800db5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db5e:	f104 0b1a 	add.w	fp, r4, #26
 800db62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db64:	ebaa 0303 	sub.w	r3, sl, r3
 800db68:	eba3 0309 	sub.w	r3, r3, r9
 800db6c:	4543      	cmp	r3, r8
 800db6e:	f77f af79 	ble.w	800da64 <_printf_float+0x23c>
 800db72:	2301      	movs	r3, #1
 800db74:	465a      	mov	r2, fp
 800db76:	4631      	mov	r1, r6
 800db78:	4628      	mov	r0, r5
 800db7a:	47b8      	blx	r7
 800db7c:	3001      	adds	r0, #1
 800db7e:	f43f aeae 	beq.w	800d8de <_printf_float+0xb6>
 800db82:	f108 0801 	add.w	r8, r8, #1
 800db86:	e7ec      	b.n	800db62 <_printf_float+0x33a>
 800db88:	4642      	mov	r2, r8
 800db8a:	4631      	mov	r1, r6
 800db8c:	4628      	mov	r0, r5
 800db8e:	47b8      	blx	r7
 800db90:	3001      	adds	r0, #1
 800db92:	d1c2      	bne.n	800db1a <_printf_float+0x2f2>
 800db94:	e6a3      	b.n	800d8de <_printf_float+0xb6>
 800db96:	2301      	movs	r3, #1
 800db98:	4631      	mov	r1, r6
 800db9a:	4628      	mov	r0, r5
 800db9c:	9206      	str	r2, [sp, #24]
 800db9e:	47b8      	blx	r7
 800dba0:	3001      	adds	r0, #1
 800dba2:	f43f ae9c 	beq.w	800d8de <_printf_float+0xb6>
 800dba6:	9a06      	ldr	r2, [sp, #24]
 800dba8:	f10b 0b01 	add.w	fp, fp, #1
 800dbac:	e7bb      	b.n	800db26 <_printf_float+0x2fe>
 800dbae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbb2:	4631      	mov	r1, r6
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	47b8      	blx	r7
 800dbb8:	3001      	adds	r0, #1
 800dbba:	d1c0      	bne.n	800db3e <_printf_float+0x316>
 800dbbc:	e68f      	b.n	800d8de <_printf_float+0xb6>
 800dbbe:	9a06      	ldr	r2, [sp, #24]
 800dbc0:	464b      	mov	r3, r9
 800dbc2:	4442      	add	r2, r8
 800dbc4:	4631      	mov	r1, r6
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	47b8      	blx	r7
 800dbca:	3001      	adds	r0, #1
 800dbcc:	d1c3      	bne.n	800db56 <_printf_float+0x32e>
 800dbce:	e686      	b.n	800d8de <_printf_float+0xb6>
 800dbd0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dbd4:	f1ba 0f01 	cmp.w	sl, #1
 800dbd8:	dc01      	bgt.n	800dbde <_printf_float+0x3b6>
 800dbda:	07db      	lsls	r3, r3, #31
 800dbdc:	d536      	bpl.n	800dc4c <_printf_float+0x424>
 800dbde:	2301      	movs	r3, #1
 800dbe0:	4642      	mov	r2, r8
 800dbe2:	4631      	mov	r1, r6
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	47b8      	blx	r7
 800dbe8:	3001      	adds	r0, #1
 800dbea:	f43f ae78 	beq.w	800d8de <_printf_float+0xb6>
 800dbee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbf2:	4631      	mov	r1, r6
 800dbf4:	4628      	mov	r0, r5
 800dbf6:	47b8      	blx	r7
 800dbf8:	3001      	adds	r0, #1
 800dbfa:	f43f ae70 	beq.w	800d8de <_printf_float+0xb6>
 800dbfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dc02:	2200      	movs	r2, #0
 800dc04:	2300      	movs	r3, #0
 800dc06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc0a:	f7f2 ff6d 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc0e:	b9c0      	cbnz	r0, 800dc42 <_printf_float+0x41a>
 800dc10:	4653      	mov	r3, sl
 800dc12:	f108 0201 	add.w	r2, r8, #1
 800dc16:	4631      	mov	r1, r6
 800dc18:	4628      	mov	r0, r5
 800dc1a:	47b8      	blx	r7
 800dc1c:	3001      	adds	r0, #1
 800dc1e:	d10c      	bne.n	800dc3a <_printf_float+0x412>
 800dc20:	e65d      	b.n	800d8de <_printf_float+0xb6>
 800dc22:	2301      	movs	r3, #1
 800dc24:	465a      	mov	r2, fp
 800dc26:	4631      	mov	r1, r6
 800dc28:	4628      	mov	r0, r5
 800dc2a:	47b8      	blx	r7
 800dc2c:	3001      	adds	r0, #1
 800dc2e:	f43f ae56 	beq.w	800d8de <_printf_float+0xb6>
 800dc32:	f108 0801 	add.w	r8, r8, #1
 800dc36:	45d0      	cmp	r8, sl
 800dc38:	dbf3      	blt.n	800dc22 <_printf_float+0x3fa>
 800dc3a:	464b      	mov	r3, r9
 800dc3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dc40:	e6df      	b.n	800da02 <_printf_float+0x1da>
 800dc42:	f04f 0800 	mov.w	r8, #0
 800dc46:	f104 0b1a 	add.w	fp, r4, #26
 800dc4a:	e7f4      	b.n	800dc36 <_printf_float+0x40e>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	4642      	mov	r2, r8
 800dc50:	e7e1      	b.n	800dc16 <_printf_float+0x3ee>
 800dc52:	2301      	movs	r3, #1
 800dc54:	464a      	mov	r2, r9
 800dc56:	4631      	mov	r1, r6
 800dc58:	4628      	mov	r0, r5
 800dc5a:	47b8      	blx	r7
 800dc5c:	3001      	adds	r0, #1
 800dc5e:	f43f ae3e 	beq.w	800d8de <_printf_float+0xb6>
 800dc62:	f108 0801 	add.w	r8, r8, #1
 800dc66:	68e3      	ldr	r3, [r4, #12]
 800dc68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dc6a:	1a5b      	subs	r3, r3, r1
 800dc6c:	4543      	cmp	r3, r8
 800dc6e:	dcf0      	bgt.n	800dc52 <_printf_float+0x42a>
 800dc70:	e6fc      	b.n	800da6c <_printf_float+0x244>
 800dc72:	f04f 0800 	mov.w	r8, #0
 800dc76:	f104 0919 	add.w	r9, r4, #25
 800dc7a:	e7f4      	b.n	800dc66 <_printf_float+0x43e>

0800dc7c <_printf_common>:
 800dc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc80:	4616      	mov	r6, r2
 800dc82:	4698      	mov	r8, r3
 800dc84:	688a      	ldr	r2, [r1, #8]
 800dc86:	690b      	ldr	r3, [r1, #16]
 800dc88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	bfb8      	it	lt
 800dc90:	4613      	movlt	r3, r2
 800dc92:	6033      	str	r3, [r6, #0]
 800dc94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dc98:	4607      	mov	r7, r0
 800dc9a:	460c      	mov	r4, r1
 800dc9c:	b10a      	cbz	r2, 800dca2 <_printf_common+0x26>
 800dc9e:	3301      	adds	r3, #1
 800dca0:	6033      	str	r3, [r6, #0]
 800dca2:	6823      	ldr	r3, [r4, #0]
 800dca4:	0699      	lsls	r1, r3, #26
 800dca6:	bf42      	ittt	mi
 800dca8:	6833      	ldrmi	r3, [r6, #0]
 800dcaa:	3302      	addmi	r3, #2
 800dcac:	6033      	strmi	r3, [r6, #0]
 800dcae:	6825      	ldr	r5, [r4, #0]
 800dcb0:	f015 0506 	ands.w	r5, r5, #6
 800dcb4:	d106      	bne.n	800dcc4 <_printf_common+0x48>
 800dcb6:	f104 0a19 	add.w	sl, r4, #25
 800dcba:	68e3      	ldr	r3, [r4, #12]
 800dcbc:	6832      	ldr	r2, [r6, #0]
 800dcbe:	1a9b      	subs	r3, r3, r2
 800dcc0:	42ab      	cmp	r3, r5
 800dcc2:	dc26      	bgt.n	800dd12 <_printf_common+0x96>
 800dcc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dcc8:	6822      	ldr	r2, [r4, #0]
 800dcca:	3b00      	subs	r3, #0
 800dccc:	bf18      	it	ne
 800dcce:	2301      	movne	r3, #1
 800dcd0:	0692      	lsls	r2, r2, #26
 800dcd2:	d42b      	bmi.n	800dd2c <_printf_common+0xb0>
 800dcd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dcd8:	4641      	mov	r1, r8
 800dcda:	4638      	mov	r0, r7
 800dcdc:	47c8      	blx	r9
 800dcde:	3001      	adds	r0, #1
 800dce0:	d01e      	beq.n	800dd20 <_printf_common+0xa4>
 800dce2:	6823      	ldr	r3, [r4, #0]
 800dce4:	6922      	ldr	r2, [r4, #16]
 800dce6:	f003 0306 	and.w	r3, r3, #6
 800dcea:	2b04      	cmp	r3, #4
 800dcec:	bf02      	ittt	eq
 800dcee:	68e5      	ldreq	r5, [r4, #12]
 800dcf0:	6833      	ldreq	r3, [r6, #0]
 800dcf2:	1aed      	subeq	r5, r5, r3
 800dcf4:	68a3      	ldr	r3, [r4, #8]
 800dcf6:	bf0c      	ite	eq
 800dcf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dcfc:	2500      	movne	r5, #0
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	bfc4      	itt	gt
 800dd02:	1a9b      	subgt	r3, r3, r2
 800dd04:	18ed      	addgt	r5, r5, r3
 800dd06:	2600      	movs	r6, #0
 800dd08:	341a      	adds	r4, #26
 800dd0a:	42b5      	cmp	r5, r6
 800dd0c:	d11a      	bne.n	800dd44 <_printf_common+0xc8>
 800dd0e:	2000      	movs	r0, #0
 800dd10:	e008      	b.n	800dd24 <_printf_common+0xa8>
 800dd12:	2301      	movs	r3, #1
 800dd14:	4652      	mov	r2, sl
 800dd16:	4641      	mov	r1, r8
 800dd18:	4638      	mov	r0, r7
 800dd1a:	47c8      	blx	r9
 800dd1c:	3001      	adds	r0, #1
 800dd1e:	d103      	bne.n	800dd28 <_printf_common+0xac>
 800dd20:	f04f 30ff 	mov.w	r0, #4294967295
 800dd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd28:	3501      	adds	r5, #1
 800dd2a:	e7c6      	b.n	800dcba <_printf_common+0x3e>
 800dd2c:	18e1      	adds	r1, r4, r3
 800dd2e:	1c5a      	adds	r2, r3, #1
 800dd30:	2030      	movs	r0, #48	@ 0x30
 800dd32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dd36:	4422      	add	r2, r4
 800dd38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dd3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dd40:	3302      	adds	r3, #2
 800dd42:	e7c7      	b.n	800dcd4 <_printf_common+0x58>
 800dd44:	2301      	movs	r3, #1
 800dd46:	4622      	mov	r2, r4
 800dd48:	4641      	mov	r1, r8
 800dd4a:	4638      	mov	r0, r7
 800dd4c:	47c8      	blx	r9
 800dd4e:	3001      	adds	r0, #1
 800dd50:	d0e6      	beq.n	800dd20 <_printf_common+0xa4>
 800dd52:	3601      	adds	r6, #1
 800dd54:	e7d9      	b.n	800dd0a <_printf_common+0x8e>
	...

0800dd58 <_printf_i>:
 800dd58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd5c:	7e0f      	ldrb	r7, [r1, #24]
 800dd5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dd60:	2f78      	cmp	r7, #120	@ 0x78
 800dd62:	4691      	mov	r9, r2
 800dd64:	4680      	mov	r8, r0
 800dd66:	460c      	mov	r4, r1
 800dd68:	469a      	mov	sl, r3
 800dd6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dd6e:	d807      	bhi.n	800dd80 <_printf_i+0x28>
 800dd70:	2f62      	cmp	r7, #98	@ 0x62
 800dd72:	d80a      	bhi.n	800dd8a <_printf_i+0x32>
 800dd74:	2f00      	cmp	r7, #0
 800dd76:	f000 80d1 	beq.w	800df1c <_printf_i+0x1c4>
 800dd7a:	2f58      	cmp	r7, #88	@ 0x58
 800dd7c:	f000 80b8 	beq.w	800def0 <_printf_i+0x198>
 800dd80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dd88:	e03a      	b.n	800de00 <_printf_i+0xa8>
 800dd8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dd8e:	2b15      	cmp	r3, #21
 800dd90:	d8f6      	bhi.n	800dd80 <_printf_i+0x28>
 800dd92:	a101      	add	r1, pc, #4	@ (adr r1, 800dd98 <_printf_i+0x40>)
 800dd94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd98:	0800ddf1 	.word	0x0800ddf1
 800dd9c:	0800de05 	.word	0x0800de05
 800dda0:	0800dd81 	.word	0x0800dd81
 800dda4:	0800dd81 	.word	0x0800dd81
 800dda8:	0800dd81 	.word	0x0800dd81
 800ddac:	0800dd81 	.word	0x0800dd81
 800ddb0:	0800de05 	.word	0x0800de05
 800ddb4:	0800dd81 	.word	0x0800dd81
 800ddb8:	0800dd81 	.word	0x0800dd81
 800ddbc:	0800dd81 	.word	0x0800dd81
 800ddc0:	0800dd81 	.word	0x0800dd81
 800ddc4:	0800df03 	.word	0x0800df03
 800ddc8:	0800de2f 	.word	0x0800de2f
 800ddcc:	0800debd 	.word	0x0800debd
 800ddd0:	0800dd81 	.word	0x0800dd81
 800ddd4:	0800dd81 	.word	0x0800dd81
 800ddd8:	0800df25 	.word	0x0800df25
 800dddc:	0800dd81 	.word	0x0800dd81
 800dde0:	0800de2f 	.word	0x0800de2f
 800dde4:	0800dd81 	.word	0x0800dd81
 800dde8:	0800dd81 	.word	0x0800dd81
 800ddec:	0800dec5 	.word	0x0800dec5
 800ddf0:	6833      	ldr	r3, [r6, #0]
 800ddf2:	1d1a      	adds	r2, r3, #4
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	6032      	str	r2, [r6, #0]
 800ddf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ddfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800de00:	2301      	movs	r3, #1
 800de02:	e09c      	b.n	800df3e <_printf_i+0x1e6>
 800de04:	6833      	ldr	r3, [r6, #0]
 800de06:	6820      	ldr	r0, [r4, #0]
 800de08:	1d19      	adds	r1, r3, #4
 800de0a:	6031      	str	r1, [r6, #0]
 800de0c:	0606      	lsls	r6, r0, #24
 800de0e:	d501      	bpl.n	800de14 <_printf_i+0xbc>
 800de10:	681d      	ldr	r5, [r3, #0]
 800de12:	e003      	b.n	800de1c <_printf_i+0xc4>
 800de14:	0645      	lsls	r5, r0, #25
 800de16:	d5fb      	bpl.n	800de10 <_printf_i+0xb8>
 800de18:	f9b3 5000 	ldrsh.w	r5, [r3]
 800de1c:	2d00      	cmp	r5, #0
 800de1e:	da03      	bge.n	800de28 <_printf_i+0xd0>
 800de20:	232d      	movs	r3, #45	@ 0x2d
 800de22:	426d      	negs	r5, r5
 800de24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de28:	4858      	ldr	r0, [pc, #352]	@ (800df8c <_printf_i+0x234>)
 800de2a:	230a      	movs	r3, #10
 800de2c:	e011      	b.n	800de52 <_printf_i+0xfa>
 800de2e:	6821      	ldr	r1, [r4, #0]
 800de30:	6833      	ldr	r3, [r6, #0]
 800de32:	0608      	lsls	r0, r1, #24
 800de34:	f853 5b04 	ldr.w	r5, [r3], #4
 800de38:	d402      	bmi.n	800de40 <_printf_i+0xe8>
 800de3a:	0649      	lsls	r1, r1, #25
 800de3c:	bf48      	it	mi
 800de3e:	b2ad      	uxthmi	r5, r5
 800de40:	2f6f      	cmp	r7, #111	@ 0x6f
 800de42:	4852      	ldr	r0, [pc, #328]	@ (800df8c <_printf_i+0x234>)
 800de44:	6033      	str	r3, [r6, #0]
 800de46:	bf14      	ite	ne
 800de48:	230a      	movne	r3, #10
 800de4a:	2308      	moveq	r3, #8
 800de4c:	2100      	movs	r1, #0
 800de4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800de52:	6866      	ldr	r6, [r4, #4]
 800de54:	60a6      	str	r6, [r4, #8]
 800de56:	2e00      	cmp	r6, #0
 800de58:	db05      	blt.n	800de66 <_printf_i+0x10e>
 800de5a:	6821      	ldr	r1, [r4, #0]
 800de5c:	432e      	orrs	r6, r5
 800de5e:	f021 0104 	bic.w	r1, r1, #4
 800de62:	6021      	str	r1, [r4, #0]
 800de64:	d04b      	beq.n	800defe <_printf_i+0x1a6>
 800de66:	4616      	mov	r6, r2
 800de68:	fbb5 f1f3 	udiv	r1, r5, r3
 800de6c:	fb03 5711 	mls	r7, r3, r1, r5
 800de70:	5dc7      	ldrb	r7, [r0, r7]
 800de72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800de76:	462f      	mov	r7, r5
 800de78:	42bb      	cmp	r3, r7
 800de7a:	460d      	mov	r5, r1
 800de7c:	d9f4      	bls.n	800de68 <_printf_i+0x110>
 800de7e:	2b08      	cmp	r3, #8
 800de80:	d10b      	bne.n	800de9a <_printf_i+0x142>
 800de82:	6823      	ldr	r3, [r4, #0]
 800de84:	07df      	lsls	r7, r3, #31
 800de86:	d508      	bpl.n	800de9a <_printf_i+0x142>
 800de88:	6923      	ldr	r3, [r4, #16]
 800de8a:	6861      	ldr	r1, [r4, #4]
 800de8c:	4299      	cmp	r1, r3
 800de8e:	bfde      	ittt	le
 800de90:	2330      	movle	r3, #48	@ 0x30
 800de92:	f806 3c01 	strble.w	r3, [r6, #-1]
 800de96:	f106 36ff 	addle.w	r6, r6, #4294967295
 800de9a:	1b92      	subs	r2, r2, r6
 800de9c:	6122      	str	r2, [r4, #16]
 800de9e:	f8cd a000 	str.w	sl, [sp]
 800dea2:	464b      	mov	r3, r9
 800dea4:	aa03      	add	r2, sp, #12
 800dea6:	4621      	mov	r1, r4
 800dea8:	4640      	mov	r0, r8
 800deaa:	f7ff fee7 	bl	800dc7c <_printf_common>
 800deae:	3001      	adds	r0, #1
 800deb0:	d14a      	bne.n	800df48 <_printf_i+0x1f0>
 800deb2:	f04f 30ff 	mov.w	r0, #4294967295
 800deb6:	b004      	add	sp, #16
 800deb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800debc:	6823      	ldr	r3, [r4, #0]
 800debe:	f043 0320 	orr.w	r3, r3, #32
 800dec2:	6023      	str	r3, [r4, #0]
 800dec4:	4832      	ldr	r0, [pc, #200]	@ (800df90 <_printf_i+0x238>)
 800dec6:	2778      	movs	r7, #120	@ 0x78
 800dec8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800decc:	6823      	ldr	r3, [r4, #0]
 800dece:	6831      	ldr	r1, [r6, #0]
 800ded0:	061f      	lsls	r7, r3, #24
 800ded2:	f851 5b04 	ldr.w	r5, [r1], #4
 800ded6:	d402      	bmi.n	800dede <_printf_i+0x186>
 800ded8:	065f      	lsls	r7, r3, #25
 800deda:	bf48      	it	mi
 800dedc:	b2ad      	uxthmi	r5, r5
 800dede:	6031      	str	r1, [r6, #0]
 800dee0:	07d9      	lsls	r1, r3, #31
 800dee2:	bf44      	itt	mi
 800dee4:	f043 0320 	orrmi.w	r3, r3, #32
 800dee8:	6023      	strmi	r3, [r4, #0]
 800deea:	b11d      	cbz	r5, 800def4 <_printf_i+0x19c>
 800deec:	2310      	movs	r3, #16
 800deee:	e7ad      	b.n	800de4c <_printf_i+0xf4>
 800def0:	4826      	ldr	r0, [pc, #152]	@ (800df8c <_printf_i+0x234>)
 800def2:	e7e9      	b.n	800dec8 <_printf_i+0x170>
 800def4:	6823      	ldr	r3, [r4, #0]
 800def6:	f023 0320 	bic.w	r3, r3, #32
 800defa:	6023      	str	r3, [r4, #0]
 800defc:	e7f6      	b.n	800deec <_printf_i+0x194>
 800defe:	4616      	mov	r6, r2
 800df00:	e7bd      	b.n	800de7e <_printf_i+0x126>
 800df02:	6833      	ldr	r3, [r6, #0]
 800df04:	6825      	ldr	r5, [r4, #0]
 800df06:	6961      	ldr	r1, [r4, #20]
 800df08:	1d18      	adds	r0, r3, #4
 800df0a:	6030      	str	r0, [r6, #0]
 800df0c:	062e      	lsls	r6, r5, #24
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	d501      	bpl.n	800df16 <_printf_i+0x1be>
 800df12:	6019      	str	r1, [r3, #0]
 800df14:	e002      	b.n	800df1c <_printf_i+0x1c4>
 800df16:	0668      	lsls	r0, r5, #25
 800df18:	d5fb      	bpl.n	800df12 <_printf_i+0x1ba>
 800df1a:	8019      	strh	r1, [r3, #0]
 800df1c:	2300      	movs	r3, #0
 800df1e:	6123      	str	r3, [r4, #16]
 800df20:	4616      	mov	r6, r2
 800df22:	e7bc      	b.n	800de9e <_printf_i+0x146>
 800df24:	6833      	ldr	r3, [r6, #0]
 800df26:	1d1a      	adds	r2, r3, #4
 800df28:	6032      	str	r2, [r6, #0]
 800df2a:	681e      	ldr	r6, [r3, #0]
 800df2c:	6862      	ldr	r2, [r4, #4]
 800df2e:	2100      	movs	r1, #0
 800df30:	4630      	mov	r0, r6
 800df32:	f7f2 f95d 	bl	80001f0 <memchr>
 800df36:	b108      	cbz	r0, 800df3c <_printf_i+0x1e4>
 800df38:	1b80      	subs	r0, r0, r6
 800df3a:	6060      	str	r0, [r4, #4]
 800df3c:	6863      	ldr	r3, [r4, #4]
 800df3e:	6123      	str	r3, [r4, #16]
 800df40:	2300      	movs	r3, #0
 800df42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df46:	e7aa      	b.n	800de9e <_printf_i+0x146>
 800df48:	6923      	ldr	r3, [r4, #16]
 800df4a:	4632      	mov	r2, r6
 800df4c:	4649      	mov	r1, r9
 800df4e:	4640      	mov	r0, r8
 800df50:	47d0      	blx	sl
 800df52:	3001      	adds	r0, #1
 800df54:	d0ad      	beq.n	800deb2 <_printf_i+0x15a>
 800df56:	6823      	ldr	r3, [r4, #0]
 800df58:	079b      	lsls	r3, r3, #30
 800df5a:	d413      	bmi.n	800df84 <_printf_i+0x22c>
 800df5c:	68e0      	ldr	r0, [r4, #12]
 800df5e:	9b03      	ldr	r3, [sp, #12]
 800df60:	4298      	cmp	r0, r3
 800df62:	bfb8      	it	lt
 800df64:	4618      	movlt	r0, r3
 800df66:	e7a6      	b.n	800deb6 <_printf_i+0x15e>
 800df68:	2301      	movs	r3, #1
 800df6a:	4632      	mov	r2, r6
 800df6c:	4649      	mov	r1, r9
 800df6e:	4640      	mov	r0, r8
 800df70:	47d0      	blx	sl
 800df72:	3001      	adds	r0, #1
 800df74:	d09d      	beq.n	800deb2 <_printf_i+0x15a>
 800df76:	3501      	adds	r5, #1
 800df78:	68e3      	ldr	r3, [r4, #12]
 800df7a:	9903      	ldr	r1, [sp, #12]
 800df7c:	1a5b      	subs	r3, r3, r1
 800df7e:	42ab      	cmp	r3, r5
 800df80:	dcf2      	bgt.n	800df68 <_printf_i+0x210>
 800df82:	e7eb      	b.n	800df5c <_printf_i+0x204>
 800df84:	2500      	movs	r5, #0
 800df86:	f104 0619 	add.w	r6, r4, #25
 800df8a:	e7f5      	b.n	800df78 <_printf_i+0x220>
 800df8c:	080111f2 	.word	0x080111f2
 800df90:	08011203 	.word	0x08011203

0800df94 <std>:
 800df94:	2300      	movs	r3, #0
 800df96:	b510      	push	{r4, lr}
 800df98:	4604      	mov	r4, r0
 800df9a:	e9c0 3300 	strd	r3, r3, [r0]
 800df9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dfa2:	6083      	str	r3, [r0, #8]
 800dfa4:	8181      	strh	r1, [r0, #12]
 800dfa6:	6643      	str	r3, [r0, #100]	@ 0x64
 800dfa8:	81c2      	strh	r2, [r0, #14]
 800dfaa:	6183      	str	r3, [r0, #24]
 800dfac:	4619      	mov	r1, r3
 800dfae:	2208      	movs	r2, #8
 800dfb0:	305c      	adds	r0, #92	@ 0x5c
 800dfb2:	f000 f916 	bl	800e1e2 <memset>
 800dfb6:	4b0d      	ldr	r3, [pc, #52]	@ (800dfec <std+0x58>)
 800dfb8:	6263      	str	r3, [r4, #36]	@ 0x24
 800dfba:	4b0d      	ldr	r3, [pc, #52]	@ (800dff0 <std+0x5c>)
 800dfbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dfbe:	4b0d      	ldr	r3, [pc, #52]	@ (800dff4 <std+0x60>)
 800dfc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dfc2:	4b0d      	ldr	r3, [pc, #52]	@ (800dff8 <std+0x64>)
 800dfc4:	6323      	str	r3, [r4, #48]	@ 0x30
 800dfc6:	4b0d      	ldr	r3, [pc, #52]	@ (800dffc <std+0x68>)
 800dfc8:	6224      	str	r4, [r4, #32]
 800dfca:	429c      	cmp	r4, r3
 800dfcc:	d006      	beq.n	800dfdc <std+0x48>
 800dfce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dfd2:	4294      	cmp	r4, r2
 800dfd4:	d002      	beq.n	800dfdc <std+0x48>
 800dfd6:	33d0      	adds	r3, #208	@ 0xd0
 800dfd8:	429c      	cmp	r4, r3
 800dfda:	d105      	bne.n	800dfe8 <std+0x54>
 800dfdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dfe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfe4:	f000 b9fc 	b.w	800e3e0 <__retarget_lock_init_recursive>
 800dfe8:	bd10      	pop	{r4, pc}
 800dfea:	bf00      	nop
 800dfec:	0800e15d 	.word	0x0800e15d
 800dff0:	0800e17f 	.word	0x0800e17f
 800dff4:	0800e1b7 	.word	0x0800e1b7
 800dff8:	0800e1db 	.word	0x0800e1db
 800dffc:	20005584 	.word	0x20005584

0800e000 <stdio_exit_handler>:
 800e000:	4a02      	ldr	r2, [pc, #8]	@ (800e00c <stdio_exit_handler+0xc>)
 800e002:	4903      	ldr	r1, [pc, #12]	@ (800e010 <stdio_exit_handler+0x10>)
 800e004:	4803      	ldr	r0, [pc, #12]	@ (800e014 <stdio_exit_handler+0x14>)
 800e006:	f000 b869 	b.w	800e0dc <_fwalk_sglue>
 800e00a:	bf00      	nop
 800e00c:	20000014 	.word	0x20000014
 800e010:	0800fd65 	.word	0x0800fd65
 800e014:	20000024 	.word	0x20000024

0800e018 <cleanup_stdio>:
 800e018:	6841      	ldr	r1, [r0, #4]
 800e01a:	4b0c      	ldr	r3, [pc, #48]	@ (800e04c <cleanup_stdio+0x34>)
 800e01c:	4299      	cmp	r1, r3
 800e01e:	b510      	push	{r4, lr}
 800e020:	4604      	mov	r4, r0
 800e022:	d001      	beq.n	800e028 <cleanup_stdio+0x10>
 800e024:	f001 fe9e 	bl	800fd64 <_fflush_r>
 800e028:	68a1      	ldr	r1, [r4, #8]
 800e02a:	4b09      	ldr	r3, [pc, #36]	@ (800e050 <cleanup_stdio+0x38>)
 800e02c:	4299      	cmp	r1, r3
 800e02e:	d002      	beq.n	800e036 <cleanup_stdio+0x1e>
 800e030:	4620      	mov	r0, r4
 800e032:	f001 fe97 	bl	800fd64 <_fflush_r>
 800e036:	68e1      	ldr	r1, [r4, #12]
 800e038:	4b06      	ldr	r3, [pc, #24]	@ (800e054 <cleanup_stdio+0x3c>)
 800e03a:	4299      	cmp	r1, r3
 800e03c:	d004      	beq.n	800e048 <cleanup_stdio+0x30>
 800e03e:	4620      	mov	r0, r4
 800e040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e044:	f001 be8e 	b.w	800fd64 <_fflush_r>
 800e048:	bd10      	pop	{r4, pc}
 800e04a:	bf00      	nop
 800e04c:	20005584 	.word	0x20005584
 800e050:	200055ec 	.word	0x200055ec
 800e054:	20005654 	.word	0x20005654

0800e058 <global_stdio_init.part.0>:
 800e058:	b510      	push	{r4, lr}
 800e05a:	4b0b      	ldr	r3, [pc, #44]	@ (800e088 <global_stdio_init.part.0+0x30>)
 800e05c:	4c0b      	ldr	r4, [pc, #44]	@ (800e08c <global_stdio_init.part.0+0x34>)
 800e05e:	4a0c      	ldr	r2, [pc, #48]	@ (800e090 <global_stdio_init.part.0+0x38>)
 800e060:	601a      	str	r2, [r3, #0]
 800e062:	4620      	mov	r0, r4
 800e064:	2200      	movs	r2, #0
 800e066:	2104      	movs	r1, #4
 800e068:	f7ff ff94 	bl	800df94 <std>
 800e06c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e070:	2201      	movs	r2, #1
 800e072:	2109      	movs	r1, #9
 800e074:	f7ff ff8e 	bl	800df94 <std>
 800e078:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e07c:	2202      	movs	r2, #2
 800e07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e082:	2112      	movs	r1, #18
 800e084:	f7ff bf86 	b.w	800df94 <std>
 800e088:	200056bc 	.word	0x200056bc
 800e08c:	20005584 	.word	0x20005584
 800e090:	0800e001 	.word	0x0800e001

0800e094 <__sfp_lock_acquire>:
 800e094:	4801      	ldr	r0, [pc, #4]	@ (800e09c <__sfp_lock_acquire+0x8>)
 800e096:	f000 b9a4 	b.w	800e3e2 <__retarget_lock_acquire_recursive>
 800e09a:	bf00      	nop
 800e09c:	200056c5 	.word	0x200056c5

0800e0a0 <__sfp_lock_release>:
 800e0a0:	4801      	ldr	r0, [pc, #4]	@ (800e0a8 <__sfp_lock_release+0x8>)
 800e0a2:	f000 b99f 	b.w	800e3e4 <__retarget_lock_release_recursive>
 800e0a6:	bf00      	nop
 800e0a8:	200056c5 	.word	0x200056c5

0800e0ac <__sinit>:
 800e0ac:	b510      	push	{r4, lr}
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	f7ff fff0 	bl	800e094 <__sfp_lock_acquire>
 800e0b4:	6a23      	ldr	r3, [r4, #32]
 800e0b6:	b11b      	cbz	r3, 800e0c0 <__sinit+0x14>
 800e0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0bc:	f7ff bff0 	b.w	800e0a0 <__sfp_lock_release>
 800e0c0:	4b04      	ldr	r3, [pc, #16]	@ (800e0d4 <__sinit+0x28>)
 800e0c2:	6223      	str	r3, [r4, #32]
 800e0c4:	4b04      	ldr	r3, [pc, #16]	@ (800e0d8 <__sinit+0x2c>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d1f5      	bne.n	800e0b8 <__sinit+0xc>
 800e0cc:	f7ff ffc4 	bl	800e058 <global_stdio_init.part.0>
 800e0d0:	e7f2      	b.n	800e0b8 <__sinit+0xc>
 800e0d2:	bf00      	nop
 800e0d4:	0800e019 	.word	0x0800e019
 800e0d8:	200056bc 	.word	0x200056bc

0800e0dc <_fwalk_sglue>:
 800e0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0e0:	4607      	mov	r7, r0
 800e0e2:	4688      	mov	r8, r1
 800e0e4:	4614      	mov	r4, r2
 800e0e6:	2600      	movs	r6, #0
 800e0e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e0ec:	f1b9 0901 	subs.w	r9, r9, #1
 800e0f0:	d505      	bpl.n	800e0fe <_fwalk_sglue+0x22>
 800e0f2:	6824      	ldr	r4, [r4, #0]
 800e0f4:	2c00      	cmp	r4, #0
 800e0f6:	d1f7      	bne.n	800e0e8 <_fwalk_sglue+0xc>
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0fe:	89ab      	ldrh	r3, [r5, #12]
 800e100:	2b01      	cmp	r3, #1
 800e102:	d907      	bls.n	800e114 <_fwalk_sglue+0x38>
 800e104:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e108:	3301      	adds	r3, #1
 800e10a:	d003      	beq.n	800e114 <_fwalk_sglue+0x38>
 800e10c:	4629      	mov	r1, r5
 800e10e:	4638      	mov	r0, r7
 800e110:	47c0      	blx	r8
 800e112:	4306      	orrs	r6, r0
 800e114:	3568      	adds	r5, #104	@ 0x68
 800e116:	e7e9      	b.n	800e0ec <_fwalk_sglue+0x10>

0800e118 <siprintf>:
 800e118:	b40e      	push	{r1, r2, r3}
 800e11a:	b510      	push	{r4, lr}
 800e11c:	b09d      	sub	sp, #116	@ 0x74
 800e11e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e120:	9002      	str	r0, [sp, #8]
 800e122:	9006      	str	r0, [sp, #24]
 800e124:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e128:	480a      	ldr	r0, [pc, #40]	@ (800e154 <siprintf+0x3c>)
 800e12a:	9107      	str	r1, [sp, #28]
 800e12c:	9104      	str	r1, [sp, #16]
 800e12e:	490a      	ldr	r1, [pc, #40]	@ (800e158 <siprintf+0x40>)
 800e130:	f853 2b04 	ldr.w	r2, [r3], #4
 800e134:	9105      	str	r1, [sp, #20]
 800e136:	2400      	movs	r4, #0
 800e138:	a902      	add	r1, sp, #8
 800e13a:	6800      	ldr	r0, [r0, #0]
 800e13c:	9301      	str	r3, [sp, #4]
 800e13e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e140:	f001 fc90 	bl	800fa64 <_svfiprintf_r>
 800e144:	9b02      	ldr	r3, [sp, #8]
 800e146:	701c      	strb	r4, [r3, #0]
 800e148:	b01d      	add	sp, #116	@ 0x74
 800e14a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e14e:	b003      	add	sp, #12
 800e150:	4770      	bx	lr
 800e152:	bf00      	nop
 800e154:	20000020 	.word	0x20000020
 800e158:	ffff0208 	.word	0xffff0208

0800e15c <__sread>:
 800e15c:	b510      	push	{r4, lr}
 800e15e:	460c      	mov	r4, r1
 800e160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e164:	f000 f8ee 	bl	800e344 <_read_r>
 800e168:	2800      	cmp	r0, #0
 800e16a:	bfab      	itete	ge
 800e16c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e16e:	89a3      	ldrhlt	r3, [r4, #12]
 800e170:	181b      	addge	r3, r3, r0
 800e172:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e176:	bfac      	ite	ge
 800e178:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e17a:	81a3      	strhlt	r3, [r4, #12]
 800e17c:	bd10      	pop	{r4, pc}

0800e17e <__swrite>:
 800e17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e182:	461f      	mov	r7, r3
 800e184:	898b      	ldrh	r3, [r1, #12]
 800e186:	05db      	lsls	r3, r3, #23
 800e188:	4605      	mov	r5, r0
 800e18a:	460c      	mov	r4, r1
 800e18c:	4616      	mov	r6, r2
 800e18e:	d505      	bpl.n	800e19c <__swrite+0x1e>
 800e190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e194:	2302      	movs	r3, #2
 800e196:	2200      	movs	r2, #0
 800e198:	f000 f8c2 	bl	800e320 <_lseek_r>
 800e19c:	89a3      	ldrh	r3, [r4, #12]
 800e19e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e1a6:	81a3      	strh	r3, [r4, #12]
 800e1a8:	4632      	mov	r2, r6
 800e1aa:	463b      	mov	r3, r7
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b2:	f000 b8d9 	b.w	800e368 <_write_r>

0800e1b6 <__sseek>:
 800e1b6:	b510      	push	{r4, lr}
 800e1b8:	460c      	mov	r4, r1
 800e1ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1be:	f000 f8af 	bl	800e320 <_lseek_r>
 800e1c2:	1c43      	adds	r3, r0, #1
 800e1c4:	89a3      	ldrh	r3, [r4, #12]
 800e1c6:	bf15      	itete	ne
 800e1c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e1ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e1ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e1d2:	81a3      	strheq	r3, [r4, #12]
 800e1d4:	bf18      	it	ne
 800e1d6:	81a3      	strhne	r3, [r4, #12]
 800e1d8:	bd10      	pop	{r4, pc}

0800e1da <__sclose>:
 800e1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1de:	f000 b831 	b.w	800e244 <_close_r>

0800e1e2 <memset>:
 800e1e2:	4402      	add	r2, r0
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d100      	bne.n	800e1ec <memset+0xa>
 800e1ea:	4770      	bx	lr
 800e1ec:	f803 1b01 	strb.w	r1, [r3], #1
 800e1f0:	e7f9      	b.n	800e1e6 <memset+0x4>

0800e1f2 <strncmp>:
 800e1f2:	b510      	push	{r4, lr}
 800e1f4:	b16a      	cbz	r2, 800e212 <strncmp+0x20>
 800e1f6:	3901      	subs	r1, #1
 800e1f8:	1884      	adds	r4, r0, r2
 800e1fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e202:	429a      	cmp	r2, r3
 800e204:	d103      	bne.n	800e20e <strncmp+0x1c>
 800e206:	42a0      	cmp	r0, r4
 800e208:	d001      	beq.n	800e20e <strncmp+0x1c>
 800e20a:	2a00      	cmp	r2, #0
 800e20c:	d1f5      	bne.n	800e1fa <strncmp+0x8>
 800e20e:	1ad0      	subs	r0, r2, r3
 800e210:	bd10      	pop	{r4, pc}
 800e212:	4610      	mov	r0, r2
 800e214:	e7fc      	b.n	800e210 <strncmp+0x1e>

0800e216 <strncpy>:
 800e216:	b510      	push	{r4, lr}
 800e218:	3901      	subs	r1, #1
 800e21a:	4603      	mov	r3, r0
 800e21c:	b132      	cbz	r2, 800e22c <strncpy+0x16>
 800e21e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e222:	f803 4b01 	strb.w	r4, [r3], #1
 800e226:	3a01      	subs	r2, #1
 800e228:	2c00      	cmp	r4, #0
 800e22a:	d1f7      	bne.n	800e21c <strncpy+0x6>
 800e22c:	441a      	add	r2, r3
 800e22e:	2100      	movs	r1, #0
 800e230:	4293      	cmp	r3, r2
 800e232:	d100      	bne.n	800e236 <strncpy+0x20>
 800e234:	bd10      	pop	{r4, pc}
 800e236:	f803 1b01 	strb.w	r1, [r3], #1
 800e23a:	e7f9      	b.n	800e230 <strncpy+0x1a>

0800e23c <_localeconv_r>:
 800e23c:	4800      	ldr	r0, [pc, #0]	@ (800e240 <_localeconv_r+0x4>)
 800e23e:	4770      	bx	lr
 800e240:	20000160 	.word	0x20000160

0800e244 <_close_r>:
 800e244:	b538      	push	{r3, r4, r5, lr}
 800e246:	4d06      	ldr	r5, [pc, #24]	@ (800e260 <_close_r+0x1c>)
 800e248:	2300      	movs	r3, #0
 800e24a:	4604      	mov	r4, r0
 800e24c:	4608      	mov	r0, r1
 800e24e:	602b      	str	r3, [r5, #0]
 800e250:	f7f6 fa0c 	bl	800466c <_close>
 800e254:	1c43      	adds	r3, r0, #1
 800e256:	d102      	bne.n	800e25e <_close_r+0x1a>
 800e258:	682b      	ldr	r3, [r5, #0]
 800e25a:	b103      	cbz	r3, 800e25e <_close_r+0x1a>
 800e25c:	6023      	str	r3, [r4, #0]
 800e25e:	bd38      	pop	{r3, r4, r5, pc}
 800e260:	200056c0 	.word	0x200056c0

0800e264 <_reclaim_reent>:
 800e264:	4b2d      	ldr	r3, [pc, #180]	@ (800e31c <_reclaim_reent+0xb8>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4283      	cmp	r3, r0
 800e26a:	b570      	push	{r4, r5, r6, lr}
 800e26c:	4604      	mov	r4, r0
 800e26e:	d053      	beq.n	800e318 <_reclaim_reent+0xb4>
 800e270:	69c3      	ldr	r3, [r0, #28]
 800e272:	b31b      	cbz	r3, 800e2bc <_reclaim_reent+0x58>
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	b163      	cbz	r3, 800e292 <_reclaim_reent+0x2e>
 800e278:	2500      	movs	r5, #0
 800e27a:	69e3      	ldr	r3, [r4, #28]
 800e27c:	68db      	ldr	r3, [r3, #12]
 800e27e:	5959      	ldr	r1, [r3, r5]
 800e280:	b9b1      	cbnz	r1, 800e2b0 <_reclaim_reent+0x4c>
 800e282:	3504      	adds	r5, #4
 800e284:	2d80      	cmp	r5, #128	@ 0x80
 800e286:	d1f8      	bne.n	800e27a <_reclaim_reent+0x16>
 800e288:	69e3      	ldr	r3, [r4, #28]
 800e28a:	4620      	mov	r0, r4
 800e28c:	68d9      	ldr	r1, [r3, #12]
 800e28e:	f000 ff13 	bl	800f0b8 <_free_r>
 800e292:	69e3      	ldr	r3, [r4, #28]
 800e294:	6819      	ldr	r1, [r3, #0]
 800e296:	b111      	cbz	r1, 800e29e <_reclaim_reent+0x3a>
 800e298:	4620      	mov	r0, r4
 800e29a:	f000 ff0d 	bl	800f0b8 <_free_r>
 800e29e:	69e3      	ldr	r3, [r4, #28]
 800e2a0:	689d      	ldr	r5, [r3, #8]
 800e2a2:	b15d      	cbz	r5, 800e2bc <_reclaim_reent+0x58>
 800e2a4:	4629      	mov	r1, r5
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	682d      	ldr	r5, [r5, #0]
 800e2aa:	f000 ff05 	bl	800f0b8 <_free_r>
 800e2ae:	e7f8      	b.n	800e2a2 <_reclaim_reent+0x3e>
 800e2b0:	680e      	ldr	r6, [r1, #0]
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f000 ff00 	bl	800f0b8 <_free_r>
 800e2b8:	4631      	mov	r1, r6
 800e2ba:	e7e1      	b.n	800e280 <_reclaim_reent+0x1c>
 800e2bc:	6961      	ldr	r1, [r4, #20]
 800e2be:	b111      	cbz	r1, 800e2c6 <_reclaim_reent+0x62>
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	f000 fef9 	bl	800f0b8 <_free_r>
 800e2c6:	69e1      	ldr	r1, [r4, #28]
 800e2c8:	b111      	cbz	r1, 800e2d0 <_reclaim_reent+0x6c>
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f000 fef4 	bl	800f0b8 <_free_r>
 800e2d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e2d2:	b111      	cbz	r1, 800e2da <_reclaim_reent+0x76>
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	f000 feef 	bl	800f0b8 <_free_r>
 800e2da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e2dc:	b111      	cbz	r1, 800e2e4 <_reclaim_reent+0x80>
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f000 feea 	bl	800f0b8 <_free_r>
 800e2e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e2e6:	b111      	cbz	r1, 800e2ee <_reclaim_reent+0x8a>
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	f000 fee5 	bl	800f0b8 <_free_r>
 800e2ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e2f0:	b111      	cbz	r1, 800e2f8 <_reclaim_reent+0x94>
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f000 fee0 	bl	800f0b8 <_free_r>
 800e2f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e2fa:	b111      	cbz	r1, 800e302 <_reclaim_reent+0x9e>
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	f000 fedb 	bl	800f0b8 <_free_r>
 800e302:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e304:	b111      	cbz	r1, 800e30c <_reclaim_reent+0xa8>
 800e306:	4620      	mov	r0, r4
 800e308:	f000 fed6 	bl	800f0b8 <_free_r>
 800e30c:	6a23      	ldr	r3, [r4, #32]
 800e30e:	b11b      	cbz	r3, 800e318 <_reclaim_reent+0xb4>
 800e310:	4620      	mov	r0, r4
 800e312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e316:	4718      	bx	r3
 800e318:	bd70      	pop	{r4, r5, r6, pc}
 800e31a:	bf00      	nop
 800e31c:	20000020 	.word	0x20000020

0800e320 <_lseek_r>:
 800e320:	b538      	push	{r3, r4, r5, lr}
 800e322:	4d07      	ldr	r5, [pc, #28]	@ (800e340 <_lseek_r+0x20>)
 800e324:	4604      	mov	r4, r0
 800e326:	4608      	mov	r0, r1
 800e328:	4611      	mov	r1, r2
 800e32a:	2200      	movs	r2, #0
 800e32c:	602a      	str	r2, [r5, #0]
 800e32e:	461a      	mov	r2, r3
 800e330:	f7f6 f9c3 	bl	80046ba <_lseek>
 800e334:	1c43      	adds	r3, r0, #1
 800e336:	d102      	bne.n	800e33e <_lseek_r+0x1e>
 800e338:	682b      	ldr	r3, [r5, #0]
 800e33a:	b103      	cbz	r3, 800e33e <_lseek_r+0x1e>
 800e33c:	6023      	str	r3, [r4, #0]
 800e33e:	bd38      	pop	{r3, r4, r5, pc}
 800e340:	200056c0 	.word	0x200056c0

0800e344 <_read_r>:
 800e344:	b538      	push	{r3, r4, r5, lr}
 800e346:	4d07      	ldr	r5, [pc, #28]	@ (800e364 <_read_r+0x20>)
 800e348:	4604      	mov	r4, r0
 800e34a:	4608      	mov	r0, r1
 800e34c:	4611      	mov	r1, r2
 800e34e:	2200      	movs	r2, #0
 800e350:	602a      	str	r2, [r5, #0]
 800e352:	461a      	mov	r2, r3
 800e354:	f7f6 f951 	bl	80045fa <_read>
 800e358:	1c43      	adds	r3, r0, #1
 800e35a:	d102      	bne.n	800e362 <_read_r+0x1e>
 800e35c:	682b      	ldr	r3, [r5, #0]
 800e35e:	b103      	cbz	r3, 800e362 <_read_r+0x1e>
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	bd38      	pop	{r3, r4, r5, pc}
 800e364:	200056c0 	.word	0x200056c0

0800e368 <_write_r>:
 800e368:	b538      	push	{r3, r4, r5, lr}
 800e36a:	4d07      	ldr	r5, [pc, #28]	@ (800e388 <_write_r+0x20>)
 800e36c:	4604      	mov	r4, r0
 800e36e:	4608      	mov	r0, r1
 800e370:	4611      	mov	r1, r2
 800e372:	2200      	movs	r2, #0
 800e374:	602a      	str	r2, [r5, #0]
 800e376:	461a      	mov	r2, r3
 800e378:	f7f6 f95c 	bl	8004634 <_write>
 800e37c:	1c43      	adds	r3, r0, #1
 800e37e:	d102      	bne.n	800e386 <_write_r+0x1e>
 800e380:	682b      	ldr	r3, [r5, #0]
 800e382:	b103      	cbz	r3, 800e386 <_write_r+0x1e>
 800e384:	6023      	str	r3, [r4, #0]
 800e386:	bd38      	pop	{r3, r4, r5, pc}
 800e388:	200056c0 	.word	0x200056c0

0800e38c <__errno>:
 800e38c:	4b01      	ldr	r3, [pc, #4]	@ (800e394 <__errno+0x8>)
 800e38e:	6818      	ldr	r0, [r3, #0]
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	20000020 	.word	0x20000020

0800e398 <__libc_init_array>:
 800e398:	b570      	push	{r4, r5, r6, lr}
 800e39a:	4d0d      	ldr	r5, [pc, #52]	@ (800e3d0 <__libc_init_array+0x38>)
 800e39c:	4c0d      	ldr	r4, [pc, #52]	@ (800e3d4 <__libc_init_array+0x3c>)
 800e39e:	1b64      	subs	r4, r4, r5
 800e3a0:	10a4      	asrs	r4, r4, #2
 800e3a2:	2600      	movs	r6, #0
 800e3a4:	42a6      	cmp	r6, r4
 800e3a6:	d109      	bne.n	800e3bc <__libc_init_array+0x24>
 800e3a8:	4d0b      	ldr	r5, [pc, #44]	@ (800e3d8 <__libc_init_array+0x40>)
 800e3aa:	4c0c      	ldr	r4, [pc, #48]	@ (800e3dc <__libc_init_array+0x44>)
 800e3ac:	f002 f86a 	bl	8010484 <_init>
 800e3b0:	1b64      	subs	r4, r4, r5
 800e3b2:	10a4      	asrs	r4, r4, #2
 800e3b4:	2600      	movs	r6, #0
 800e3b6:	42a6      	cmp	r6, r4
 800e3b8:	d105      	bne.n	800e3c6 <__libc_init_array+0x2e>
 800e3ba:	bd70      	pop	{r4, r5, r6, pc}
 800e3bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3c0:	4798      	blx	r3
 800e3c2:	3601      	adds	r6, #1
 800e3c4:	e7ee      	b.n	800e3a4 <__libc_init_array+0xc>
 800e3c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3ca:	4798      	blx	r3
 800e3cc:	3601      	adds	r6, #1
 800e3ce:	e7f2      	b.n	800e3b6 <__libc_init_array+0x1e>
 800e3d0:	0801155c 	.word	0x0801155c
 800e3d4:	0801155c 	.word	0x0801155c
 800e3d8:	0801155c 	.word	0x0801155c
 800e3dc:	08011560 	.word	0x08011560

0800e3e0 <__retarget_lock_init_recursive>:
 800e3e0:	4770      	bx	lr

0800e3e2 <__retarget_lock_acquire_recursive>:
 800e3e2:	4770      	bx	lr

0800e3e4 <__retarget_lock_release_recursive>:
 800e3e4:	4770      	bx	lr

0800e3e6 <memcpy>:
 800e3e6:	440a      	add	r2, r1
 800e3e8:	4291      	cmp	r1, r2
 800e3ea:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3ee:	d100      	bne.n	800e3f2 <memcpy+0xc>
 800e3f0:	4770      	bx	lr
 800e3f2:	b510      	push	{r4, lr}
 800e3f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3fc:	4291      	cmp	r1, r2
 800e3fe:	d1f9      	bne.n	800e3f4 <memcpy+0xe>
 800e400:	bd10      	pop	{r4, pc}

0800e402 <quorem>:
 800e402:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e406:	6903      	ldr	r3, [r0, #16]
 800e408:	690c      	ldr	r4, [r1, #16]
 800e40a:	42a3      	cmp	r3, r4
 800e40c:	4607      	mov	r7, r0
 800e40e:	db7e      	blt.n	800e50e <quorem+0x10c>
 800e410:	3c01      	subs	r4, #1
 800e412:	f101 0814 	add.w	r8, r1, #20
 800e416:	00a3      	lsls	r3, r4, #2
 800e418:	f100 0514 	add.w	r5, r0, #20
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e422:	9301      	str	r3, [sp, #4]
 800e424:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e428:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e42c:	3301      	adds	r3, #1
 800e42e:	429a      	cmp	r2, r3
 800e430:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e434:	fbb2 f6f3 	udiv	r6, r2, r3
 800e438:	d32e      	bcc.n	800e498 <quorem+0x96>
 800e43a:	f04f 0a00 	mov.w	sl, #0
 800e43e:	46c4      	mov	ip, r8
 800e440:	46ae      	mov	lr, r5
 800e442:	46d3      	mov	fp, sl
 800e444:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e448:	b298      	uxth	r0, r3
 800e44a:	fb06 a000 	mla	r0, r6, r0, sl
 800e44e:	0c02      	lsrs	r2, r0, #16
 800e450:	0c1b      	lsrs	r3, r3, #16
 800e452:	fb06 2303 	mla	r3, r6, r3, r2
 800e456:	f8de 2000 	ldr.w	r2, [lr]
 800e45a:	b280      	uxth	r0, r0
 800e45c:	b292      	uxth	r2, r2
 800e45e:	1a12      	subs	r2, r2, r0
 800e460:	445a      	add	r2, fp
 800e462:	f8de 0000 	ldr.w	r0, [lr]
 800e466:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e470:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e474:	b292      	uxth	r2, r2
 800e476:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e47a:	45e1      	cmp	r9, ip
 800e47c:	f84e 2b04 	str.w	r2, [lr], #4
 800e480:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e484:	d2de      	bcs.n	800e444 <quorem+0x42>
 800e486:	9b00      	ldr	r3, [sp, #0]
 800e488:	58eb      	ldr	r3, [r5, r3]
 800e48a:	b92b      	cbnz	r3, 800e498 <quorem+0x96>
 800e48c:	9b01      	ldr	r3, [sp, #4]
 800e48e:	3b04      	subs	r3, #4
 800e490:	429d      	cmp	r5, r3
 800e492:	461a      	mov	r2, r3
 800e494:	d32f      	bcc.n	800e4f6 <quorem+0xf4>
 800e496:	613c      	str	r4, [r7, #16]
 800e498:	4638      	mov	r0, r7
 800e49a:	f001 f97f 	bl	800f79c <__mcmp>
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	db25      	blt.n	800e4ee <quorem+0xec>
 800e4a2:	4629      	mov	r1, r5
 800e4a4:	2000      	movs	r0, #0
 800e4a6:	f858 2b04 	ldr.w	r2, [r8], #4
 800e4aa:	f8d1 c000 	ldr.w	ip, [r1]
 800e4ae:	fa1f fe82 	uxth.w	lr, r2
 800e4b2:	fa1f f38c 	uxth.w	r3, ip
 800e4b6:	eba3 030e 	sub.w	r3, r3, lr
 800e4ba:	4403      	add	r3, r0
 800e4bc:	0c12      	lsrs	r2, r2, #16
 800e4be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e4c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4cc:	45c1      	cmp	r9, r8
 800e4ce:	f841 3b04 	str.w	r3, [r1], #4
 800e4d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e4d6:	d2e6      	bcs.n	800e4a6 <quorem+0xa4>
 800e4d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4e0:	b922      	cbnz	r2, 800e4ec <quorem+0xea>
 800e4e2:	3b04      	subs	r3, #4
 800e4e4:	429d      	cmp	r5, r3
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	d30b      	bcc.n	800e502 <quorem+0x100>
 800e4ea:	613c      	str	r4, [r7, #16]
 800e4ec:	3601      	adds	r6, #1
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	b003      	add	sp, #12
 800e4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4f6:	6812      	ldr	r2, [r2, #0]
 800e4f8:	3b04      	subs	r3, #4
 800e4fa:	2a00      	cmp	r2, #0
 800e4fc:	d1cb      	bne.n	800e496 <quorem+0x94>
 800e4fe:	3c01      	subs	r4, #1
 800e500:	e7c6      	b.n	800e490 <quorem+0x8e>
 800e502:	6812      	ldr	r2, [r2, #0]
 800e504:	3b04      	subs	r3, #4
 800e506:	2a00      	cmp	r2, #0
 800e508:	d1ef      	bne.n	800e4ea <quorem+0xe8>
 800e50a:	3c01      	subs	r4, #1
 800e50c:	e7ea      	b.n	800e4e4 <quorem+0xe2>
 800e50e:	2000      	movs	r0, #0
 800e510:	e7ee      	b.n	800e4f0 <quorem+0xee>
 800e512:	0000      	movs	r0, r0
 800e514:	0000      	movs	r0, r0
	...

0800e518 <_dtoa_r>:
 800e518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51c:	69c7      	ldr	r7, [r0, #28]
 800e51e:	b097      	sub	sp, #92	@ 0x5c
 800e520:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e524:	ec55 4b10 	vmov	r4, r5, d0
 800e528:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e52a:	9107      	str	r1, [sp, #28]
 800e52c:	4681      	mov	r9, r0
 800e52e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e530:	9311      	str	r3, [sp, #68]	@ 0x44
 800e532:	b97f      	cbnz	r7, 800e554 <_dtoa_r+0x3c>
 800e534:	2010      	movs	r0, #16
 800e536:	f000 fe09 	bl	800f14c <malloc>
 800e53a:	4602      	mov	r2, r0
 800e53c:	f8c9 001c 	str.w	r0, [r9, #28]
 800e540:	b920      	cbnz	r0, 800e54c <_dtoa_r+0x34>
 800e542:	4ba9      	ldr	r3, [pc, #676]	@ (800e7e8 <_dtoa_r+0x2d0>)
 800e544:	21ef      	movs	r1, #239	@ 0xef
 800e546:	48a9      	ldr	r0, [pc, #676]	@ (800e7ec <_dtoa_r+0x2d4>)
 800e548:	f001 fc5e 	bl	800fe08 <__assert_func>
 800e54c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e550:	6007      	str	r7, [r0, #0]
 800e552:	60c7      	str	r7, [r0, #12]
 800e554:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e558:	6819      	ldr	r1, [r3, #0]
 800e55a:	b159      	cbz	r1, 800e574 <_dtoa_r+0x5c>
 800e55c:	685a      	ldr	r2, [r3, #4]
 800e55e:	604a      	str	r2, [r1, #4]
 800e560:	2301      	movs	r3, #1
 800e562:	4093      	lsls	r3, r2
 800e564:	608b      	str	r3, [r1, #8]
 800e566:	4648      	mov	r0, r9
 800e568:	f000 fee6 	bl	800f338 <_Bfree>
 800e56c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e570:	2200      	movs	r2, #0
 800e572:	601a      	str	r2, [r3, #0]
 800e574:	1e2b      	subs	r3, r5, #0
 800e576:	bfb9      	ittee	lt
 800e578:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e57c:	9305      	strlt	r3, [sp, #20]
 800e57e:	2300      	movge	r3, #0
 800e580:	6033      	strge	r3, [r6, #0]
 800e582:	9f05      	ldr	r7, [sp, #20]
 800e584:	4b9a      	ldr	r3, [pc, #616]	@ (800e7f0 <_dtoa_r+0x2d8>)
 800e586:	bfbc      	itt	lt
 800e588:	2201      	movlt	r2, #1
 800e58a:	6032      	strlt	r2, [r6, #0]
 800e58c:	43bb      	bics	r3, r7
 800e58e:	d112      	bne.n	800e5b6 <_dtoa_r+0x9e>
 800e590:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e592:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e596:	6013      	str	r3, [r2, #0]
 800e598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e59c:	4323      	orrs	r3, r4
 800e59e:	f000 855a 	beq.w	800f056 <_dtoa_r+0xb3e>
 800e5a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e5a4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e804 <_dtoa_r+0x2ec>
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	f000 855c 	beq.w	800f066 <_dtoa_r+0xb4e>
 800e5ae:	f10a 0303 	add.w	r3, sl, #3
 800e5b2:	f000 bd56 	b.w	800f062 <_dtoa_r+0xb4a>
 800e5b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	ec51 0b17 	vmov	r0, r1, d7
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e5c6:	f7f2 fa8f 	bl	8000ae8 <__aeabi_dcmpeq>
 800e5ca:	4680      	mov	r8, r0
 800e5cc:	b158      	cbz	r0, 800e5e6 <_dtoa_r+0xce>
 800e5ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	6013      	str	r3, [r2, #0]
 800e5d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e5d6:	b113      	cbz	r3, 800e5de <_dtoa_r+0xc6>
 800e5d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e5da:	4b86      	ldr	r3, [pc, #536]	@ (800e7f4 <_dtoa_r+0x2dc>)
 800e5dc:	6013      	str	r3, [r2, #0]
 800e5de:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e808 <_dtoa_r+0x2f0>
 800e5e2:	f000 bd40 	b.w	800f066 <_dtoa_r+0xb4e>
 800e5e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e5ea:	aa14      	add	r2, sp, #80	@ 0x50
 800e5ec:	a915      	add	r1, sp, #84	@ 0x54
 800e5ee:	4648      	mov	r0, r9
 800e5f0:	f001 f984 	bl	800f8fc <__d2b>
 800e5f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e5f8:	9002      	str	r0, [sp, #8]
 800e5fa:	2e00      	cmp	r6, #0
 800e5fc:	d078      	beq.n	800e6f0 <_dtoa_r+0x1d8>
 800e5fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e600:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e608:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e60c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e610:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e614:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e618:	4619      	mov	r1, r3
 800e61a:	2200      	movs	r2, #0
 800e61c:	4b76      	ldr	r3, [pc, #472]	@ (800e7f8 <_dtoa_r+0x2e0>)
 800e61e:	f7f1 fe43 	bl	80002a8 <__aeabi_dsub>
 800e622:	a36b      	add	r3, pc, #428	@ (adr r3, 800e7d0 <_dtoa_r+0x2b8>)
 800e624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e628:	f7f1 fff6 	bl	8000618 <__aeabi_dmul>
 800e62c:	a36a      	add	r3, pc, #424	@ (adr r3, 800e7d8 <_dtoa_r+0x2c0>)
 800e62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e632:	f7f1 fe3b 	bl	80002ac <__adddf3>
 800e636:	4604      	mov	r4, r0
 800e638:	4630      	mov	r0, r6
 800e63a:	460d      	mov	r5, r1
 800e63c:	f7f1 ff82 	bl	8000544 <__aeabi_i2d>
 800e640:	a367      	add	r3, pc, #412	@ (adr r3, 800e7e0 <_dtoa_r+0x2c8>)
 800e642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e646:	f7f1 ffe7 	bl	8000618 <__aeabi_dmul>
 800e64a:	4602      	mov	r2, r0
 800e64c:	460b      	mov	r3, r1
 800e64e:	4620      	mov	r0, r4
 800e650:	4629      	mov	r1, r5
 800e652:	f7f1 fe2b 	bl	80002ac <__adddf3>
 800e656:	4604      	mov	r4, r0
 800e658:	460d      	mov	r5, r1
 800e65a:	f7f2 fa8d 	bl	8000b78 <__aeabi_d2iz>
 800e65e:	2200      	movs	r2, #0
 800e660:	4607      	mov	r7, r0
 800e662:	2300      	movs	r3, #0
 800e664:	4620      	mov	r0, r4
 800e666:	4629      	mov	r1, r5
 800e668:	f7f2 fa48 	bl	8000afc <__aeabi_dcmplt>
 800e66c:	b140      	cbz	r0, 800e680 <_dtoa_r+0x168>
 800e66e:	4638      	mov	r0, r7
 800e670:	f7f1 ff68 	bl	8000544 <__aeabi_i2d>
 800e674:	4622      	mov	r2, r4
 800e676:	462b      	mov	r3, r5
 800e678:	f7f2 fa36 	bl	8000ae8 <__aeabi_dcmpeq>
 800e67c:	b900      	cbnz	r0, 800e680 <_dtoa_r+0x168>
 800e67e:	3f01      	subs	r7, #1
 800e680:	2f16      	cmp	r7, #22
 800e682:	d852      	bhi.n	800e72a <_dtoa_r+0x212>
 800e684:	4b5d      	ldr	r3, [pc, #372]	@ (800e7fc <_dtoa_r+0x2e4>)
 800e686:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e68e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e692:	f7f2 fa33 	bl	8000afc <__aeabi_dcmplt>
 800e696:	2800      	cmp	r0, #0
 800e698:	d049      	beq.n	800e72e <_dtoa_r+0x216>
 800e69a:	3f01      	subs	r7, #1
 800e69c:	2300      	movs	r3, #0
 800e69e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e6a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e6a2:	1b9b      	subs	r3, r3, r6
 800e6a4:	1e5a      	subs	r2, r3, #1
 800e6a6:	bf45      	ittet	mi
 800e6a8:	f1c3 0301 	rsbmi	r3, r3, #1
 800e6ac:	9300      	strmi	r3, [sp, #0]
 800e6ae:	2300      	movpl	r3, #0
 800e6b0:	2300      	movmi	r3, #0
 800e6b2:	9206      	str	r2, [sp, #24]
 800e6b4:	bf54      	ite	pl
 800e6b6:	9300      	strpl	r3, [sp, #0]
 800e6b8:	9306      	strmi	r3, [sp, #24]
 800e6ba:	2f00      	cmp	r7, #0
 800e6bc:	db39      	blt.n	800e732 <_dtoa_r+0x21a>
 800e6be:	9b06      	ldr	r3, [sp, #24]
 800e6c0:	970d      	str	r7, [sp, #52]	@ 0x34
 800e6c2:	443b      	add	r3, r7
 800e6c4:	9306      	str	r3, [sp, #24]
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	9308      	str	r3, [sp, #32]
 800e6ca:	9b07      	ldr	r3, [sp, #28]
 800e6cc:	2b09      	cmp	r3, #9
 800e6ce:	d863      	bhi.n	800e798 <_dtoa_r+0x280>
 800e6d0:	2b05      	cmp	r3, #5
 800e6d2:	bfc4      	itt	gt
 800e6d4:	3b04      	subgt	r3, #4
 800e6d6:	9307      	strgt	r3, [sp, #28]
 800e6d8:	9b07      	ldr	r3, [sp, #28]
 800e6da:	f1a3 0302 	sub.w	r3, r3, #2
 800e6de:	bfcc      	ite	gt
 800e6e0:	2400      	movgt	r4, #0
 800e6e2:	2401      	movle	r4, #1
 800e6e4:	2b03      	cmp	r3, #3
 800e6e6:	d863      	bhi.n	800e7b0 <_dtoa_r+0x298>
 800e6e8:	e8df f003 	tbb	[pc, r3]
 800e6ec:	2b375452 	.word	0x2b375452
 800e6f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e6f4:	441e      	add	r6, r3
 800e6f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e6fa:	2b20      	cmp	r3, #32
 800e6fc:	bfc1      	itttt	gt
 800e6fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e702:	409f      	lslgt	r7, r3
 800e704:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e708:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e70c:	bfd6      	itet	le
 800e70e:	f1c3 0320 	rsble	r3, r3, #32
 800e712:	ea47 0003 	orrgt.w	r0, r7, r3
 800e716:	fa04 f003 	lslle.w	r0, r4, r3
 800e71a:	f7f1 ff03 	bl	8000524 <__aeabi_ui2d>
 800e71e:	2201      	movs	r2, #1
 800e720:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e724:	3e01      	subs	r6, #1
 800e726:	9212      	str	r2, [sp, #72]	@ 0x48
 800e728:	e776      	b.n	800e618 <_dtoa_r+0x100>
 800e72a:	2301      	movs	r3, #1
 800e72c:	e7b7      	b.n	800e69e <_dtoa_r+0x186>
 800e72e:	9010      	str	r0, [sp, #64]	@ 0x40
 800e730:	e7b6      	b.n	800e6a0 <_dtoa_r+0x188>
 800e732:	9b00      	ldr	r3, [sp, #0]
 800e734:	1bdb      	subs	r3, r3, r7
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	427b      	negs	r3, r7
 800e73a:	9308      	str	r3, [sp, #32]
 800e73c:	2300      	movs	r3, #0
 800e73e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e740:	e7c3      	b.n	800e6ca <_dtoa_r+0x1b2>
 800e742:	2301      	movs	r3, #1
 800e744:	9309      	str	r3, [sp, #36]	@ 0x24
 800e746:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e748:	eb07 0b03 	add.w	fp, r7, r3
 800e74c:	f10b 0301 	add.w	r3, fp, #1
 800e750:	2b01      	cmp	r3, #1
 800e752:	9303      	str	r3, [sp, #12]
 800e754:	bfb8      	it	lt
 800e756:	2301      	movlt	r3, #1
 800e758:	e006      	b.n	800e768 <_dtoa_r+0x250>
 800e75a:	2301      	movs	r3, #1
 800e75c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e75e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e760:	2b00      	cmp	r3, #0
 800e762:	dd28      	ble.n	800e7b6 <_dtoa_r+0x29e>
 800e764:	469b      	mov	fp, r3
 800e766:	9303      	str	r3, [sp, #12]
 800e768:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e76c:	2100      	movs	r1, #0
 800e76e:	2204      	movs	r2, #4
 800e770:	f102 0514 	add.w	r5, r2, #20
 800e774:	429d      	cmp	r5, r3
 800e776:	d926      	bls.n	800e7c6 <_dtoa_r+0x2ae>
 800e778:	6041      	str	r1, [r0, #4]
 800e77a:	4648      	mov	r0, r9
 800e77c:	f000 fd9c 	bl	800f2b8 <_Balloc>
 800e780:	4682      	mov	sl, r0
 800e782:	2800      	cmp	r0, #0
 800e784:	d142      	bne.n	800e80c <_dtoa_r+0x2f4>
 800e786:	4b1e      	ldr	r3, [pc, #120]	@ (800e800 <_dtoa_r+0x2e8>)
 800e788:	4602      	mov	r2, r0
 800e78a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e78e:	e6da      	b.n	800e546 <_dtoa_r+0x2e>
 800e790:	2300      	movs	r3, #0
 800e792:	e7e3      	b.n	800e75c <_dtoa_r+0x244>
 800e794:	2300      	movs	r3, #0
 800e796:	e7d5      	b.n	800e744 <_dtoa_r+0x22c>
 800e798:	2401      	movs	r4, #1
 800e79a:	2300      	movs	r3, #0
 800e79c:	9307      	str	r3, [sp, #28]
 800e79e:	9409      	str	r4, [sp, #36]	@ 0x24
 800e7a0:	f04f 3bff 	mov.w	fp, #4294967295
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	f8cd b00c 	str.w	fp, [sp, #12]
 800e7aa:	2312      	movs	r3, #18
 800e7ac:	920c      	str	r2, [sp, #48]	@ 0x30
 800e7ae:	e7db      	b.n	800e768 <_dtoa_r+0x250>
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7b4:	e7f4      	b.n	800e7a0 <_dtoa_r+0x288>
 800e7b6:	f04f 0b01 	mov.w	fp, #1
 800e7ba:	f8cd b00c 	str.w	fp, [sp, #12]
 800e7be:	465b      	mov	r3, fp
 800e7c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e7c4:	e7d0      	b.n	800e768 <_dtoa_r+0x250>
 800e7c6:	3101      	adds	r1, #1
 800e7c8:	0052      	lsls	r2, r2, #1
 800e7ca:	e7d1      	b.n	800e770 <_dtoa_r+0x258>
 800e7cc:	f3af 8000 	nop.w
 800e7d0:	636f4361 	.word	0x636f4361
 800e7d4:	3fd287a7 	.word	0x3fd287a7
 800e7d8:	8b60c8b3 	.word	0x8b60c8b3
 800e7dc:	3fc68a28 	.word	0x3fc68a28
 800e7e0:	509f79fb 	.word	0x509f79fb
 800e7e4:	3fd34413 	.word	0x3fd34413
 800e7e8:	08011221 	.word	0x08011221
 800e7ec:	08011238 	.word	0x08011238
 800e7f0:	7ff00000 	.word	0x7ff00000
 800e7f4:	080111f1 	.word	0x080111f1
 800e7f8:	3ff80000 	.word	0x3ff80000
 800e7fc:	08011388 	.word	0x08011388
 800e800:	08011290 	.word	0x08011290
 800e804:	0801121d 	.word	0x0801121d
 800e808:	080111f0 	.word	0x080111f0
 800e80c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e810:	6018      	str	r0, [r3, #0]
 800e812:	9b03      	ldr	r3, [sp, #12]
 800e814:	2b0e      	cmp	r3, #14
 800e816:	f200 80a1 	bhi.w	800e95c <_dtoa_r+0x444>
 800e81a:	2c00      	cmp	r4, #0
 800e81c:	f000 809e 	beq.w	800e95c <_dtoa_r+0x444>
 800e820:	2f00      	cmp	r7, #0
 800e822:	dd33      	ble.n	800e88c <_dtoa_r+0x374>
 800e824:	4b9c      	ldr	r3, [pc, #624]	@ (800ea98 <_dtoa_r+0x580>)
 800e826:	f007 020f 	and.w	r2, r7, #15
 800e82a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e82e:	ed93 7b00 	vldr	d7, [r3]
 800e832:	05f8      	lsls	r0, r7, #23
 800e834:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e838:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e83c:	d516      	bpl.n	800e86c <_dtoa_r+0x354>
 800e83e:	4b97      	ldr	r3, [pc, #604]	@ (800ea9c <_dtoa_r+0x584>)
 800e840:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e844:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e848:	f7f2 f810 	bl	800086c <__aeabi_ddiv>
 800e84c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e850:	f004 040f 	and.w	r4, r4, #15
 800e854:	2603      	movs	r6, #3
 800e856:	4d91      	ldr	r5, [pc, #580]	@ (800ea9c <_dtoa_r+0x584>)
 800e858:	b954      	cbnz	r4, 800e870 <_dtoa_r+0x358>
 800e85a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e85e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e862:	f7f2 f803 	bl	800086c <__aeabi_ddiv>
 800e866:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e86a:	e028      	b.n	800e8be <_dtoa_r+0x3a6>
 800e86c:	2602      	movs	r6, #2
 800e86e:	e7f2      	b.n	800e856 <_dtoa_r+0x33e>
 800e870:	07e1      	lsls	r1, r4, #31
 800e872:	d508      	bpl.n	800e886 <_dtoa_r+0x36e>
 800e874:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e878:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e87c:	f7f1 fecc 	bl	8000618 <__aeabi_dmul>
 800e880:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e884:	3601      	adds	r6, #1
 800e886:	1064      	asrs	r4, r4, #1
 800e888:	3508      	adds	r5, #8
 800e88a:	e7e5      	b.n	800e858 <_dtoa_r+0x340>
 800e88c:	f000 80af 	beq.w	800e9ee <_dtoa_r+0x4d6>
 800e890:	427c      	negs	r4, r7
 800e892:	4b81      	ldr	r3, [pc, #516]	@ (800ea98 <_dtoa_r+0x580>)
 800e894:	4d81      	ldr	r5, [pc, #516]	@ (800ea9c <_dtoa_r+0x584>)
 800e896:	f004 020f 	and.w	r2, r4, #15
 800e89a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e8a6:	f7f1 feb7 	bl	8000618 <__aeabi_dmul>
 800e8aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8ae:	1124      	asrs	r4, r4, #4
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	2602      	movs	r6, #2
 800e8b4:	2c00      	cmp	r4, #0
 800e8b6:	f040 808f 	bne.w	800e9d8 <_dtoa_r+0x4c0>
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d1d3      	bne.n	800e866 <_dtoa_r+0x34e>
 800e8be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e8c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	f000 8094 	beq.w	800e9f2 <_dtoa_r+0x4da>
 800e8ca:	4b75      	ldr	r3, [pc, #468]	@ (800eaa0 <_dtoa_r+0x588>)
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	4629      	mov	r1, r5
 800e8d2:	f7f2 f913 	bl	8000afc <__aeabi_dcmplt>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	f000 808b 	beq.w	800e9f2 <_dtoa_r+0x4da>
 800e8dc:	9b03      	ldr	r3, [sp, #12]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f000 8087 	beq.w	800e9f2 <_dtoa_r+0x4da>
 800e8e4:	f1bb 0f00 	cmp.w	fp, #0
 800e8e8:	dd34      	ble.n	800e954 <_dtoa_r+0x43c>
 800e8ea:	4620      	mov	r0, r4
 800e8ec:	4b6d      	ldr	r3, [pc, #436]	@ (800eaa4 <_dtoa_r+0x58c>)
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	f7f1 fe91 	bl	8000618 <__aeabi_dmul>
 800e8f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8fa:	f107 38ff 	add.w	r8, r7, #4294967295
 800e8fe:	3601      	adds	r6, #1
 800e900:	465c      	mov	r4, fp
 800e902:	4630      	mov	r0, r6
 800e904:	f7f1 fe1e 	bl	8000544 <__aeabi_i2d>
 800e908:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e90c:	f7f1 fe84 	bl	8000618 <__aeabi_dmul>
 800e910:	4b65      	ldr	r3, [pc, #404]	@ (800eaa8 <_dtoa_r+0x590>)
 800e912:	2200      	movs	r2, #0
 800e914:	f7f1 fcca 	bl	80002ac <__adddf3>
 800e918:	4605      	mov	r5, r0
 800e91a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e91e:	2c00      	cmp	r4, #0
 800e920:	d16a      	bne.n	800e9f8 <_dtoa_r+0x4e0>
 800e922:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e926:	4b61      	ldr	r3, [pc, #388]	@ (800eaac <_dtoa_r+0x594>)
 800e928:	2200      	movs	r2, #0
 800e92a:	f7f1 fcbd 	bl	80002a8 <__aeabi_dsub>
 800e92e:	4602      	mov	r2, r0
 800e930:	460b      	mov	r3, r1
 800e932:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e936:	462a      	mov	r2, r5
 800e938:	4633      	mov	r3, r6
 800e93a:	f7f2 f8fd 	bl	8000b38 <__aeabi_dcmpgt>
 800e93e:	2800      	cmp	r0, #0
 800e940:	f040 8298 	bne.w	800ee74 <_dtoa_r+0x95c>
 800e944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e948:	462a      	mov	r2, r5
 800e94a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e94e:	f7f2 f8d5 	bl	8000afc <__aeabi_dcmplt>
 800e952:	bb38      	cbnz	r0, 800e9a4 <_dtoa_r+0x48c>
 800e954:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e958:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e95c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e95e:	2b00      	cmp	r3, #0
 800e960:	f2c0 8157 	blt.w	800ec12 <_dtoa_r+0x6fa>
 800e964:	2f0e      	cmp	r7, #14
 800e966:	f300 8154 	bgt.w	800ec12 <_dtoa_r+0x6fa>
 800e96a:	4b4b      	ldr	r3, [pc, #300]	@ (800ea98 <_dtoa_r+0x580>)
 800e96c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e970:	ed93 7b00 	vldr	d7, [r3]
 800e974:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e976:	2b00      	cmp	r3, #0
 800e978:	ed8d 7b00 	vstr	d7, [sp]
 800e97c:	f280 80e5 	bge.w	800eb4a <_dtoa_r+0x632>
 800e980:	9b03      	ldr	r3, [sp, #12]
 800e982:	2b00      	cmp	r3, #0
 800e984:	f300 80e1 	bgt.w	800eb4a <_dtoa_r+0x632>
 800e988:	d10c      	bne.n	800e9a4 <_dtoa_r+0x48c>
 800e98a:	4b48      	ldr	r3, [pc, #288]	@ (800eaac <_dtoa_r+0x594>)
 800e98c:	2200      	movs	r2, #0
 800e98e:	ec51 0b17 	vmov	r0, r1, d7
 800e992:	f7f1 fe41 	bl	8000618 <__aeabi_dmul>
 800e996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e99a:	f7f2 f8c3 	bl	8000b24 <__aeabi_dcmpge>
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	f000 8266 	beq.w	800ee70 <_dtoa_r+0x958>
 800e9a4:	2400      	movs	r4, #0
 800e9a6:	4625      	mov	r5, r4
 800e9a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e9aa:	4656      	mov	r6, sl
 800e9ac:	ea6f 0803 	mvn.w	r8, r3
 800e9b0:	2700      	movs	r7, #0
 800e9b2:	4621      	mov	r1, r4
 800e9b4:	4648      	mov	r0, r9
 800e9b6:	f000 fcbf 	bl	800f338 <_Bfree>
 800e9ba:	2d00      	cmp	r5, #0
 800e9bc:	f000 80bd 	beq.w	800eb3a <_dtoa_r+0x622>
 800e9c0:	b12f      	cbz	r7, 800e9ce <_dtoa_r+0x4b6>
 800e9c2:	42af      	cmp	r7, r5
 800e9c4:	d003      	beq.n	800e9ce <_dtoa_r+0x4b6>
 800e9c6:	4639      	mov	r1, r7
 800e9c8:	4648      	mov	r0, r9
 800e9ca:	f000 fcb5 	bl	800f338 <_Bfree>
 800e9ce:	4629      	mov	r1, r5
 800e9d0:	4648      	mov	r0, r9
 800e9d2:	f000 fcb1 	bl	800f338 <_Bfree>
 800e9d6:	e0b0      	b.n	800eb3a <_dtoa_r+0x622>
 800e9d8:	07e2      	lsls	r2, r4, #31
 800e9da:	d505      	bpl.n	800e9e8 <_dtoa_r+0x4d0>
 800e9dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e9e0:	f7f1 fe1a 	bl	8000618 <__aeabi_dmul>
 800e9e4:	3601      	adds	r6, #1
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	1064      	asrs	r4, r4, #1
 800e9ea:	3508      	adds	r5, #8
 800e9ec:	e762      	b.n	800e8b4 <_dtoa_r+0x39c>
 800e9ee:	2602      	movs	r6, #2
 800e9f0:	e765      	b.n	800e8be <_dtoa_r+0x3a6>
 800e9f2:	9c03      	ldr	r4, [sp, #12]
 800e9f4:	46b8      	mov	r8, r7
 800e9f6:	e784      	b.n	800e902 <_dtoa_r+0x3ea>
 800e9f8:	4b27      	ldr	r3, [pc, #156]	@ (800ea98 <_dtoa_r+0x580>)
 800e9fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ea04:	4454      	add	r4, sl
 800ea06:	2900      	cmp	r1, #0
 800ea08:	d054      	beq.n	800eab4 <_dtoa_r+0x59c>
 800ea0a:	4929      	ldr	r1, [pc, #164]	@ (800eab0 <_dtoa_r+0x598>)
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	f7f1 ff2d 	bl	800086c <__aeabi_ddiv>
 800ea12:	4633      	mov	r3, r6
 800ea14:	462a      	mov	r2, r5
 800ea16:	f7f1 fc47 	bl	80002a8 <__aeabi_dsub>
 800ea1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ea1e:	4656      	mov	r6, sl
 800ea20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea24:	f7f2 f8a8 	bl	8000b78 <__aeabi_d2iz>
 800ea28:	4605      	mov	r5, r0
 800ea2a:	f7f1 fd8b 	bl	8000544 <__aeabi_i2d>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	460b      	mov	r3, r1
 800ea32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea36:	f7f1 fc37 	bl	80002a8 <__aeabi_dsub>
 800ea3a:	3530      	adds	r5, #48	@ 0x30
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	460b      	mov	r3, r1
 800ea40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ea44:	f806 5b01 	strb.w	r5, [r6], #1
 800ea48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ea4c:	f7f2 f856 	bl	8000afc <__aeabi_dcmplt>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	d172      	bne.n	800eb3a <_dtoa_r+0x622>
 800ea54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea58:	4911      	ldr	r1, [pc, #68]	@ (800eaa0 <_dtoa_r+0x588>)
 800ea5a:	2000      	movs	r0, #0
 800ea5c:	f7f1 fc24 	bl	80002a8 <__aeabi_dsub>
 800ea60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ea64:	f7f2 f84a 	bl	8000afc <__aeabi_dcmplt>
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	f040 80b4 	bne.w	800ebd6 <_dtoa_r+0x6be>
 800ea6e:	42a6      	cmp	r6, r4
 800ea70:	f43f af70 	beq.w	800e954 <_dtoa_r+0x43c>
 800ea74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ea78:	4b0a      	ldr	r3, [pc, #40]	@ (800eaa4 <_dtoa_r+0x58c>)
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	f7f1 fdcc 	bl	8000618 <__aeabi_dmul>
 800ea80:	4b08      	ldr	r3, [pc, #32]	@ (800eaa4 <_dtoa_r+0x58c>)
 800ea82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ea86:	2200      	movs	r2, #0
 800ea88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea8c:	f7f1 fdc4 	bl	8000618 <__aeabi_dmul>
 800ea90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea94:	e7c4      	b.n	800ea20 <_dtoa_r+0x508>
 800ea96:	bf00      	nop
 800ea98:	08011388 	.word	0x08011388
 800ea9c:	08011360 	.word	0x08011360
 800eaa0:	3ff00000 	.word	0x3ff00000
 800eaa4:	40240000 	.word	0x40240000
 800eaa8:	401c0000 	.word	0x401c0000
 800eaac:	40140000 	.word	0x40140000
 800eab0:	3fe00000 	.word	0x3fe00000
 800eab4:	4631      	mov	r1, r6
 800eab6:	4628      	mov	r0, r5
 800eab8:	f7f1 fdae 	bl	8000618 <__aeabi_dmul>
 800eabc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800eac0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800eac2:	4656      	mov	r6, sl
 800eac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eac8:	f7f2 f856 	bl	8000b78 <__aeabi_d2iz>
 800eacc:	4605      	mov	r5, r0
 800eace:	f7f1 fd39 	bl	8000544 <__aeabi_i2d>
 800ead2:	4602      	mov	r2, r0
 800ead4:	460b      	mov	r3, r1
 800ead6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eada:	f7f1 fbe5 	bl	80002a8 <__aeabi_dsub>
 800eade:	3530      	adds	r5, #48	@ 0x30
 800eae0:	f806 5b01 	strb.w	r5, [r6], #1
 800eae4:	4602      	mov	r2, r0
 800eae6:	460b      	mov	r3, r1
 800eae8:	42a6      	cmp	r6, r4
 800eaea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eaee:	f04f 0200 	mov.w	r2, #0
 800eaf2:	d124      	bne.n	800eb3e <_dtoa_r+0x626>
 800eaf4:	4baf      	ldr	r3, [pc, #700]	@ (800edb4 <_dtoa_r+0x89c>)
 800eaf6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800eafa:	f7f1 fbd7 	bl	80002ac <__adddf3>
 800eafe:	4602      	mov	r2, r0
 800eb00:	460b      	mov	r3, r1
 800eb02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb06:	f7f2 f817 	bl	8000b38 <__aeabi_dcmpgt>
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	d163      	bne.n	800ebd6 <_dtoa_r+0x6be>
 800eb0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800eb12:	49a8      	ldr	r1, [pc, #672]	@ (800edb4 <_dtoa_r+0x89c>)
 800eb14:	2000      	movs	r0, #0
 800eb16:	f7f1 fbc7 	bl	80002a8 <__aeabi_dsub>
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb22:	f7f1 ffeb 	bl	8000afc <__aeabi_dcmplt>
 800eb26:	2800      	cmp	r0, #0
 800eb28:	f43f af14 	beq.w	800e954 <_dtoa_r+0x43c>
 800eb2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800eb2e:	1e73      	subs	r3, r6, #1
 800eb30:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eb32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eb36:	2b30      	cmp	r3, #48	@ 0x30
 800eb38:	d0f8      	beq.n	800eb2c <_dtoa_r+0x614>
 800eb3a:	4647      	mov	r7, r8
 800eb3c:	e03b      	b.n	800ebb6 <_dtoa_r+0x69e>
 800eb3e:	4b9e      	ldr	r3, [pc, #632]	@ (800edb8 <_dtoa_r+0x8a0>)
 800eb40:	f7f1 fd6a 	bl	8000618 <__aeabi_dmul>
 800eb44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb48:	e7bc      	b.n	800eac4 <_dtoa_r+0x5ac>
 800eb4a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800eb4e:	4656      	mov	r6, sl
 800eb50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb54:	4620      	mov	r0, r4
 800eb56:	4629      	mov	r1, r5
 800eb58:	f7f1 fe88 	bl	800086c <__aeabi_ddiv>
 800eb5c:	f7f2 f80c 	bl	8000b78 <__aeabi_d2iz>
 800eb60:	4680      	mov	r8, r0
 800eb62:	f7f1 fcef 	bl	8000544 <__aeabi_i2d>
 800eb66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb6a:	f7f1 fd55 	bl	8000618 <__aeabi_dmul>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	460b      	mov	r3, r1
 800eb72:	4620      	mov	r0, r4
 800eb74:	4629      	mov	r1, r5
 800eb76:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eb7a:	f7f1 fb95 	bl	80002a8 <__aeabi_dsub>
 800eb7e:	f806 4b01 	strb.w	r4, [r6], #1
 800eb82:	9d03      	ldr	r5, [sp, #12]
 800eb84:	eba6 040a 	sub.w	r4, r6, sl
 800eb88:	42a5      	cmp	r5, r4
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	d133      	bne.n	800ebf8 <_dtoa_r+0x6e0>
 800eb90:	f7f1 fb8c 	bl	80002ac <__adddf3>
 800eb94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb98:	4604      	mov	r4, r0
 800eb9a:	460d      	mov	r5, r1
 800eb9c:	f7f1 ffcc 	bl	8000b38 <__aeabi_dcmpgt>
 800eba0:	b9c0      	cbnz	r0, 800ebd4 <_dtoa_r+0x6bc>
 800eba2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eba6:	4620      	mov	r0, r4
 800eba8:	4629      	mov	r1, r5
 800ebaa:	f7f1 ff9d 	bl	8000ae8 <__aeabi_dcmpeq>
 800ebae:	b110      	cbz	r0, 800ebb6 <_dtoa_r+0x69e>
 800ebb0:	f018 0f01 	tst.w	r8, #1
 800ebb4:	d10e      	bne.n	800ebd4 <_dtoa_r+0x6bc>
 800ebb6:	9902      	ldr	r1, [sp, #8]
 800ebb8:	4648      	mov	r0, r9
 800ebba:	f000 fbbd 	bl	800f338 <_Bfree>
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	7033      	strb	r3, [r6, #0]
 800ebc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ebc4:	3701      	adds	r7, #1
 800ebc6:	601f      	str	r7, [r3, #0]
 800ebc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	f000 824b 	beq.w	800f066 <_dtoa_r+0xb4e>
 800ebd0:	601e      	str	r6, [r3, #0]
 800ebd2:	e248      	b.n	800f066 <_dtoa_r+0xb4e>
 800ebd4:	46b8      	mov	r8, r7
 800ebd6:	4633      	mov	r3, r6
 800ebd8:	461e      	mov	r6, r3
 800ebda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ebde:	2a39      	cmp	r2, #57	@ 0x39
 800ebe0:	d106      	bne.n	800ebf0 <_dtoa_r+0x6d8>
 800ebe2:	459a      	cmp	sl, r3
 800ebe4:	d1f8      	bne.n	800ebd8 <_dtoa_r+0x6c0>
 800ebe6:	2230      	movs	r2, #48	@ 0x30
 800ebe8:	f108 0801 	add.w	r8, r8, #1
 800ebec:	f88a 2000 	strb.w	r2, [sl]
 800ebf0:	781a      	ldrb	r2, [r3, #0]
 800ebf2:	3201      	adds	r2, #1
 800ebf4:	701a      	strb	r2, [r3, #0]
 800ebf6:	e7a0      	b.n	800eb3a <_dtoa_r+0x622>
 800ebf8:	4b6f      	ldr	r3, [pc, #444]	@ (800edb8 <_dtoa_r+0x8a0>)
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	f7f1 fd0c 	bl	8000618 <__aeabi_dmul>
 800ec00:	2200      	movs	r2, #0
 800ec02:	2300      	movs	r3, #0
 800ec04:	4604      	mov	r4, r0
 800ec06:	460d      	mov	r5, r1
 800ec08:	f7f1 ff6e 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	d09f      	beq.n	800eb50 <_dtoa_r+0x638>
 800ec10:	e7d1      	b.n	800ebb6 <_dtoa_r+0x69e>
 800ec12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec14:	2a00      	cmp	r2, #0
 800ec16:	f000 80ea 	beq.w	800edee <_dtoa_r+0x8d6>
 800ec1a:	9a07      	ldr	r2, [sp, #28]
 800ec1c:	2a01      	cmp	r2, #1
 800ec1e:	f300 80cd 	bgt.w	800edbc <_dtoa_r+0x8a4>
 800ec22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ec24:	2a00      	cmp	r2, #0
 800ec26:	f000 80c1 	beq.w	800edac <_dtoa_r+0x894>
 800ec2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ec2e:	9c08      	ldr	r4, [sp, #32]
 800ec30:	9e00      	ldr	r6, [sp, #0]
 800ec32:	9a00      	ldr	r2, [sp, #0]
 800ec34:	441a      	add	r2, r3
 800ec36:	9200      	str	r2, [sp, #0]
 800ec38:	9a06      	ldr	r2, [sp, #24]
 800ec3a:	2101      	movs	r1, #1
 800ec3c:	441a      	add	r2, r3
 800ec3e:	4648      	mov	r0, r9
 800ec40:	9206      	str	r2, [sp, #24]
 800ec42:	f000 fc2d 	bl	800f4a0 <__i2b>
 800ec46:	4605      	mov	r5, r0
 800ec48:	b166      	cbz	r6, 800ec64 <_dtoa_r+0x74c>
 800ec4a:	9b06      	ldr	r3, [sp, #24]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	dd09      	ble.n	800ec64 <_dtoa_r+0x74c>
 800ec50:	42b3      	cmp	r3, r6
 800ec52:	9a00      	ldr	r2, [sp, #0]
 800ec54:	bfa8      	it	ge
 800ec56:	4633      	movge	r3, r6
 800ec58:	1ad2      	subs	r2, r2, r3
 800ec5a:	9200      	str	r2, [sp, #0]
 800ec5c:	9a06      	ldr	r2, [sp, #24]
 800ec5e:	1af6      	subs	r6, r6, r3
 800ec60:	1ad3      	subs	r3, r2, r3
 800ec62:	9306      	str	r3, [sp, #24]
 800ec64:	9b08      	ldr	r3, [sp, #32]
 800ec66:	b30b      	cbz	r3, 800ecac <_dtoa_r+0x794>
 800ec68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	f000 80c6 	beq.w	800edfc <_dtoa_r+0x8e4>
 800ec70:	2c00      	cmp	r4, #0
 800ec72:	f000 80c0 	beq.w	800edf6 <_dtoa_r+0x8de>
 800ec76:	4629      	mov	r1, r5
 800ec78:	4622      	mov	r2, r4
 800ec7a:	4648      	mov	r0, r9
 800ec7c:	f000 fcc8 	bl	800f610 <__pow5mult>
 800ec80:	9a02      	ldr	r2, [sp, #8]
 800ec82:	4601      	mov	r1, r0
 800ec84:	4605      	mov	r5, r0
 800ec86:	4648      	mov	r0, r9
 800ec88:	f000 fc20 	bl	800f4cc <__multiply>
 800ec8c:	9902      	ldr	r1, [sp, #8]
 800ec8e:	4680      	mov	r8, r0
 800ec90:	4648      	mov	r0, r9
 800ec92:	f000 fb51 	bl	800f338 <_Bfree>
 800ec96:	9b08      	ldr	r3, [sp, #32]
 800ec98:	1b1b      	subs	r3, r3, r4
 800ec9a:	9308      	str	r3, [sp, #32]
 800ec9c:	f000 80b1 	beq.w	800ee02 <_dtoa_r+0x8ea>
 800eca0:	9a08      	ldr	r2, [sp, #32]
 800eca2:	4641      	mov	r1, r8
 800eca4:	4648      	mov	r0, r9
 800eca6:	f000 fcb3 	bl	800f610 <__pow5mult>
 800ecaa:	9002      	str	r0, [sp, #8]
 800ecac:	2101      	movs	r1, #1
 800ecae:	4648      	mov	r0, r9
 800ecb0:	f000 fbf6 	bl	800f4a0 <__i2b>
 800ecb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	f000 81d8 	beq.w	800f06e <_dtoa_r+0xb56>
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	4601      	mov	r1, r0
 800ecc2:	4648      	mov	r0, r9
 800ecc4:	f000 fca4 	bl	800f610 <__pow5mult>
 800ecc8:	9b07      	ldr	r3, [sp, #28]
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	4604      	mov	r4, r0
 800ecce:	f300 809f 	bgt.w	800ee10 <_dtoa_r+0x8f8>
 800ecd2:	9b04      	ldr	r3, [sp, #16]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f040 8097 	bne.w	800ee08 <_dtoa_r+0x8f0>
 800ecda:	9b05      	ldr	r3, [sp, #20]
 800ecdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	f040 8093 	bne.w	800ee0c <_dtoa_r+0x8f4>
 800ece6:	9b05      	ldr	r3, [sp, #20]
 800ece8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ecec:	0d1b      	lsrs	r3, r3, #20
 800ecee:	051b      	lsls	r3, r3, #20
 800ecf0:	b133      	cbz	r3, 800ed00 <_dtoa_r+0x7e8>
 800ecf2:	9b00      	ldr	r3, [sp, #0]
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	9b06      	ldr	r3, [sp, #24]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	9306      	str	r3, [sp, #24]
 800ecfe:	2301      	movs	r3, #1
 800ed00:	9308      	str	r3, [sp, #32]
 800ed02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f000 81b8 	beq.w	800f07a <_dtoa_r+0xb62>
 800ed0a:	6923      	ldr	r3, [r4, #16]
 800ed0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed10:	6918      	ldr	r0, [r3, #16]
 800ed12:	f000 fb79 	bl	800f408 <__hi0bits>
 800ed16:	f1c0 0020 	rsb	r0, r0, #32
 800ed1a:	9b06      	ldr	r3, [sp, #24]
 800ed1c:	4418      	add	r0, r3
 800ed1e:	f010 001f 	ands.w	r0, r0, #31
 800ed22:	f000 8082 	beq.w	800ee2a <_dtoa_r+0x912>
 800ed26:	f1c0 0320 	rsb	r3, r0, #32
 800ed2a:	2b04      	cmp	r3, #4
 800ed2c:	dd73      	ble.n	800ee16 <_dtoa_r+0x8fe>
 800ed2e:	9b00      	ldr	r3, [sp, #0]
 800ed30:	f1c0 001c 	rsb	r0, r0, #28
 800ed34:	4403      	add	r3, r0
 800ed36:	9300      	str	r3, [sp, #0]
 800ed38:	9b06      	ldr	r3, [sp, #24]
 800ed3a:	4403      	add	r3, r0
 800ed3c:	4406      	add	r6, r0
 800ed3e:	9306      	str	r3, [sp, #24]
 800ed40:	9b00      	ldr	r3, [sp, #0]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	dd05      	ble.n	800ed52 <_dtoa_r+0x83a>
 800ed46:	9902      	ldr	r1, [sp, #8]
 800ed48:	461a      	mov	r2, r3
 800ed4a:	4648      	mov	r0, r9
 800ed4c:	f000 fcba 	bl	800f6c4 <__lshift>
 800ed50:	9002      	str	r0, [sp, #8]
 800ed52:	9b06      	ldr	r3, [sp, #24]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	dd05      	ble.n	800ed64 <_dtoa_r+0x84c>
 800ed58:	4621      	mov	r1, r4
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	4648      	mov	r0, r9
 800ed5e:	f000 fcb1 	bl	800f6c4 <__lshift>
 800ed62:	4604      	mov	r4, r0
 800ed64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d061      	beq.n	800ee2e <_dtoa_r+0x916>
 800ed6a:	9802      	ldr	r0, [sp, #8]
 800ed6c:	4621      	mov	r1, r4
 800ed6e:	f000 fd15 	bl	800f79c <__mcmp>
 800ed72:	2800      	cmp	r0, #0
 800ed74:	da5b      	bge.n	800ee2e <_dtoa_r+0x916>
 800ed76:	2300      	movs	r3, #0
 800ed78:	9902      	ldr	r1, [sp, #8]
 800ed7a:	220a      	movs	r2, #10
 800ed7c:	4648      	mov	r0, r9
 800ed7e:	f000 fafd 	bl	800f37c <__multadd>
 800ed82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed84:	9002      	str	r0, [sp, #8]
 800ed86:	f107 38ff 	add.w	r8, r7, #4294967295
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	f000 8177 	beq.w	800f07e <_dtoa_r+0xb66>
 800ed90:	4629      	mov	r1, r5
 800ed92:	2300      	movs	r3, #0
 800ed94:	220a      	movs	r2, #10
 800ed96:	4648      	mov	r0, r9
 800ed98:	f000 faf0 	bl	800f37c <__multadd>
 800ed9c:	f1bb 0f00 	cmp.w	fp, #0
 800eda0:	4605      	mov	r5, r0
 800eda2:	dc6f      	bgt.n	800ee84 <_dtoa_r+0x96c>
 800eda4:	9b07      	ldr	r3, [sp, #28]
 800eda6:	2b02      	cmp	r3, #2
 800eda8:	dc49      	bgt.n	800ee3e <_dtoa_r+0x926>
 800edaa:	e06b      	b.n	800ee84 <_dtoa_r+0x96c>
 800edac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800edae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800edb2:	e73c      	b.n	800ec2e <_dtoa_r+0x716>
 800edb4:	3fe00000 	.word	0x3fe00000
 800edb8:	40240000 	.word	0x40240000
 800edbc:	9b03      	ldr	r3, [sp, #12]
 800edbe:	1e5c      	subs	r4, r3, #1
 800edc0:	9b08      	ldr	r3, [sp, #32]
 800edc2:	42a3      	cmp	r3, r4
 800edc4:	db09      	blt.n	800edda <_dtoa_r+0x8c2>
 800edc6:	1b1c      	subs	r4, r3, r4
 800edc8:	9b03      	ldr	r3, [sp, #12]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	f6bf af30 	bge.w	800ec30 <_dtoa_r+0x718>
 800edd0:	9b00      	ldr	r3, [sp, #0]
 800edd2:	9a03      	ldr	r2, [sp, #12]
 800edd4:	1a9e      	subs	r6, r3, r2
 800edd6:	2300      	movs	r3, #0
 800edd8:	e72b      	b.n	800ec32 <_dtoa_r+0x71a>
 800edda:	9b08      	ldr	r3, [sp, #32]
 800eddc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800edde:	9408      	str	r4, [sp, #32]
 800ede0:	1ae3      	subs	r3, r4, r3
 800ede2:	441a      	add	r2, r3
 800ede4:	9e00      	ldr	r6, [sp, #0]
 800ede6:	9b03      	ldr	r3, [sp, #12]
 800ede8:	920d      	str	r2, [sp, #52]	@ 0x34
 800edea:	2400      	movs	r4, #0
 800edec:	e721      	b.n	800ec32 <_dtoa_r+0x71a>
 800edee:	9c08      	ldr	r4, [sp, #32]
 800edf0:	9e00      	ldr	r6, [sp, #0]
 800edf2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800edf4:	e728      	b.n	800ec48 <_dtoa_r+0x730>
 800edf6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800edfa:	e751      	b.n	800eca0 <_dtoa_r+0x788>
 800edfc:	9a08      	ldr	r2, [sp, #32]
 800edfe:	9902      	ldr	r1, [sp, #8]
 800ee00:	e750      	b.n	800eca4 <_dtoa_r+0x78c>
 800ee02:	f8cd 8008 	str.w	r8, [sp, #8]
 800ee06:	e751      	b.n	800ecac <_dtoa_r+0x794>
 800ee08:	2300      	movs	r3, #0
 800ee0a:	e779      	b.n	800ed00 <_dtoa_r+0x7e8>
 800ee0c:	9b04      	ldr	r3, [sp, #16]
 800ee0e:	e777      	b.n	800ed00 <_dtoa_r+0x7e8>
 800ee10:	2300      	movs	r3, #0
 800ee12:	9308      	str	r3, [sp, #32]
 800ee14:	e779      	b.n	800ed0a <_dtoa_r+0x7f2>
 800ee16:	d093      	beq.n	800ed40 <_dtoa_r+0x828>
 800ee18:	9a00      	ldr	r2, [sp, #0]
 800ee1a:	331c      	adds	r3, #28
 800ee1c:	441a      	add	r2, r3
 800ee1e:	9200      	str	r2, [sp, #0]
 800ee20:	9a06      	ldr	r2, [sp, #24]
 800ee22:	441a      	add	r2, r3
 800ee24:	441e      	add	r6, r3
 800ee26:	9206      	str	r2, [sp, #24]
 800ee28:	e78a      	b.n	800ed40 <_dtoa_r+0x828>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	e7f4      	b.n	800ee18 <_dtoa_r+0x900>
 800ee2e:	9b03      	ldr	r3, [sp, #12]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	46b8      	mov	r8, r7
 800ee34:	dc20      	bgt.n	800ee78 <_dtoa_r+0x960>
 800ee36:	469b      	mov	fp, r3
 800ee38:	9b07      	ldr	r3, [sp, #28]
 800ee3a:	2b02      	cmp	r3, #2
 800ee3c:	dd1e      	ble.n	800ee7c <_dtoa_r+0x964>
 800ee3e:	f1bb 0f00 	cmp.w	fp, #0
 800ee42:	f47f adb1 	bne.w	800e9a8 <_dtoa_r+0x490>
 800ee46:	4621      	mov	r1, r4
 800ee48:	465b      	mov	r3, fp
 800ee4a:	2205      	movs	r2, #5
 800ee4c:	4648      	mov	r0, r9
 800ee4e:	f000 fa95 	bl	800f37c <__multadd>
 800ee52:	4601      	mov	r1, r0
 800ee54:	4604      	mov	r4, r0
 800ee56:	9802      	ldr	r0, [sp, #8]
 800ee58:	f000 fca0 	bl	800f79c <__mcmp>
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	f77f ada3 	ble.w	800e9a8 <_dtoa_r+0x490>
 800ee62:	4656      	mov	r6, sl
 800ee64:	2331      	movs	r3, #49	@ 0x31
 800ee66:	f806 3b01 	strb.w	r3, [r6], #1
 800ee6a:	f108 0801 	add.w	r8, r8, #1
 800ee6e:	e59f      	b.n	800e9b0 <_dtoa_r+0x498>
 800ee70:	9c03      	ldr	r4, [sp, #12]
 800ee72:	46b8      	mov	r8, r7
 800ee74:	4625      	mov	r5, r4
 800ee76:	e7f4      	b.n	800ee62 <_dtoa_r+0x94a>
 800ee78:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ee7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	f000 8101 	beq.w	800f086 <_dtoa_r+0xb6e>
 800ee84:	2e00      	cmp	r6, #0
 800ee86:	dd05      	ble.n	800ee94 <_dtoa_r+0x97c>
 800ee88:	4629      	mov	r1, r5
 800ee8a:	4632      	mov	r2, r6
 800ee8c:	4648      	mov	r0, r9
 800ee8e:	f000 fc19 	bl	800f6c4 <__lshift>
 800ee92:	4605      	mov	r5, r0
 800ee94:	9b08      	ldr	r3, [sp, #32]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d05c      	beq.n	800ef54 <_dtoa_r+0xa3c>
 800ee9a:	6869      	ldr	r1, [r5, #4]
 800ee9c:	4648      	mov	r0, r9
 800ee9e:	f000 fa0b 	bl	800f2b8 <_Balloc>
 800eea2:	4606      	mov	r6, r0
 800eea4:	b928      	cbnz	r0, 800eeb2 <_dtoa_r+0x99a>
 800eea6:	4b82      	ldr	r3, [pc, #520]	@ (800f0b0 <_dtoa_r+0xb98>)
 800eea8:	4602      	mov	r2, r0
 800eeaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eeae:	f7ff bb4a 	b.w	800e546 <_dtoa_r+0x2e>
 800eeb2:	692a      	ldr	r2, [r5, #16]
 800eeb4:	3202      	adds	r2, #2
 800eeb6:	0092      	lsls	r2, r2, #2
 800eeb8:	f105 010c 	add.w	r1, r5, #12
 800eebc:	300c      	adds	r0, #12
 800eebe:	f7ff fa92 	bl	800e3e6 <memcpy>
 800eec2:	2201      	movs	r2, #1
 800eec4:	4631      	mov	r1, r6
 800eec6:	4648      	mov	r0, r9
 800eec8:	f000 fbfc 	bl	800f6c4 <__lshift>
 800eecc:	f10a 0301 	add.w	r3, sl, #1
 800eed0:	9300      	str	r3, [sp, #0]
 800eed2:	eb0a 030b 	add.w	r3, sl, fp
 800eed6:	9308      	str	r3, [sp, #32]
 800eed8:	9b04      	ldr	r3, [sp, #16]
 800eeda:	f003 0301 	and.w	r3, r3, #1
 800eede:	462f      	mov	r7, r5
 800eee0:	9306      	str	r3, [sp, #24]
 800eee2:	4605      	mov	r5, r0
 800eee4:	9b00      	ldr	r3, [sp, #0]
 800eee6:	9802      	ldr	r0, [sp, #8]
 800eee8:	4621      	mov	r1, r4
 800eeea:	f103 3bff 	add.w	fp, r3, #4294967295
 800eeee:	f7ff fa88 	bl	800e402 <quorem>
 800eef2:	4603      	mov	r3, r0
 800eef4:	3330      	adds	r3, #48	@ 0x30
 800eef6:	9003      	str	r0, [sp, #12]
 800eef8:	4639      	mov	r1, r7
 800eefa:	9802      	ldr	r0, [sp, #8]
 800eefc:	9309      	str	r3, [sp, #36]	@ 0x24
 800eefe:	f000 fc4d 	bl	800f79c <__mcmp>
 800ef02:	462a      	mov	r2, r5
 800ef04:	9004      	str	r0, [sp, #16]
 800ef06:	4621      	mov	r1, r4
 800ef08:	4648      	mov	r0, r9
 800ef0a:	f000 fc63 	bl	800f7d4 <__mdiff>
 800ef0e:	68c2      	ldr	r2, [r0, #12]
 800ef10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef12:	4606      	mov	r6, r0
 800ef14:	bb02      	cbnz	r2, 800ef58 <_dtoa_r+0xa40>
 800ef16:	4601      	mov	r1, r0
 800ef18:	9802      	ldr	r0, [sp, #8]
 800ef1a:	f000 fc3f 	bl	800f79c <__mcmp>
 800ef1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef20:	4602      	mov	r2, r0
 800ef22:	4631      	mov	r1, r6
 800ef24:	4648      	mov	r0, r9
 800ef26:	920c      	str	r2, [sp, #48]	@ 0x30
 800ef28:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef2a:	f000 fa05 	bl	800f338 <_Bfree>
 800ef2e:	9b07      	ldr	r3, [sp, #28]
 800ef30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ef32:	9e00      	ldr	r6, [sp, #0]
 800ef34:	ea42 0103 	orr.w	r1, r2, r3
 800ef38:	9b06      	ldr	r3, [sp, #24]
 800ef3a:	4319      	orrs	r1, r3
 800ef3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef3e:	d10d      	bne.n	800ef5c <_dtoa_r+0xa44>
 800ef40:	2b39      	cmp	r3, #57	@ 0x39
 800ef42:	d027      	beq.n	800ef94 <_dtoa_r+0xa7c>
 800ef44:	9a04      	ldr	r2, [sp, #16]
 800ef46:	2a00      	cmp	r2, #0
 800ef48:	dd01      	ble.n	800ef4e <_dtoa_r+0xa36>
 800ef4a:	9b03      	ldr	r3, [sp, #12]
 800ef4c:	3331      	adds	r3, #49	@ 0x31
 800ef4e:	f88b 3000 	strb.w	r3, [fp]
 800ef52:	e52e      	b.n	800e9b2 <_dtoa_r+0x49a>
 800ef54:	4628      	mov	r0, r5
 800ef56:	e7b9      	b.n	800eecc <_dtoa_r+0x9b4>
 800ef58:	2201      	movs	r2, #1
 800ef5a:	e7e2      	b.n	800ef22 <_dtoa_r+0xa0a>
 800ef5c:	9904      	ldr	r1, [sp, #16]
 800ef5e:	2900      	cmp	r1, #0
 800ef60:	db04      	blt.n	800ef6c <_dtoa_r+0xa54>
 800ef62:	9807      	ldr	r0, [sp, #28]
 800ef64:	4301      	orrs	r1, r0
 800ef66:	9806      	ldr	r0, [sp, #24]
 800ef68:	4301      	orrs	r1, r0
 800ef6a:	d120      	bne.n	800efae <_dtoa_r+0xa96>
 800ef6c:	2a00      	cmp	r2, #0
 800ef6e:	ddee      	ble.n	800ef4e <_dtoa_r+0xa36>
 800ef70:	9902      	ldr	r1, [sp, #8]
 800ef72:	9300      	str	r3, [sp, #0]
 800ef74:	2201      	movs	r2, #1
 800ef76:	4648      	mov	r0, r9
 800ef78:	f000 fba4 	bl	800f6c4 <__lshift>
 800ef7c:	4621      	mov	r1, r4
 800ef7e:	9002      	str	r0, [sp, #8]
 800ef80:	f000 fc0c 	bl	800f79c <__mcmp>
 800ef84:	2800      	cmp	r0, #0
 800ef86:	9b00      	ldr	r3, [sp, #0]
 800ef88:	dc02      	bgt.n	800ef90 <_dtoa_r+0xa78>
 800ef8a:	d1e0      	bne.n	800ef4e <_dtoa_r+0xa36>
 800ef8c:	07da      	lsls	r2, r3, #31
 800ef8e:	d5de      	bpl.n	800ef4e <_dtoa_r+0xa36>
 800ef90:	2b39      	cmp	r3, #57	@ 0x39
 800ef92:	d1da      	bne.n	800ef4a <_dtoa_r+0xa32>
 800ef94:	2339      	movs	r3, #57	@ 0x39
 800ef96:	f88b 3000 	strb.w	r3, [fp]
 800ef9a:	4633      	mov	r3, r6
 800ef9c:	461e      	mov	r6, r3
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800efa4:	2a39      	cmp	r2, #57	@ 0x39
 800efa6:	d04e      	beq.n	800f046 <_dtoa_r+0xb2e>
 800efa8:	3201      	adds	r2, #1
 800efaa:	701a      	strb	r2, [r3, #0]
 800efac:	e501      	b.n	800e9b2 <_dtoa_r+0x49a>
 800efae:	2a00      	cmp	r2, #0
 800efb0:	dd03      	ble.n	800efba <_dtoa_r+0xaa2>
 800efb2:	2b39      	cmp	r3, #57	@ 0x39
 800efb4:	d0ee      	beq.n	800ef94 <_dtoa_r+0xa7c>
 800efb6:	3301      	adds	r3, #1
 800efb8:	e7c9      	b.n	800ef4e <_dtoa_r+0xa36>
 800efba:	9a00      	ldr	r2, [sp, #0]
 800efbc:	9908      	ldr	r1, [sp, #32]
 800efbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800efc2:	428a      	cmp	r2, r1
 800efc4:	d028      	beq.n	800f018 <_dtoa_r+0xb00>
 800efc6:	9902      	ldr	r1, [sp, #8]
 800efc8:	2300      	movs	r3, #0
 800efca:	220a      	movs	r2, #10
 800efcc:	4648      	mov	r0, r9
 800efce:	f000 f9d5 	bl	800f37c <__multadd>
 800efd2:	42af      	cmp	r7, r5
 800efd4:	9002      	str	r0, [sp, #8]
 800efd6:	f04f 0300 	mov.w	r3, #0
 800efda:	f04f 020a 	mov.w	r2, #10
 800efde:	4639      	mov	r1, r7
 800efe0:	4648      	mov	r0, r9
 800efe2:	d107      	bne.n	800eff4 <_dtoa_r+0xadc>
 800efe4:	f000 f9ca 	bl	800f37c <__multadd>
 800efe8:	4607      	mov	r7, r0
 800efea:	4605      	mov	r5, r0
 800efec:	9b00      	ldr	r3, [sp, #0]
 800efee:	3301      	adds	r3, #1
 800eff0:	9300      	str	r3, [sp, #0]
 800eff2:	e777      	b.n	800eee4 <_dtoa_r+0x9cc>
 800eff4:	f000 f9c2 	bl	800f37c <__multadd>
 800eff8:	4629      	mov	r1, r5
 800effa:	4607      	mov	r7, r0
 800effc:	2300      	movs	r3, #0
 800effe:	220a      	movs	r2, #10
 800f000:	4648      	mov	r0, r9
 800f002:	f000 f9bb 	bl	800f37c <__multadd>
 800f006:	4605      	mov	r5, r0
 800f008:	e7f0      	b.n	800efec <_dtoa_r+0xad4>
 800f00a:	f1bb 0f00 	cmp.w	fp, #0
 800f00e:	bfcc      	ite	gt
 800f010:	465e      	movgt	r6, fp
 800f012:	2601      	movle	r6, #1
 800f014:	4456      	add	r6, sl
 800f016:	2700      	movs	r7, #0
 800f018:	9902      	ldr	r1, [sp, #8]
 800f01a:	9300      	str	r3, [sp, #0]
 800f01c:	2201      	movs	r2, #1
 800f01e:	4648      	mov	r0, r9
 800f020:	f000 fb50 	bl	800f6c4 <__lshift>
 800f024:	4621      	mov	r1, r4
 800f026:	9002      	str	r0, [sp, #8]
 800f028:	f000 fbb8 	bl	800f79c <__mcmp>
 800f02c:	2800      	cmp	r0, #0
 800f02e:	dcb4      	bgt.n	800ef9a <_dtoa_r+0xa82>
 800f030:	d102      	bne.n	800f038 <_dtoa_r+0xb20>
 800f032:	9b00      	ldr	r3, [sp, #0]
 800f034:	07db      	lsls	r3, r3, #31
 800f036:	d4b0      	bmi.n	800ef9a <_dtoa_r+0xa82>
 800f038:	4633      	mov	r3, r6
 800f03a:	461e      	mov	r6, r3
 800f03c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f040:	2a30      	cmp	r2, #48	@ 0x30
 800f042:	d0fa      	beq.n	800f03a <_dtoa_r+0xb22>
 800f044:	e4b5      	b.n	800e9b2 <_dtoa_r+0x49a>
 800f046:	459a      	cmp	sl, r3
 800f048:	d1a8      	bne.n	800ef9c <_dtoa_r+0xa84>
 800f04a:	2331      	movs	r3, #49	@ 0x31
 800f04c:	f108 0801 	add.w	r8, r8, #1
 800f050:	f88a 3000 	strb.w	r3, [sl]
 800f054:	e4ad      	b.n	800e9b2 <_dtoa_r+0x49a>
 800f056:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f058:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f0b4 <_dtoa_r+0xb9c>
 800f05c:	b11b      	cbz	r3, 800f066 <_dtoa_r+0xb4e>
 800f05e:	f10a 0308 	add.w	r3, sl, #8
 800f062:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f064:	6013      	str	r3, [r2, #0]
 800f066:	4650      	mov	r0, sl
 800f068:	b017      	add	sp, #92	@ 0x5c
 800f06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f06e:	9b07      	ldr	r3, [sp, #28]
 800f070:	2b01      	cmp	r3, #1
 800f072:	f77f ae2e 	ble.w	800ecd2 <_dtoa_r+0x7ba>
 800f076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f078:	9308      	str	r3, [sp, #32]
 800f07a:	2001      	movs	r0, #1
 800f07c:	e64d      	b.n	800ed1a <_dtoa_r+0x802>
 800f07e:	f1bb 0f00 	cmp.w	fp, #0
 800f082:	f77f aed9 	ble.w	800ee38 <_dtoa_r+0x920>
 800f086:	4656      	mov	r6, sl
 800f088:	9802      	ldr	r0, [sp, #8]
 800f08a:	4621      	mov	r1, r4
 800f08c:	f7ff f9b9 	bl	800e402 <quorem>
 800f090:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f094:	f806 3b01 	strb.w	r3, [r6], #1
 800f098:	eba6 020a 	sub.w	r2, r6, sl
 800f09c:	4593      	cmp	fp, r2
 800f09e:	ddb4      	ble.n	800f00a <_dtoa_r+0xaf2>
 800f0a0:	9902      	ldr	r1, [sp, #8]
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	220a      	movs	r2, #10
 800f0a6:	4648      	mov	r0, r9
 800f0a8:	f000 f968 	bl	800f37c <__multadd>
 800f0ac:	9002      	str	r0, [sp, #8]
 800f0ae:	e7eb      	b.n	800f088 <_dtoa_r+0xb70>
 800f0b0:	08011290 	.word	0x08011290
 800f0b4:	08011214 	.word	0x08011214

0800f0b8 <_free_r>:
 800f0b8:	b538      	push	{r3, r4, r5, lr}
 800f0ba:	4605      	mov	r5, r0
 800f0bc:	2900      	cmp	r1, #0
 800f0be:	d041      	beq.n	800f144 <_free_r+0x8c>
 800f0c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0c4:	1f0c      	subs	r4, r1, #4
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	bfb8      	it	lt
 800f0ca:	18e4      	addlt	r4, r4, r3
 800f0cc:	f000 f8e8 	bl	800f2a0 <__malloc_lock>
 800f0d0:	4a1d      	ldr	r2, [pc, #116]	@ (800f148 <_free_r+0x90>)
 800f0d2:	6813      	ldr	r3, [r2, #0]
 800f0d4:	b933      	cbnz	r3, 800f0e4 <_free_r+0x2c>
 800f0d6:	6063      	str	r3, [r4, #4]
 800f0d8:	6014      	str	r4, [r2, #0]
 800f0da:	4628      	mov	r0, r5
 800f0dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0e0:	f000 b8e4 	b.w	800f2ac <__malloc_unlock>
 800f0e4:	42a3      	cmp	r3, r4
 800f0e6:	d908      	bls.n	800f0fa <_free_r+0x42>
 800f0e8:	6820      	ldr	r0, [r4, #0]
 800f0ea:	1821      	adds	r1, r4, r0
 800f0ec:	428b      	cmp	r3, r1
 800f0ee:	bf01      	itttt	eq
 800f0f0:	6819      	ldreq	r1, [r3, #0]
 800f0f2:	685b      	ldreq	r3, [r3, #4]
 800f0f4:	1809      	addeq	r1, r1, r0
 800f0f6:	6021      	streq	r1, [r4, #0]
 800f0f8:	e7ed      	b.n	800f0d6 <_free_r+0x1e>
 800f0fa:	461a      	mov	r2, r3
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	b10b      	cbz	r3, 800f104 <_free_r+0x4c>
 800f100:	42a3      	cmp	r3, r4
 800f102:	d9fa      	bls.n	800f0fa <_free_r+0x42>
 800f104:	6811      	ldr	r1, [r2, #0]
 800f106:	1850      	adds	r0, r2, r1
 800f108:	42a0      	cmp	r0, r4
 800f10a:	d10b      	bne.n	800f124 <_free_r+0x6c>
 800f10c:	6820      	ldr	r0, [r4, #0]
 800f10e:	4401      	add	r1, r0
 800f110:	1850      	adds	r0, r2, r1
 800f112:	4283      	cmp	r3, r0
 800f114:	6011      	str	r1, [r2, #0]
 800f116:	d1e0      	bne.n	800f0da <_free_r+0x22>
 800f118:	6818      	ldr	r0, [r3, #0]
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	6053      	str	r3, [r2, #4]
 800f11e:	4408      	add	r0, r1
 800f120:	6010      	str	r0, [r2, #0]
 800f122:	e7da      	b.n	800f0da <_free_r+0x22>
 800f124:	d902      	bls.n	800f12c <_free_r+0x74>
 800f126:	230c      	movs	r3, #12
 800f128:	602b      	str	r3, [r5, #0]
 800f12a:	e7d6      	b.n	800f0da <_free_r+0x22>
 800f12c:	6820      	ldr	r0, [r4, #0]
 800f12e:	1821      	adds	r1, r4, r0
 800f130:	428b      	cmp	r3, r1
 800f132:	bf04      	itt	eq
 800f134:	6819      	ldreq	r1, [r3, #0]
 800f136:	685b      	ldreq	r3, [r3, #4]
 800f138:	6063      	str	r3, [r4, #4]
 800f13a:	bf04      	itt	eq
 800f13c:	1809      	addeq	r1, r1, r0
 800f13e:	6021      	streq	r1, [r4, #0]
 800f140:	6054      	str	r4, [r2, #4]
 800f142:	e7ca      	b.n	800f0da <_free_r+0x22>
 800f144:	bd38      	pop	{r3, r4, r5, pc}
 800f146:	bf00      	nop
 800f148:	200056cc 	.word	0x200056cc

0800f14c <malloc>:
 800f14c:	4b02      	ldr	r3, [pc, #8]	@ (800f158 <malloc+0xc>)
 800f14e:	4601      	mov	r1, r0
 800f150:	6818      	ldr	r0, [r3, #0]
 800f152:	f000 b825 	b.w	800f1a0 <_malloc_r>
 800f156:	bf00      	nop
 800f158:	20000020 	.word	0x20000020

0800f15c <sbrk_aligned>:
 800f15c:	b570      	push	{r4, r5, r6, lr}
 800f15e:	4e0f      	ldr	r6, [pc, #60]	@ (800f19c <sbrk_aligned+0x40>)
 800f160:	460c      	mov	r4, r1
 800f162:	6831      	ldr	r1, [r6, #0]
 800f164:	4605      	mov	r5, r0
 800f166:	b911      	cbnz	r1, 800f16e <sbrk_aligned+0x12>
 800f168:	f000 fe3e 	bl	800fde8 <_sbrk_r>
 800f16c:	6030      	str	r0, [r6, #0]
 800f16e:	4621      	mov	r1, r4
 800f170:	4628      	mov	r0, r5
 800f172:	f000 fe39 	bl	800fde8 <_sbrk_r>
 800f176:	1c43      	adds	r3, r0, #1
 800f178:	d103      	bne.n	800f182 <sbrk_aligned+0x26>
 800f17a:	f04f 34ff 	mov.w	r4, #4294967295
 800f17e:	4620      	mov	r0, r4
 800f180:	bd70      	pop	{r4, r5, r6, pc}
 800f182:	1cc4      	adds	r4, r0, #3
 800f184:	f024 0403 	bic.w	r4, r4, #3
 800f188:	42a0      	cmp	r0, r4
 800f18a:	d0f8      	beq.n	800f17e <sbrk_aligned+0x22>
 800f18c:	1a21      	subs	r1, r4, r0
 800f18e:	4628      	mov	r0, r5
 800f190:	f000 fe2a 	bl	800fde8 <_sbrk_r>
 800f194:	3001      	adds	r0, #1
 800f196:	d1f2      	bne.n	800f17e <sbrk_aligned+0x22>
 800f198:	e7ef      	b.n	800f17a <sbrk_aligned+0x1e>
 800f19a:	bf00      	nop
 800f19c:	200056c8 	.word	0x200056c8

0800f1a0 <_malloc_r>:
 800f1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1a4:	1ccd      	adds	r5, r1, #3
 800f1a6:	f025 0503 	bic.w	r5, r5, #3
 800f1aa:	3508      	adds	r5, #8
 800f1ac:	2d0c      	cmp	r5, #12
 800f1ae:	bf38      	it	cc
 800f1b0:	250c      	movcc	r5, #12
 800f1b2:	2d00      	cmp	r5, #0
 800f1b4:	4606      	mov	r6, r0
 800f1b6:	db01      	blt.n	800f1bc <_malloc_r+0x1c>
 800f1b8:	42a9      	cmp	r1, r5
 800f1ba:	d904      	bls.n	800f1c6 <_malloc_r+0x26>
 800f1bc:	230c      	movs	r3, #12
 800f1be:	6033      	str	r3, [r6, #0]
 800f1c0:	2000      	movs	r0, #0
 800f1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f29c <_malloc_r+0xfc>
 800f1ca:	f000 f869 	bl	800f2a0 <__malloc_lock>
 800f1ce:	f8d8 3000 	ldr.w	r3, [r8]
 800f1d2:	461c      	mov	r4, r3
 800f1d4:	bb44      	cbnz	r4, 800f228 <_malloc_r+0x88>
 800f1d6:	4629      	mov	r1, r5
 800f1d8:	4630      	mov	r0, r6
 800f1da:	f7ff ffbf 	bl	800f15c <sbrk_aligned>
 800f1de:	1c43      	adds	r3, r0, #1
 800f1e0:	4604      	mov	r4, r0
 800f1e2:	d158      	bne.n	800f296 <_malloc_r+0xf6>
 800f1e4:	f8d8 4000 	ldr.w	r4, [r8]
 800f1e8:	4627      	mov	r7, r4
 800f1ea:	2f00      	cmp	r7, #0
 800f1ec:	d143      	bne.n	800f276 <_malloc_r+0xd6>
 800f1ee:	2c00      	cmp	r4, #0
 800f1f0:	d04b      	beq.n	800f28a <_malloc_r+0xea>
 800f1f2:	6823      	ldr	r3, [r4, #0]
 800f1f4:	4639      	mov	r1, r7
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	eb04 0903 	add.w	r9, r4, r3
 800f1fc:	f000 fdf4 	bl	800fde8 <_sbrk_r>
 800f200:	4581      	cmp	r9, r0
 800f202:	d142      	bne.n	800f28a <_malloc_r+0xea>
 800f204:	6821      	ldr	r1, [r4, #0]
 800f206:	1a6d      	subs	r5, r5, r1
 800f208:	4629      	mov	r1, r5
 800f20a:	4630      	mov	r0, r6
 800f20c:	f7ff ffa6 	bl	800f15c <sbrk_aligned>
 800f210:	3001      	adds	r0, #1
 800f212:	d03a      	beq.n	800f28a <_malloc_r+0xea>
 800f214:	6823      	ldr	r3, [r4, #0]
 800f216:	442b      	add	r3, r5
 800f218:	6023      	str	r3, [r4, #0]
 800f21a:	f8d8 3000 	ldr.w	r3, [r8]
 800f21e:	685a      	ldr	r2, [r3, #4]
 800f220:	bb62      	cbnz	r2, 800f27c <_malloc_r+0xdc>
 800f222:	f8c8 7000 	str.w	r7, [r8]
 800f226:	e00f      	b.n	800f248 <_malloc_r+0xa8>
 800f228:	6822      	ldr	r2, [r4, #0]
 800f22a:	1b52      	subs	r2, r2, r5
 800f22c:	d420      	bmi.n	800f270 <_malloc_r+0xd0>
 800f22e:	2a0b      	cmp	r2, #11
 800f230:	d917      	bls.n	800f262 <_malloc_r+0xc2>
 800f232:	1961      	adds	r1, r4, r5
 800f234:	42a3      	cmp	r3, r4
 800f236:	6025      	str	r5, [r4, #0]
 800f238:	bf18      	it	ne
 800f23a:	6059      	strne	r1, [r3, #4]
 800f23c:	6863      	ldr	r3, [r4, #4]
 800f23e:	bf08      	it	eq
 800f240:	f8c8 1000 	streq.w	r1, [r8]
 800f244:	5162      	str	r2, [r4, r5]
 800f246:	604b      	str	r3, [r1, #4]
 800f248:	4630      	mov	r0, r6
 800f24a:	f000 f82f 	bl	800f2ac <__malloc_unlock>
 800f24e:	f104 000b 	add.w	r0, r4, #11
 800f252:	1d23      	adds	r3, r4, #4
 800f254:	f020 0007 	bic.w	r0, r0, #7
 800f258:	1ac2      	subs	r2, r0, r3
 800f25a:	bf1c      	itt	ne
 800f25c:	1a1b      	subne	r3, r3, r0
 800f25e:	50a3      	strne	r3, [r4, r2]
 800f260:	e7af      	b.n	800f1c2 <_malloc_r+0x22>
 800f262:	6862      	ldr	r2, [r4, #4]
 800f264:	42a3      	cmp	r3, r4
 800f266:	bf0c      	ite	eq
 800f268:	f8c8 2000 	streq.w	r2, [r8]
 800f26c:	605a      	strne	r2, [r3, #4]
 800f26e:	e7eb      	b.n	800f248 <_malloc_r+0xa8>
 800f270:	4623      	mov	r3, r4
 800f272:	6864      	ldr	r4, [r4, #4]
 800f274:	e7ae      	b.n	800f1d4 <_malloc_r+0x34>
 800f276:	463c      	mov	r4, r7
 800f278:	687f      	ldr	r7, [r7, #4]
 800f27a:	e7b6      	b.n	800f1ea <_malloc_r+0x4a>
 800f27c:	461a      	mov	r2, r3
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	42a3      	cmp	r3, r4
 800f282:	d1fb      	bne.n	800f27c <_malloc_r+0xdc>
 800f284:	2300      	movs	r3, #0
 800f286:	6053      	str	r3, [r2, #4]
 800f288:	e7de      	b.n	800f248 <_malloc_r+0xa8>
 800f28a:	230c      	movs	r3, #12
 800f28c:	6033      	str	r3, [r6, #0]
 800f28e:	4630      	mov	r0, r6
 800f290:	f000 f80c 	bl	800f2ac <__malloc_unlock>
 800f294:	e794      	b.n	800f1c0 <_malloc_r+0x20>
 800f296:	6005      	str	r5, [r0, #0]
 800f298:	e7d6      	b.n	800f248 <_malloc_r+0xa8>
 800f29a:	bf00      	nop
 800f29c:	200056cc 	.word	0x200056cc

0800f2a0 <__malloc_lock>:
 800f2a0:	4801      	ldr	r0, [pc, #4]	@ (800f2a8 <__malloc_lock+0x8>)
 800f2a2:	f7ff b89e 	b.w	800e3e2 <__retarget_lock_acquire_recursive>
 800f2a6:	bf00      	nop
 800f2a8:	200056c4 	.word	0x200056c4

0800f2ac <__malloc_unlock>:
 800f2ac:	4801      	ldr	r0, [pc, #4]	@ (800f2b4 <__malloc_unlock+0x8>)
 800f2ae:	f7ff b899 	b.w	800e3e4 <__retarget_lock_release_recursive>
 800f2b2:	bf00      	nop
 800f2b4:	200056c4 	.word	0x200056c4

0800f2b8 <_Balloc>:
 800f2b8:	b570      	push	{r4, r5, r6, lr}
 800f2ba:	69c6      	ldr	r6, [r0, #28]
 800f2bc:	4604      	mov	r4, r0
 800f2be:	460d      	mov	r5, r1
 800f2c0:	b976      	cbnz	r6, 800f2e0 <_Balloc+0x28>
 800f2c2:	2010      	movs	r0, #16
 800f2c4:	f7ff ff42 	bl	800f14c <malloc>
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	61e0      	str	r0, [r4, #28]
 800f2cc:	b920      	cbnz	r0, 800f2d8 <_Balloc+0x20>
 800f2ce:	4b18      	ldr	r3, [pc, #96]	@ (800f330 <_Balloc+0x78>)
 800f2d0:	4818      	ldr	r0, [pc, #96]	@ (800f334 <_Balloc+0x7c>)
 800f2d2:	216b      	movs	r1, #107	@ 0x6b
 800f2d4:	f000 fd98 	bl	800fe08 <__assert_func>
 800f2d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2dc:	6006      	str	r6, [r0, #0]
 800f2de:	60c6      	str	r6, [r0, #12]
 800f2e0:	69e6      	ldr	r6, [r4, #28]
 800f2e2:	68f3      	ldr	r3, [r6, #12]
 800f2e4:	b183      	cbz	r3, 800f308 <_Balloc+0x50>
 800f2e6:	69e3      	ldr	r3, [r4, #28]
 800f2e8:	68db      	ldr	r3, [r3, #12]
 800f2ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f2ee:	b9b8      	cbnz	r0, 800f320 <_Balloc+0x68>
 800f2f0:	2101      	movs	r1, #1
 800f2f2:	fa01 f605 	lsl.w	r6, r1, r5
 800f2f6:	1d72      	adds	r2, r6, #5
 800f2f8:	0092      	lsls	r2, r2, #2
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f000 fda2 	bl	800fe44 <_calloc_r>
 800f300:	b160      	cbz	r0, 800f31c <_Balloc+0x64>
 800f302:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f306:	e00e      	b.n	800f326 <_Balloc+0x6e>
 800f308:	2221      	movs	r2, #33	@ 0x21
 800f30a:	2104      	movs	r1, #4
 800f30c:	4620      	mov	r0, r4
 800f30e:	f000 fd99 	bl	800fe44 <_calloc_r>
 800f312:	69e3      	ldr	r3, [r4, #28]
 800f314:	60f0      	str	r0, [r6, #12]
 800f316:	68db      	ldr	r3, [r3, #12]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d1e4      	bne.n	800f2e6 <_Balloc+0x2e>
 800f31c:	2000      	movs	r0, #0
 800f31e:	bd70      	pop	{r4, r5, r6, pc}
 800f320:	6802      	ldr	r2, [r0, #0]
 800f322:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f326:	2300      	movs	r3, #0
 800f328:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f32c:	e7f7      	b.n	800f31e <_Balloc+0x66>
 800f32e:	bf00      	nop
 800f330:	08011221 	.word	0x08011221
 800f334:	080112a1 	.word	0x080112a1

0800f338 <_Bfree>:
 800f338:	b570      	push	{r4, r5, r6, lr}
 800f33a:	69c6      	ldr	r6, [r0, #28]
 800f33c:	4605      	mov	r5, r0
 800f33e:	460c      	mov	r4, r1
 800f340:	b976      	cbnz	r6, 800f360 <_Bfree+0x28>
 800f342:	2010      	movs	r0, #16
 800f344:	f7ff ff02 	bl	800f14c <malloc>
 800f348:	4602      	mov	r2, r0
 800f34a:	61e8      	str	r0, [r5, #28]
 800f34c:	b920      	cbnz	r0, 800f358 <_Bfree+0x20>
 800f34e:	4b09      	ldr	r3, [pc, #36]	@ (800f374 <_Bfree+0x3c>)
 800f350:	4809      	ldr	r0, [pc, #36]	@ (800f378 <_Bfree+0x40>)
 800f352:	218f      	movs	r1, #143	@ 0x8f
 800f354:	f000 fd58 	bl	800fe08 <__assert_func>
 800f358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f35c:	6006      	str	r6, [r0, #0]
 800f35e:	60c6      	str	r6, [r0, #12]
 800f360:	b13c      	cbz	r4, 800f372 <_Bfree+0x3a>
 800f362:	69eb      	ldr	r3, [r5, #28]
 800f364:	6862      	ldr	r2, [r4, #4]
 800f366:	68db      	ldr	r3, [r3, #12]
 800f368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f36c:	6021      	str	r1, [r4, #0]
 800f36e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f372:	bd70      	pop	{r4, r5, r6, pc}
 800f374:	08011221 	.word	0x08011221
 800f378:	080112a1 	.word	0x080112a1

0800f37c <__multadd>:
 800f37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f380:	690d      	ldr	r5, [r1, #16]
 800f382:	4607      	mov	r7, r0
 800f384:	460c      	mov	r4, r1
 800f386:	461e      	mov	r6, r3
 800f388:	f101 0c14 	add.w	ip, r1, #20
 800f38c:	2000      	movs	r0, #0
 800f38e:	f8dc 3000 	ldr.w	r3, [ip]
 800f392:	b299      	uxth	r1, r3
 800f394:	fb02 6101 	mla	r1, r2, r1, r6
 800f398:	0c1e      	lsrs	r6, r3, #16
 800f39a:	0c0b      	lsrs	r3, r1, #16
 800f39c:	fb02 3306 	mla	r3, r2, r6, r3
 800f3a0:	b289      	uxth	r1, r1
 800f3a2:	3001      	adds	r0, #1
 800f3a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f3a8:	4285      	cmp	r5, r0
 800f3aa:	f84c 1b04 	str.w	r1, [ip], #4
 800f3ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f3b2:	dcec      	bgt.n	800f38e <__multadd+0x12>
 800f3b4:	b30e      	cbz	r6, 800f3fa <__multadd+0x7e>
 800f3b6:	68a3      	ldr	r3, [r4, #8]
 800f3b8:	42ab      	cmp	r3, r5
 800f3ba:	dc19      	bgt.n	800f3f0 <__multadd+0x74>
 800f3bc:	6861      	ldr	r1, [r4, #4]
 800f3be:	4638      	mov	r0, r7
 800f3c0:	3101      	adds	r1, #1
 800f3c2:	f7ff ff79 	bl	800f2b8 <_Balloc>
 800f3c6:	4680      	mov	r8, r0
 800f3c8:	b928      	cbnz	r0, 800f3d6 <__multadd+0x5a>
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	4b0c      	ldr	r3, [pc, #48]	@ (800f400 <__multadd+0x84>)
 800f3ce:	480d      	ldr	r0, [pc, #52]	@ (800f404 <__multadd+0x88>)
 800f3d0:	21ba      	movs	r1, #186	@ 0xba
 800f3d2:	f000 fd19 	bl	800fe08 <__assert_func>
 800f3d6:	6922      	ldr	r2, [r4, #16]
 800f3d8:	3202      	adds	r2, #2
 800f3da:	f104 010c 	add.w	r1, r4, #12
 800f3de:	0092      	lsls	r2, r2, #2
 800f3e0:	300c      	adds	r0, #12
 800f3e2:	f7ff f800 	bl	800e3e6 <memcpy>
 800f3e6:	4621      	mov	r1, r4
 800f3e8:	4638      	mov	r0, r7
 800f3ea:	f7ff ffa5 	bl	800f338 <_Bfree>
 800f3ee:	4644      	mov	r4, r8
 800f3f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f3f4:	3501      	adds	r5, #1
 800f3f6:	615e      	str	r6, [r3, #20]
 800f3f8:	6125      	str	r5, [r4, #16]
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f400:	08011290 	.word	0x08011290
 800f404:	080112a1 	.word	0x080112a1

0800f408 <__hi0bits>:
 800f408:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f40c:	4603      	mov	r3, r0
 800f40e:	bf36      	itet	cc
 800f410:	0403      	lslcc	r3, r0, #16
 800f412:	2000      	movcs	r0, #0
 800f414:	2010      	movcc	r0, #16
 800f416:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f41a:	bf3c      	itt	cc
 800f41c:	021b      	lslcc	r3, r3, #8
 800f41e:	3008      	addcc	r0, #8
 800f420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f424:	bf3c      	itt	cc
 800f426:	011b      	lslcc	r3, r3, #4
 800f428:	3004      	addcc	r0, #4
 800f42a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f42e:	bf3c      	itt	cc
 800f430:	009b      	lslcc	r3, r3, #2
 800f432:	3002      	addcc	r0, #2
 800f434:	2b00      	cmp	r3, #0
 800f436:	db05      	blt.n	800f444 <__hi0bits+0x3c>
 800f438:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f43c:	f100 0001 	add.w	r0, r0, #1
 800f440:	bf08      	it	eq
 800f442:	2020      	moveq	r0, #32
 800f444:	4770      	bx	lr

0800f446 <__lo0bits>:
 800f446:	6803      	ldr	r3, [r0, #0]
 800f448:	4602      	mov	r2, r0
 800f44a:	f013 0007 	ands.w	r0, r3, #7
 800f44e:	d00b      	beq.n	800f468 <__lo0bits+0x22>
 800f450:	07d9      	lsls	r1, r3, #31
 800f452:	d421      	bmi.n	800f498 <__lo0bits+0x52>
 800f454:	0798      	lsls	r0, r3, #30
 800f456:	bf49      	itett	mi
 800f458:	085b      	lsrmi	r3, r3, #1
 800f45a:	089b      	lsrpl	r3, r3, #2
 800f45c:	2001      	movmi	r0, #1
 800f45e:	6013      	strmi	r3, [r2, #0]
 800f460:	bf5c      	itt	pl
 800f462:	6013      	strpl	r3, [r2, #0]
 800f464:	2002      	movpl	r0, #2
 800f466:	4770      	bx	lr
 800f468:	b299      	uxth	r1, r3
 800f46a:	b909      	cbnz	r1, 800f470 <__lo0bits+0x2a>
 800f46c:	0c1b      	lsrs	r3, r3, #16
 800f46e:	2010      	movs	r0, #16
 800f470:	b2d9      	uxtb	r1, r3
 800f472:	b909      	cbnz	r1, 800f478 <__lo0bits+0x32>
 800f474:	3008      	adds	r0, #8
 800f476:	0a1b      	lsrs	r3, r3, #8
 800f478:	0719      	lsls	r1, r3, #28
 800f47a:	bf04      	itt	eq
 800f47c:	091b      	lsreq	r3, r3, #4
 800f47e:	3004      	addeq	r0, #4
 800f480:	0799      	lsls	r1, r3, #30
 800f482:	bf04      	itt	eq
 800f484:	089b      	lsreq	r3, r3, #2
 800f486:	3002      	addeq	r0, #2
 800f488:	07d9      	lsls	r1, r3, #31
 800f48a:	d403      	bmi.n	800f494 <__lo0bits+0x4e>
 800f48c:	085b      	lsrs	r3, r3, #1
 800f48e:	f100 0001 	add.w	r0, r0, #1
 800f492:	d003      	beq.n	800f49c <__lo0bits+0x56>
 800f494:	6013      	str	r3, [r2, #0]
 800f496:	4770      	bx	lr
 800f498:	2000      	movs	r0, #0
 800f49a:	4770      	bx	lr
 800f49c:	2020      	movs	r0, #32
 800f49e:	4770      	bx	lr

0800f4a0 <__i2b>:
 800f4a0:	b510      	push	{r4, lr}
 800f4a2:	460c      	mov	r4, r1
 800f4a4:	2101      	movs	r1, #1
 800f4a6:	f7ff ff07 	bl	800f2b8 <_Balloc>
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	b928      	cbnz	r0, 800f4ba <__i2b+0x1a>
 800f4ae:	4b05      	ldr	r3, [pc, #20]	@ (800f4c4 <__i2b+0x24>)
 800f4b0:	4805      	ldr	r0, [pc, #20]	@ (800f4c8 <__i2b+0x28>)
 800f4b2:	f240 1145 	movw	r1, #325	@ 0x145
 800f4b6:	f000 fca7 	bl	800fe08 <__assert_func>
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	6144      	str	r4, [r0, #20]
 800f4be:	6103      	str	r3, [r0, #16]
 800f4c0:	bd10      	pop	{r4, pc}
 800f4c2:	bf00      	nop
 800f4c4:	08011290 	.word	0x08011290
 800f4c8:	080112a1 	.word	0x080112a1

0800f4cc <__multiply>:
 800f4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d0:	4617      	mov	r7, r2
 800f4d2:	690a      	ldr	r2, [r1, #16]
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	bfa8      	it	ge
 800f4da:	463b      	movge	r3, r7
 800f4dc:	4689      	mov	r9, r1
 800f4de:	bfa4      	itt	ge
 800f4e0:	460f      	movge	r7, r1
 800f4e2:	4699      	movge	r9, r3
 800f4e4:	693d      	ldr	r5, [r7, #16]
 800f4e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	6879      	ldr	r1, [r7, #4]
 800f4ee:	eb05 060a 	add.w	r6, r5, sl
 800f4f2:	42b3      	cmp	r3, r6
 800f4f4:	b085      	sub	sp, #20
 800f4f6:	bfb8      	it	lt
 800f4f8:	3101      	addlt	r1, #1
 800f4fa:	f7ff fedd 	bl	800f2b8 <_Balloc>
 800f4fe:	b930      	cbnz	r0, 800f50e <__multiply+0x42>
 800f500:	4602      	mov	r2, r0
 800f502:	4b41      	ldr	r3, [pc, #260]	@ (800f608 <__multiply+0x13c>)
 800f504:	4841      	ldr	r0, [pc, #260]	@ (800f60c <__multiply+0x140>)
 800f506:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f50a:	f000 fc7d 	bl	800fe08 <__assert_func>
 800f50e:	f100 0414 	add.w	r4, r0, #20
 800f512:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f516:	4623      	mov	r3, r4
 800f518:	2200      	movs	r2, #0
 800f51a:	4573      	cmp	r3, lr
 800f51c:	d320      	bcc.n	800f560 <__multiply+0x94>
 800f51e:	f107 0814 	add.w	r8, r7, #20
 800f522:	f109 0114 	add.w	r1, r9, #20
 800f526:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f52a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f52e:	9302      	str	r3, [sp, #8]
 800f530:	1beb      	subs	r3, r5, r7
 800f532:	3b15      	subs	r3, #21
 800f534:	f023 0303 	bic.w	r3, r3, #3
 800f538:	3304      	adds	r3, #4
 800f53a:	3715      	adds	r7, #21
 800f53c:	42bd      	cmp	r5, r7
 800f53e:	bf38      	it	cc
 800f540:	2304      	movcc	r3, #4
 800f542:	9301      	str	r3, [sp, #4]
 800f544:	9b02      	ldr	r3, [sp, #8]
 800f546:	9103      	str	r1, [sp, #12]
 800f548:	428b      	cmp	r3, r1
 800f54a:	d80c      	bhi.n	800f566 <__multiply+0x9a>
 800f54c:	2e00      	cmp	r6, #0
 800f54e:	dd03      	ble.n	800f558 <__multiply+0x8c>
 800f550:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f554:	2b00      	cmp	r3, #0
 800f556:	d055      	beq.n	800f604 <__multiply+0x138>
 800f558:	6106      	str	r6, [r0, #16]
 800f55a:	b005      	add	sp, #20
 800f55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f560:	f843 2b04 	str.w	r2, [r3], #4
 800f564:	e7d9      	b.n	800f51a <__multiply+0x4e>
 800f566:	f8b1 a000 	ldrh.w	sl, [r1]
 800f56a:	f1ba 0f00 	cmp.w	sl, #0
 800f56e:	d01f      	beq.n	800f5b0 <__multiply+0xe4>
 800f570:	46c4      	mov	ip, r8
 800f572:	46a1      	mov	r9, r4
 800f574:	2700      	movs	r7, #0
 800f576:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f57a:	f8d9 3000 	ldr.w	r3, [r9]
 800f57e:	fa1f fb82 	uxth.w	fp, r2
 800f582:	b29b      	uxth	r3, r3
 800f584:	fb0a 330b 	mla	r3, sl, fp, r3
 800f588:	443b      	add	r3, r7
 800f58a:	f8d9 7000 	ldr.w	r7, [r9]
 800f58e:	0c12      	lsrs	r2, r2, #16
 800f590:	0c3f      	lsrs	r7, r7, #16
 800f592:	fb0a 7202 	mla	r2, sl, r2, r7
 800f596:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f5a0:	4565      	cmp	r5, ip
 800f5a2:	f849 3b04 	str.w	r3, [r9], #4
 800f5a6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f5aa:	d8e4      	bhi.n	800f576 <__multiply+0xaa>
 800f5ac:	9b01      	ldr	r3, [sp, #4]
 800f5ae:	50e7      	str	r7, [r4, r3]
 800f5b0:	9b03      	ldr	r3, [sp, #12]
 800f5b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f5b6:	3104      	adds	r1, #4
 800f5b8:	f1b9 0f00 	cmp.w	r9, #0
 800f5bc:	d020      	beq.n	800f600 <__multiply+0x134>
 800f5be:	6823      	ldr	r3, [r4, #0]
 800f5c0:	4647      	mov	r7, r8
 800f5c2:	46a4      	mov	ip, r4
 800f5c4:	f04f 0a00 	mov.w	sl, #0
 800f5c8:	f8b7 b000 	ldrh.w	fp, [r7]
 800f5cc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f5d0:	fb09 220b 	mla	r2, r9, fp, r2
 800f5d4:	4452      	add	r2, sl
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f5dc:	f84c 3b04 	str.w	r3, [ip], #4
 800f5e0:	f857 3b04 	ldr.w	r3, [r7], #4
 800f5e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f5e8:	f8bc 3000 	ldrh.w	r3, [ip]
 800f5ec:	fb09 330a 	mla	r3, r9, sl, r3
 800f5f0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f5f4:	42bd      	cmp	r5, r7
 800f5f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f5fa:	d8e5      	bhi.n	800f5c8 <__multiply+0xfc>
 800f5fc:	9a01      	ldr	r2, [sp, #4]
 800f5fe:	50a3      	str	r3, [r4, r2]
 800f600:	3404      	adds	r4, #4
 800f602:	e79f      	b.n	800f544 <__multiply+0x78>
 800f604:	3e01      	subs	r6, #1
 800f606:	e7a1      	b.n	800f54c <__multiply+0x80>
 800f608:	08011290 	.word	0x08011290
 800f60c:	080112a1 	.word	0x080112a1

0800f610 <__pow5mult>:
 800f610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f614:	4615      	mov	r5, r2
 800f616:	f012 0203 	ands.w	r2, r2, #3
 800f61a:	4607      	mov	r7, r0
 800f61c:	460e      	mov	r6, r1
 800f61e:	d007      	beq.n	800f630 <__pow5mult+0x20>
 800f620:	4c25      	ldr	r4, [pc, #148]	@ (800f6b8 <__pow5mult+0xa8>)
 800f622:	3a01      	subs	r2, #1
 800f624:	2300      	movs	r3, #0
 800f626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f62a:	f7ff fea7 	bl	800f37c <__multadd>
 800f62e:	4606      	mov	r6, r0
 800f630:	10ad      	asrs	r5, r5, #2
 800f632:	d03d      	beq.n	800f6b0 <__pow5mult+0xa0>
 800f634:	69fc      	ldr	r4, [r7, #28]
 800f636:	b97c      	cbnz	r4, 800f658 <__pow5mult+0x48>
 800f638:	2010      	movs	r0, #16
 800f63a:	f7ff fd87 	bl	800f14c <malloc>
 800f63e:	4602      	mov	r2, r0
 800f640:	61f8      	str	r0, [r7, #28]
 800f642:	b928      	cbnz	r0, 800f650 <__pow5mult+0x40>
 800f644:	4b1d      	ldr	r3, [pc, #116]	@ (800f6bc <__pow5mult+0xac>)
 800f646:	481e      	ldr	r0, [pc, #120]	@ (800f6c0 <__pow5mult+0xb0>)
 800f648:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f64c:	f000 fbdc 	bl	800fe08 <__assert_func>
 800f650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f654:	6004      	str	r4, [r0, #0]
 800f656:	60c4      	str	r4, [r0, #12]
 800f658:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f65c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f660:	b94c      	cbnz	r4, 800f676 <__pow5mult+0x66>
 800f662:	f240 2171 	movw	r1, #625	@ 0x271
 800f666:	4638      	mov	r0, r7
 800f668:	f7ff ff1a 	bl	800f4a0 <__i2b>
 800f66c:	2300      	movs	r3, #0
 800f66e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f672:	4604      	mov	r4, r0
 800f674:	6003      	str	r3, [r0, #0]
 800f676:	f04f 0900 	mov.w	r9, #0
 800f67a:	07eb      	lsls	r3, r5, #31
 800f67c:	d50a      	bpl.n	800f694 <__pow5mult+0x84>
 800f67e:	4631      	mov	r1, r6
 800f680:	4622      	mov	r2, r4
 800f682:	4638      	mov	r0, r7
 800f684:	f7ff ff22 	bl	800f4cc <__multiply>
 800f688:	4631      	mov	r1, r6
 800f68a:	4680      	mov	r8, r0
 800f68c:	4638      	mov	r0, r7
 800f68e:	f7ff fe53 	bl	800f338 <_Bfree>
 800f692:	4646      	mov	r6, r8
 800f694:	106d      	asrs	r5, r5, #1
 800f696:	d00b      	beq.n	800f6b0 <__pow5mult+0xa0>
 800f698:	6820      	ldr	r0, [r4, #0]
 800f69a:	b938      	cbnz	r0, 800f6ac <__pow5mult+0x9c>
 800f69c:	4622      	mov	r2, r4
 800f69e:	4621      	mov	r1, r4
 800f6a0:	4638      	mov	r0, r7
 800f6a2:	f7ff ff13 	bl	800f4cc <__multiply>
 800f6a6:	6020      	str	r0, [r4, #0]
 800f6a8:	f8c0 9000 	str.w	r9, [r0]
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	e7e4      	b.n	800f67a <__pow5mult+0x6a>
 800f6b0:	4630      	mov	r0, r6
 800f6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6b6:	bf00      	nop
 800f6b8:	08011354 	.word	0x08011354
 800f6bc:	08011221 	.word	0x08011221
 800f6c0:	080112a1 	.word	0x080112a1

0800f6c4 <__lshift>:
 800f6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6c8:	460c      	mov	r4, r1
 800f6ca:	6849      	ldr	r1, [r1, #4]
 800f6cc:	6923      	ldr	r3, [r4, #16]
 800f6ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f6d2:	68a3      	ldr	r3, [r4, #8]
 800f6d4:	4607      	mov	r7, r0
 800f6d6:	4691      	mov	r9, r2
 800f6d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f6dc:	f108 0601 	add.w	r6, r8, #1
 800f6e0:	42b3      	cmp	r3, r6
 800f6e2:	db0b      	blt.n	800f6fc <__lshift+0x38>
 800f6e4:	4638      	mov	r0, r7
 800f6e6:	f7ff fde7 	bl	800f2b8 <_Balloc>
 800f6ea:	4605      	mov	r5, r0
 800f6ec:	b948      	cbnz	r0, 800f702 <__lshift+0x3e>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	4b28      	ldr	r3, [pc, #160]	@ (800f794 <__lshift+0xd0>)
 800f6f2:	4829      	ldr	r0, [pc, #164]	@ (800f798 <__lshift+0xd4>)
 800f6f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f6f8:	f000 fb86 	bl	800fe08 <__assert_func>
 800f6fc:	3101      	adds	r1, #1
 800f6fe:	005b      	lsls	r3, r3, #1
 800f700:	e7ee      	b.n	800f6e0 <__lshift+0x1c>
 800f702:	2300      	movs	r3, #0
 800f704:	f100 0114 	add.w	r1, r0, #20
 800f708:	f100 0210 	add.w	r2, r0, #16
 800f70c:	4618      	mov	r0, r3
 800f70e:	4553      	cmp	r3, sl
 800f710:	db33      	blt.n	800f77a <__lshift+0xb6>
 800f712:	6920      	ldr	r0, [r4, #16]
 800f714:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f718:	f104 0314 	add.w	r3, r4, #20
 800f71c:	f019 091f 	ands.w	r9, r9, #31
 800f720:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f724:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f728:	d02b      	beq.n	800f782 <__lshift+0xbe>
 800f72a:	f1c9 0e20 	rsb	lr, r9, #32
 800f72e:	468a      	mov	sl, r1
 800f730:	2200      	movs	r2, #0
 800f732:	6818      	ldr	r0, [r3, #0]
 800f734:	fa00 f009 	lsl.w	r0, r0, r9
 800f738:	4310      	orrs	r0, r2
 800f73a:	f84a 0b04 	str.w	r0, [sl], #4
 800f73e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f742:	459c      	cmp	ip, r3
 800f744:	fa22 f20e 	lsr.w	r2, r2, lr
 800f748:	d8f3      	bhi.n	800f732 <__lshift+0x6e>
 800f74a:	ebac 0304 	sub.w	r3, ip, r4
 800f74e:	3b15      	subs	r3, #21
 800f750:	f023 0303 	bic.w	r3, r3, #3
 800f754:	3304      	adds	r3, #4
 800f756:	f104 0015 	add.w	r0, r4, #21
 800f75a:	4560      	cmp	r0, ip
 800f75c:	bf88      	it	hi
 800f75e:	2304      	movhi	r3, #4
 800f760:	50ca      	str	r2, [r1, r3]
 800f762:	b10a      	cbz	r2, 800f768 <__lshift+0xa4>
 800f764:	f108 0602 	add.w	r6, r8, #2
 800f768:	3e01      	subs	r6, #1
 800f76a:	4638      	mov	r0, r7
 800f76c:	612e      	str	r6, [r5, #16]
 800f76e:	4621      	mov	r1, r4
 800f770:	f7ff fde2 	bl	800f338 <_Bfree>
 800f774:	4628      	mov	r0, r5
 800f776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f77a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f77e:	3301      	adds	r3, #1
 800f780:	e7c5      	b.n	800f70e <__lshift+0x4a>
 800f782:	3904      	subs	r1, #4
 800f784:	f853 2b04 	ldr.w	r2, [r3], #4
 800f788:	f841 2f04 	str.w	r2, [r1, #4]!
 800f78c:	459c      	cmp	ip, r3
 800f78e:	d8f9      	bhi.n	800f784 <__lshift+0xc0>
 800f790:	e7ea      	b.n	800f768 <__lshift+0xa4>
 800f792:	bf00      	nop
 800f794:	08011290 	.word	0x08011290
 800f798:	080112a1 	.word	0x080112a1

0800f79c <__mcmp>:
 800f79c:	690a      	ldr	r2, [r1, #16]
 800f79e:	4603      	mov	r3, r0
 800f7a0:	6900      	ldr	r0, [r0, #16]
 800f7a2:	1a80      	subs	r0, r0, r2
 800f7a4:	b530      	push	{r4, r5, lr}
 800f7a6:	d10e      	bne.n	800f7c6 <__mcmp+0x2a>
 800f7a8:	3314      	adds	r3, #20
 800f7aa:	3114      	adds	r1, #20
 800f7ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f7b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f7b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f7b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f7bc:	4295      	cmp	r5, r2
 800f7be:	d003      	beq.n	800f7c8 <__mcmp+0x2c>
 800f7c0:	d205      	bcs.n	800f7ce <__mcmp+0x32>
 800f7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c6:	bd30      	pop	{r4, r5, pc}
 800f7c8:	42a3      	cmp	r3, r4
 800f7ca:	d3f3      	bcc.n	800f7b4 <__mcmp+0x18>
 800f7cc:	e7fb      	b.n	800f7c6 <__mcmp+0x2a>
 800f7ce:	2001      	movs	r0, #1
 800f7d0:	e7f9      	b.n	800f7c6 <__mcmp+0x2a>
	...

0800f7d4 <__mdiff>:
 800f7d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d8:	4689      	mov	r9, r1
 800f7da:	4606      	mov	r6, r0
 800f7dc:	4611      	mov	r1, r2
 800f7de:	4648      	mov	r0, r9
 800f7e0:	4614      	mov	r4, r2
 800f7e2:	f7ff ffdb 	bl	800f79c <__mcmp>
 800f7e6:	1e05      	subs	r5, r0, #0
 800f7e8:	d112      	bne.n	800f810 <__mdiff+0x3c>
 800f7ea:	4629      	mov	r1, r5
 800f7ec:	4630      	mov	r0, r6
 800f7ee:	f7ff fd63 	bl	800f2b8 <_Balloc>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	b928      	cbnz	r0, 800f802 <__mdiff+0x2e>
 800f7f6:	4b3f      	ldr	r3, [pc, #252]	@ (800f8f4 <__mdiff+0x120>)
 800f7f8:	f240 2137 	movw	r1, #567	@ 0x237
 800f7fc:	483e      	ldr	r0, [pc, #248]	@ (800f8f8 <__mdiff+0x124>)
 800f7fe:	f000 fb03 	bl	800fe08 <__assert_func>
 800f802:	2301      	movs	r3, #1
 800f804:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f808:	4610      	mov	r0, r2
 800f80a:	b003      	add	sp, #12
 800f80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f810:	bfbc      	itt	lt
 800f812:	464b      	movlt	r3, r9
 800f814:	46a1      	movlt	r9, r4
 800f816:	4630      	mov	r0, r6
 800f818:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f81c:	bfba      	itte	lt
 800f81e:	461c      	movlt	r4, r3
 800f820:	2501      	movlt	r5, #1
 800f822:	2500      	movge	r5, #0
 800f824:	f7ff fd48 	bl	800f2b8 <_Balloc>
 800f828:	4602      	mov	r2, r0
 800f82a:	b918      	cbnz	r0, 800f834 <__mdiff+0x60>
 800f82c:	4b31      	ldr	r3, [pc, #196]	@ (800f8f4 <__mdiff+0x120>)
 800f82e:	f240 2145 	movw	r1, #581	@ 0x245
 800f832:	e7e3      	b.n	800f7fc <__mdiff+0x28>
 800f834:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f838:	6926      	ldr	r6, [r4, #16]
 800f83a:	60c5      	str	r5, [r0, #12]
 800f83c:	f109 0310 	add.w	r3, r9, #16
 800f840:	f109 0514 	add.w	r5, r9, #20
 800f844:	f104 0e14 	add.w	lr, r4, #20
 800f848:	f100 0b14 	add.w	fp, r0, #20
 800f84c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f850:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f854:	9301      	str	r3, [sp, #4]
 800f856:	46d9      	mov	r9, fp
 800f858:	f04f 0c00 	mov.w	ip, #0
 800f85c:	9b01      	ldr	r3, [sp, #4]
 800f85e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f862:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f866:	9301      	str	r3, [sp, #4]
 800f868:	fa1f f38a 	uxth.w	r3, sl
 800f86c:	4619      	mov	r1, r3
 800f86e:	b283      	uxth	r3, r0
 800f870:	1acb      	subs	r3, r1, r3
 800f872:	0c00      	lsrs	r0, r0, #16
 800f874:	4463      	add	r3, ip
 800f876:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f87a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f87e:	b29b      	uxth	r3, r3
 800f880:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f884:	4576      	cmp	r6, lr
 800f886:	f849 3b04 	str.w	r3, [r9], #4
 800f88a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f88e:	d8e5      	bhi.n	800f85c <__mdiff+0x88>
 800f890:	1b33      	subs	r3, r6, r4
 800f892:	3b15      	subs	r3, #21
 800f894:	f023 0303 	bic.w	r3, r3, #3
 800f898:	3415      	adds	r4, #21
 800f89a:	3304      	adds	r3, #4
 800f89c:	42a6      	cmp	r6, r4
 800f89e:	bf38      	it	cc
 800f8a0:	2304      	movcc	r3, #4
 800f8a2:	441d      	add	r5, r3
 800f8a4:	445b      	add	r3, fp
 800f8a6:	461e      	mov	r6, r3
 800f8a8:	462c      	mov	r4, r5
 800f8aa:	4544      	cmp	r4, r8
 800f8ac:	d30e      	bcc.n	800f8cc <__mdiff+0xf8>
 800f8ae:	f108 0103 	add.w	r1, r8, #3
 800f8b2:	1b49      	subs	r1, r1, r5
 800f8b4:	f021 0103 	bic.w	r1, r1, #3
 800f8b8:	3d03      	subs	r5, #3
 800f8ba:	45a8      	cmp	r8, r5
 800f8bc:	bf38      	it	cc
 800f8be:	2100      	movcc	r1, #0
 800f8c0:	440b      	add	r3, r1
 800f8c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f8c6:	b191      	cbz	r1, 800f8ee <__mdiff+0x11a>
 800f8c8:	6117      	str	r7, [r2, #16]
 800f8ca:	e79d      	b.n	800f808 <__mdiff+0x34>
 800f8cc:	f854 1b04 	ldr.w	r1, [r4], #4
 800f8d0:	46e6      	mov	lr, ip
 800f8d2:	0c08      	lsrs	r0, r1, #16
 800f8d4:	fa1c fc81 	uxtah	ip, ip, r1
 800f8d8:	4471      	add	r1, lr
 800f8da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f8de:	b289      	uxth	r1, r1
 800f8e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f8e4:	f846 1b04 	str.w	r1, [r6], #4
 800f8e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f8ec:	e7dd      	b.n	800f8aa <__mdiff+0xd6>
 800f8ee:	3f01      	subs	r7, #1
 800f8f0:	e7e7      	b.n	800f8c2 <__mdiff+0xee>
 800f8f2:	bf00      	nop
 800f8f4:	08011290 	.word	0x08011290
 800f8f8:	080112a1 	.word	0x080112a1

0800f8fc <__d2b>:
 800f8fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f900:	460f      	mov	r7, r1
 800f902:	2101      	movs	r1, #1
 800f904:	ec59 8b10 	vmov	r8, r9, d0
 800f908:	4616      	mov	r6, r2
 800f90a:	f7ff fcd5 	bl	800f2b8 <_Balloc>
 800f90e:	4604      	mov	r4, r0
 800f910:	b930      	cbnz	r0, 800f920 <__d2b+0x24>
 800f912:	4602      	mov	r2, r0
 800f914:	4b23      	ldr	r3, [pc, #140]	@ (800f9a4 <__d2b+0xa8>)
 800f916:	4824      	ldr	r0, [pc, #144]	@ (800f9a8 <__d2b+0xac>)
 800f918:	f240 310f 	movw	r1, #783	@ 0x30f
 800f91c:	f000 fa74 	bl	800fe08 <__assert_func>
 800f920:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f924:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f928:	b10d      	cbz	r5, 800f92e <__d2b+0x32>
 800f92a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f92e:	9301      	str	r3, [sp, #4]
 800f930:	f1b8 0300 	subs.w	r3, r8, #0
 800f934:	d023      	beq.n	800f97e <__d2b+0x82>
 800f936:	4668      	mov	r0, sp
 800f938:	9300      	str	r3, [sp, #0]
 800f93a:	f7ff fd84 	bl	800f446 <__lo0bits>
 800f93e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f942:	b1d0      	cbz	r0, 800f97a <__d2b+0x7e>
 800f944:	f1c0 0320 	rsb	r3, r0, #32
 800f948:	fa02 f303 	lsl.w	r3, r2, r3
 800f94c:	430b      	orrs	r3, r1
 800f94e:	40c2      	lsrs	r2, r0
 800f950:	6163      	str	r3, [r4, #20]
 800f952:	9201      	str	r2, [sp, #4]
 800f954:	9b01      	ldr	r3, [sp, #4]
 800f956:	61a3      	str	r3, [r4, #24]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	bf0c      	ite	eq
 800f95c:	2201      	moveq	r2, #1
 800f95e:	2202      	movne	r2, #2
 800f960:	6122      	str	r2, [r4, #16]
 800f962:	b1a5      	cbz	r5, 800f98e <__d2b+0x92>
 800f964:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f968:	4405      	add	r5, r0
 800f96a:	603d      	str	r5, [r7, #0]
 800f96c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f970:	6030      	str	r0, [r6, #0]
 800f972:	4620      	mov	r0, r4
 800f974:	b003      	add	sp, #12
 800f976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f97a:	6161      	str	r1, [r4, #20]
 800f97c:	e7ea      	b.n	800f954 <__d2b+0x58>
 800f97e:	a801      	add	r0, sp, #4
 800f980:	f7ff fd61 	bl	800f446 <__lo0bits>
 800f984:	9b01      	ldr	r3, [sp, #4]
 800f986:	6163      	str	r3, [r4, #20]
 800f988:	3020      	adds	r0, #32
 800f98a:	2201      	movs	r2, #1
 800f98c:	e7e8      	b.n	800f960 <__d2b+0x64>
 800f98e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f992:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f996:	6038      	str	r0, [r7, #0]
 800f998:	6918      	ldr	r0, [r3, #16]
 800f99a:	f7ff fd35 	bl	800f408 <__hi0bits>
 800f99e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f9a2:	e7e5      	b.n	800f970 <__d2b+0x74>
 800f9a4:	08011290 	.word	0x08011290
 800f9a8:	080112a1 	.word	0x080112a1

0800f9ac <__ssputs_r>:
 800f9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9b0:	688e      	ldr	r6, [r1, #8]
 800f9b2:	461f      	mov	r7, r3
 800f9b4:	42be      	cmp	r6, r7
 800f9b6:	680b      	ldr	r3, [r1, #0]
 800f9b8:	4682      	mov	sl, r0
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	4690      	mov	r8, r2
 800f9be:	d82d      	bhi.n	800fa1c <__ssputs_r+0x70>
 800f9c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f9c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f9c8:	d026      	beq.n	800fa18 <__ssputs_r+0x6c>
 800f9ca:	6965      	ldr	r5, [r4, #20]
 800f9cc:	6909      	ldr	r1, [r1, #16]
 800f9ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f9d2:	eba3 0901 	sub.w	r9, r3, r1
 800f9d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f9da:	1c7b      	adds	r3, r7, #1
 800f9dc:	444b      	add	r3, r9
 800f9de:	106d      	asrs	r5, r5, #1
 800f9e0:	429d      	cmp	r5, r3
 800f9e2:	bf38      	it	cc
 800f9e4:	461d      	movcc	r5, r3
 800f9e6:	0553      	lsls	r3, r2, #21
 800f9e8:	d527      	bpl.n	800fa3a <__ssputs_r+0x8e>
 800f9ea:	4629      	mov	r1, r5
 800f9ec:	f7ff fbd8 	bl	800f1a0 <_malloc_r>
 800f9f0:	4606      	mov	r6, r0
 800f9f2:	b360      	cbz	r0, 800fa4e <__ssputs_r+0xa2>
 800f9f4:	6921      	ldr	r1, [r4, #16]
 800f9f6:	464a      	mov	r2, r9
 800f9f8:	f7fe fcf5 	bl	800e3e6 <memcpy>
 800f9fc:	89a3      	ldrh	r3, [r4, #12]
 800f9fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fa02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa06:	81a3      	strh	r3, [r4, #12]
 800fa08:	6126      	str	r6, [r4, #16]
 800fa0a:	6165      	str	r5, [r4, #20]
 800fa0c:	444e      	add	r6, r9
 800fa0e:	eba5 0509 	sub.w	r5, r5, r9
 800fa12:	6026      	str	r6, [r4, #0]
 800fa14:	60a5      	str	r5, [r4, #8]
 800fa16:	463e      	mov	r6, r7
 800fa18:	42be      	cmp	r6, r7
 800fa1a:	d900      	bls.n	800fa1e <__ssputs_r+0x72>
 800fa1c:	463e      	mov	r6, r7
 800fa1e:	6820      	ldr	r0, [r4, #0]
 800fa20:	4632      	mov	r2, r6
 800fa22:	4641      	mov	r1, r8
 800fa24:	f000 f9c6 	bl	800fdb4 <memmove>
 800fa28:	68a3      	ldr	r3, [r4, #8]
 800fa2a:	1b9b      	subs	r3, r3, r6
 800fa2c:	60a3      	str	r3, [r4, #8]
 800fa2e:	6823      	ldr	r3, [r4, #0]
 800fa30:	4433      	add	r3, r6
 800fa32:	6023      	str	r3, [r4, #0]
 800fa34:	2000      	movs	r0, #0
 800fa36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa3a:	462a      	mov	r2, r5
 800fa3c:	f000 fa28 	bl	800fe90 <_realloc_r>
 800fa40:	4606      	mov	r6, r0
 800fa42:	2800      	cmp	r0, #0
 800fa44:	d1e0      	bne.n	800fa08 <__ssputs_r+0x5c>
 800fa46:	6921      	ldr	r1, [r4, #16]
 800fa48:	4650      	mov	r0, sl
 800fa4a:	f7ff fb35 	bl	800f0b8 <_free_r>
 800fa4e:	230c      	movs	r3, #12
 800fa50:	f8ca 3000 	str.w	r3, [sl]
 800fa54:	89a3      	ldrh	r3, [r4, #12]
 800fa56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa5a:	81a3      	strh	r3, [r4, #12]
 800fa5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa60:	e7e9      	b.n	800fa36 <__ssputs_r+0x8a>
	...

0800fa64 <_svfiprintf_r>:
 800fa64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa68:	4698      	mov	r8, r3
 800fa6a:	898b      	ldrh	r3, [r1, #12]
 800fa6c:	061b      	lsls	r3, r3, #24
 800fa6e:	b09d      	sub	sp, #116	@ 0x74
 800fa70:	4607      	mov	r7, r0
 800fa72:	460d      	mov	r5, r1
 800fa74:	4614      	mov	r4, r2
 800fa76:	d510      	bpl.n	800fa9a <_svfiprintf_r+0x36>
 800fa78:	690b      	ldr	r3, [r1, #16]
 800fa7a:	b973      	cbnz	r3, 800fa9a <_svfiprintf_r+0x36>
 800fa7c:	2140      	movs	r1, #64	@ 0x40
 800fa7e:	f7ff fb8f 	bl	800f1a0 <_malloc_r>
 800fa82:	6028      	str	r0, [r5, #0]
 800fa84:	6128      	str	r0, [r5, #16]
 800fa86:	b930      	cbnz	r0, 800fa96 <_svfiprintf_r+0x32>
 800fa88:	230c      	movs	r3, #12
 800fa8a:	603b      	str	r3, [r7, #0]
 800fa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa90:	b01d      	add	sp, #116	@ 0x74
 800fa92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa96:	2340      	movs	r3, #64	@ 0x40
 800fa98:	616b      	str	r3, [r5, #20]
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa9e:	2320      	movs	r3, #32
 800faa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800faa4:	f8cd 800c 	str.w	r8, [sp, #12]
 800faa8:	2330      	movs	r3, #48	@ 0x30
 800faaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fc48 <_svfiprintf_r+0x1e4>
 800faae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fab2:	f04f 0901 	mov.w	r9, #1
 800fab6:	4623      	mov	r3, r4
 800fab8:	469a      	mov	sl, r3
 800faba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fabe:	b10a      	cbz	r2, 800fac4 <_svfiprintf_r+0x60>
 800fac0:	2a25      	cmp	r2, #37	@ 0x25
 800fac2:	d1f9      	bne.n	800fab8 <_svfiprintf_r+0x54>
 800fac4:	ebba 0b04 	subs.w	fp, sl, r4
 800fac8:	d00b      	beq.n	800fae2 <_svfiprintf_r+0x7e>
 800faca:	465b      	mov	r3, fp
 800facc:	4622      	mov	r2, r4
 800face:	4629      	mov	r1, r5
 800fad0:	4638      	mov	r0, r7
 800fad2:	f7ff ff6b 	bl	800f9ac <__ssputs_r>
 800fad6:	3001      	adds	r0, #1
 800fad8:	f000 80a7 	beq.w	800fc2a <_svfiprintf_r+0x1c6>
 800fadc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fade:	445a      	add	r2, fp
 800fae0:	9209      	str	r2, [sp, #36]	@ 0x24
 800fae2:	f89a 3000 	ldrb.w	r3, [sl]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	f000 809f 	beq.w	800fc2a <_svfiprintf_r+0x1c6>
 800faec:	2300      	movs	r3, #0
 800faee:	f04f 32ff 	mov.w	r2, #4294967295
 800faf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800faf6:	f10a 0a01 	add.w	sl, sl, #1
 800fafa:	9304      	str	r3, [sp, #16]
 800fafc:	9307      	str	r3, [sp, #28]
 800fafe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fb02:	931a      	str	r3, [sp, #104]	@ 0x68
 800fb04:	4654      	mov	r4, sl
 800fb06:	2205      	movs	r2, #5
 800fb08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb0c:	484e      	ldr	r0, [pc, #312]	@ (800fc48 <_svfiprintf_r+0x1e4>)
 800fb0e:	f7f0 fb6f 	bl	80001f0 <memchr>
 800fb12:	9a04      	ldr	r2, [sp, #16]
 800fb14:	b9d8      	cbnz	r0, 800fb4e <_svfiprintf_r+0xea>
 800fb16:	06d0      	lsls	r0, r2, #27
 800fb18:	bf44      	itt	mi
 800fb1a:	2320      	movmi	r3, #32
 800fb1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb20:	0711      	lsls	r1, r2, #28
 800fb22:	bf44      	itt	mi
 800fb24:	232b      	movmi	r3, #43	@ 0x2b
 800fb26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb2a:	f89a 3000 	ldrb.w	r3, [sl]
 800fb2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb30:	d015      	beq.n	800fb5e <_svfiprintf_r+0xfa>
 800fb32:	9a07      	ldr	r2, [sp, #28]
 800fb34:	4654      	mov	r4, sl
 800fb36:	2000      	movs	r0, #0
 800fb38:	f04f 0c0a 	mov.w	ip, #10
 800fb3c:	4621      	mov	r1, r4
 800fb3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb42:	3b30      	subs	r3, #48	@ 0x30
 800fb44:	2b09      	cmp	r3, #9
 800fb46:	d94b      	bls.n	800fbe0 <_svfiprintf_r+0x17c>
 800fb48:	b1b0      	cbz	r0, 800fb78 <_svfiprintf_r+0x114>
 800fb4a:	9207      	str	r2, [sp, #28]
 800fb4c:	e014      	b.n	800fb78 <_svfiprintf_r+0x114>
 800fb4e:	eba0 0308 	sub.w	r3, r0, r8
 800fb52:	fa09 f303 	lsl.w	r3, r9, r3
 800fb56:	4313      	orrs	r3, r2
 800fb58:	9304      	str	r3, [sp, #16]
 800fb5a:	46a2      	mov	sl, r4
 800fb5c:	e7d2      	b.n	800fb04 <_svfiprintf_r+0xa0>
 800fb5e:	9b03      	ldr	r3, [sp, #12]
 800fb60:	1d19      	adds	r1, r3, #4
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	9103      	str	r1, [sp, #12]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	bfbb      	ittet	lt
 800fb6a:	425b      	neglt	r3, r3
 800fb6c:	f042 0202 	orrlt.w	r2, r2, #2
 800fb70:	9307      	strge	r3, [sp, #28]
 800fb72:	9307      	strlt	r3, [sp, #28]
 800fb74:	bfb8      	it	lt
 800fb76:	9204      	strlt	r2, [sp, #16]
 800fb78:	7823      	ldrb	r3, [r4, #0]
 800fb7a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb7c:	d10a      	bne.n	800fb94 <_svfiprintf_r+0x130>
 800fb7e:	7863      	ldrb	r3, [r4, #1]
 800fb80:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb82:	d132      	bne.n	800fbea <_svfiprintf_r+0x186>
 800fb84:	9b03      	ldr	r3, [sp, #12]
 800fb86:	1d1a      	adds	r2, r3, #4
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	9203      	str	r2, [sp, #12]
 800fb8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb90:	3402      	adds	r4, #2
 800fb92:	9305      	str	r3, [sp, #20]
 800fb94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fc58 <_svfiprintf_r+0x1f4>
 800fb98:	7821      	ldrb	r1, [r4, #0]
 800fb9a:	2203      	movs	r2, #3
 800fb9c:	4650      	mov	r0, sl
 800fb9e:	f7f0 fb27 	bl	80001f0 <memchr>
 800fba2:	b138      	cbz	r0, 800fbb4 <_svfiprintf_r+0x150>
 800fba4:	9b04      	ldr	r3, [sp, #16]
 800fba6:	eba0 000a 	sub.w	r0, r0, sl
 800fbaa:	2240      	movs	r2, #64	@ 0x40
 800fbac:	4082      	lsls	r2, r0
 800fbae:	4313      	orrs	r3, r2
 800fbb0:	3401      	adds	r4, #1
 800fbb2:	9304      	str	r3, [sp, #16]
 800fbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbb8:	4824      	ldr	r0, [pc, #144]	@ (800fc4c <_svfiprintf_r+0x1e8>)
 800fbba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fbbe:	2206      	movs	r2, #6
 800fbc0:	f7f0 fb16 	bl	80001f0 <memchr>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d036      	beq.n	800fc36 <_svfiprintf_r+0x1d2>
 800fbc8:	4b21      	ldr	r3, [pc, #132]	@ (800fc50 <_svfiprintf_r+0x1ec>)
 800fbca:	bb1b      	cbnz	r3, 800fc14 <_svfiprintf_r+0x1b0>
 800fbcc:	9b03      	ldr	r3, [sp, #12]
 800fbce:	3307      	adds	r3, #7
 800fbd0:	f023 0307 	bic.w	r3, r3, #7
 800fbd4:	3308      	adds	r3, #8
 800fbd6:	9303      	str	r3, [sp, #12]
 800fbd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbda:	4433      	add	r3, r6
 800fbdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbde:	e76a      	b.n	800fab6 <_svfiprintf_r+0x52>
 800fbe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbe4:	460c      	mov	r4, r1
 800fbe6:	2001      	movs	r0, #1
 800fbe8:	e7a8      	b.n	800fb3c <_svfiprintf_r+0xd8>
 800fbea:	2300      	movs	r3, #0
 800fbec:	3401      	adds	r4, #1
 800fbee:	9305      	str	r3, [sp, #20]
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	f04f 0c0a 	mov.w	ip, #10
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbfc:	3a30      	subs	r2, #48	@ 0x30
 800fbfe:	2a09      	cmp	r2, #9
 800fc00:	d903      	bls.n	800fc0a <_svfiprintf_r+0x1a6>
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d0c6      	beq.n	800fb94 <_svfiprintf_r+0x130>
 800fc06:	9105      	str	r1, [sp, #20]
 800fc08:	e7c4      	b.n	800fb94 <_svfiprintf_r+0x130>
 800fc0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc0e:	4604      	mov	r4, r0
 800fc10:	2301      	movs	r3, #1
 800fc12:	e7f0      	b.n	800fbf6 <_svfiprintf_r+0x192>
 800fc14:	ab03      	add	r3, sp, #12
 800fc16:	9300      	str	r3, [sp, #0]
 800fc18:	462a      	mov	r2, r5
 800fc1a:	4b0e      	ldr	r3, [pc, #56]	@ (800fc54 <_svfiprintf_r+0x1f0>)
 800fc1c:	a904      	add	r1, sp, #16
 800fc1e:	4638      	mov	r0, r7
 800fc20:	f7fd fe02 	bl	800d828 <_printf_float>
 800fc24:	1c42      	adds	r2, r0, #1
 800fc26:	4606      	mov	r6, r0
 800fc28:	d1d6      	bne.n	800fbd8 <_svfiprintf_r+0x174>
 800fc2a:	89ab      	ldrh	r3, [r5, #12]
 800fc2c:	065b      	lsls	r3, r3, #25
 800fc2e:	f53f af2d 	bmi.w	800fa8c <_svfiprintf_r+0x28>
 800fc32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc34:	e72c      	b.n	800fa90 <_svfiprintf_r+0x2c>
 800fc36:	ab03      	add	r3, sp, #12
 800fc38:	9300      	str	r3, [sp, #0]
 800fc3a:	462a      	mov	r2, r5
 800fc3c:	4b05      	ldr	r3, [pc, #20]	@ (800fc54 <_svfiprintf_r+0x1f0>)
 800fc3e:	a904      	add	r1, sp, #16
 800fc40:	4638      	mov	r0, r7
 800fc42:	f7fe f889 	bl	800dd58 <_printf_i>
 800fc46:	e7ed      	b.n	800fc24 <_svfiprintf_r+0x1c0>
 800fc48:	080112fa 	.word	0x080112fa
 800fc4c:	08011304 	.word	0x08011304
 800fc50:	0800d829 	.word	0x0800d829
 800fc54:	0800f9ad 	.word	0x0800f9ad
 800fc58:	08011300 	.word	0x08011300

0800fc5c <__sflush_r>:
 800fc5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc64:	0716      	lsls	r6, r2, #28
 800fc66:	4605      	mov	r5, r0
 800fc68:	460c      	mov	r4, r1
 800fc6a:	d454      	bmi.n	800fd16 <__sflush_r+0xba>
 800fc6c:	684b      	ldr	r3, [r1, #4]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	dc02      	bgt.n	800fc78 <__sflush_r+0x1c>
 800fc72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	dd48      	ble.n	800fd0a <__sflush_r+0xae>
 800fc78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fc7a:	2e00      	cmp	r6, #0
 800fc7c:	d045      	beq.n	800fd0a <__sflush_r+0xae>
 800fc7e:	2300      	movs	r3, #0
 800fc80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fc84:	682f      	ldr	r7, [r5, #0]
 800fc86:	6a21      	ldr	r1, [r4, #32]
 800fc88:	602b      	str	r3, [r5, #0]
 800fc8a:	d030      	beq.n	800fcee <__sflush_r+0x92>
 800fc8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fc8e:	89a3      	ldrh	r3, [r4, #12]
 800fc90:	0759      	lsls	r1, r3, #29
 800fc92:	d505      	bpl.n	800fca0 <__sflush_r+0x44>
 800fc94:	6863      	ldr	r3, [r4, #4]
 800fc96:	1ad2      	subs	r2, r2, r3
 800fc98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fc9a:	b10b      	cbz	r3, 800fca0 <__sflush_r+0x44>
 800fc9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fc9e:	1ad2      	subs	r2, r2, r3
 800fca0:	2300      	movs	r3, #0
 800fca2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fca4:	6a21      	ldr	r1, [r4, #32]
 800fca6:	4628      	mov	r0, r5
 800fca8:	47b0      	blx	r6
 800fcaa:	1c43      	adds	r3, r0, #1
 800fcac:	89a3      	ldrh	r3, [r4, #12]
 800fcae:	d106      	bne.n	800fcbe <__sflush_r+0x62>
 800fcb0:	6829      	ldr	r1, [r5, #0]
 800fcb2:	291d      	cmp	r1, #29
 800fcb4:	d82b      	bhi.n	800fd0e <__sflush_r+0xb2>
 800fcb6:	4a2a      	ldr	r2, [pc, #168]	@ (800fd60 <__sflush_r+0x104>)
 800fcb8:	40ca      	lsrs	r2, r1
 800fcba:	07d6      	lsls	r6, r2, #31
 800fcbc:	d527      	bpl.n	800fd0e <__sflush_r+0xb2>
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	6062      	str	r2, [r4, #4]
 800fcc2:	04d9      	lsls	r1, r3, #19
 800fcc4:	6922      	ldr	r2, [r4, #16]
 800fcc6:	6022      	str	r2, [r4, #0]
 800fcc8:	d504      	bpl.n	800fcd4 <__sflush_r+0x78>
 800fcca:	1c42      	adds	r2, r0, #1
 800fccc:	d101      	bne.n	800fcd2 <__sflush_r+0x76>
 800fcce:	682b      	ldr	r3, [r5, #0]
 800fcd0:	b903      	cbnz	r3, 800fcd4 <__sflush_r+0x78>
 800fcd2:	6560      	str	r0, [r4, #84]	@ 0x54
 800fcd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fcd6:	602f      	str	r7, [r5, #0]
 800fcd8:	b1b9      	cbz	r1, 800fd0a <__sflush_r+0xae>
 800fcda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fcde:	4299      	cmp	r1, r3
 800fce0:	d002      	beq.n	800fce8 <__sflush_r+0x8c>
 800fce2:	4628      	mov	r0, r5
 800fce4:	f7ff f9e8 	bl	800f0b8 <_free_r>
 800fce8:	2300      	movs	r3, #0
 800fcea:	6363      	str	r3, [r4, #52]	@ 0x34
 800fcec:	e00d      	b.n	800fd0a <__sflush_r+0xae>
 800fcee:	2301      	movs	r3, #1
 800fcf0:	4628      	mov	r0, r5
 800fcf2:	47b0      	blx	r6
 800fcf4:	4602      	mov	r2, r0
 800fcf6:	1c50      	adds	r0, r2, #1
 800fcf8:	d1c9      	bne.n	800fc8e <__sflush_r+0x32>
 800fcfa:	682b      	ldr	r3, [r5, #0]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d0c6      	beq.n	800fc8e <__sflush_r+0x32>
 800fd00:	2b1d      	cmp	r3, #29
 800fd02:	d001      	beq.n	800fd08 <__sflush_r+0xac>
 800fd04:	2b16      	cmp	r3, #22
 800fd06:	d11e      	bne.n	800fd46 <__sflush_r+0xea>
 800fd08:	602f      	str	r7, [r5, #0]
 800fd0a:	2000      	movs	r0, #0
 800fd0c:	e022      	b.n	800fd54 <__sflush_r+0xf8>
 800fd0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd12:	b21b      	sxth	r3, r3
 800fd14:	e01b      	b.n	800fd4e <__sflush_r+0xf2>
 800fd16:	690f      	ldr	r7, [r1, #16]
 800fd18:	2f00      	cmp	r7, #0
 800fd1a:	d0f6      	beq.n	800fd0a <__sflush_r+0xae>
 800fd1c:	0793      	lsls	r3, r2, #30
 800fd1e:	680e      	ldr	r6, [r1, #0]
 800fd20:	bf08      	it	eq
 800fd22:	694b      	ldreq	r3, [r1, #20]
 800fd24:	600f      	str	r7, [r1, #0]
 800fd26:	bf18      	it	ne
 800fd28:	2300      	movne	r3, #0
 800fd2a:	eba6 0807 	sub.w	r8, r6, r7
 800fd2e:	608b      	str	r3, [r1, #8]
 800fd30:	f1b8 0f00 	cmp.w	r8, #0
 800fd34:	dde9      	ble.n	800fd0a <__sflush_r+0xae>
 800fd36:	6a21      	ldr	r1, [r4, #32]
 800fd38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fd3a:	4643      	mov	r3, r8
 800fd3c:	463a      	mov	r2, r7
 800fd3e:	4628      	mov	r0, r5
 800fd40:	47b0      	blx	r6
 800fd42:	2800      	cmp	r0, #0
 800fd44:	dc08      	bgt.n	800fd58 <__sflush_r+0xfc>
 800fd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd4e:	81a3      	strh	r3, [r4, #12]
 800fd50:	f04f 30ff 	mov.w	r0, #4294967295
 800fd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd58:	4407      	add	r7, r0
 800fd5a:	eba8 0800 	sub.w	r8, r8, r0
 800fd5e:	e7e7      	b.n	800fd30 <__sflush_r+0xd4>
 800fd60:	20400001 	.word	0x20400001

0800fd64 <_fflush_r>:
 800fd64:	b538      	push	{r3, r4, r5, lr}
 800fd66:	690b      	ldr	r3, [r1, #16]
 800fd68:	4605      	mov	r5, r0
 800fd6a:	460c      	mov	r4, r1
 800fd6c:	b913      	cbnz	r3, 800fd74 <_fflush_r+0x10>
 800fd6e:	2500      	movs	r5, #0
 800fd70:	4628      	mov	r0, r5
 800fd72:	bd38      	pop	{r3, r4, r5, pc}
 800fd74:	b118      	cbz	r0, 800fd7e <_fflush_r+0x1a>
 800fd76:	6a03      	ldr	r3, [r0, #32]
 800fd78:	b90b      	cbnz	r3, 800fd7e <_fflush_r+0x1a>
 800fd7a:	f7fe f997 	bl	800e0ac <__sinit>
 800fd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d0f3      	beq.n	800fd6e <_fflush_r+0xa>
 800fd86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fd88:	07d0      	lsls	r0, r2, #31
 800fd8a:	d404      	bmi.n	800fd96 <_fflush_r+0x32>
 800fd8c:	0599      	lsls	r1, r3, #22
 800fd8e:	d402      	bmi.n	800fd96 <_fflush_r+0x32>
 800fd90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fd92:	f7fe fb26 	bl	800e3e2 <__retarget_lock_acquire_recursive>
 800fd96:	4628      	mov	r0, r5
 800fd98:	4621      	mov	r1, r4
 800fd9a:	f7ff ff5f 	bl	800fc5c <__sflush_r>
 800fd9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fda0:	07da      	lsls	r2, r3, #31
 800fda2:	4605      	mov	r5, r0
 800fda4:	d4e4      	bmi.n	800fd70 <_fflush_r+0xc>
 800fda6:	89a3      	ldrh	r3, [r4, #12]
 800fda8:	059b      	lsls	r3, r3, #22
 800fdaa:	d4e1      	bmi.n	800fd70 <_fflush_r+0xc>
 800fdac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fdae:	f7fe fb19 	bl	800e3e4 <__retarget_lock_release_recursive>
 800fdb2:	e7dd      	b.n	800fd70 <_fflush_r+0xc>

0800fdb4 <memmove>:
 800fdb4:	4288      	cmp	r0, r1
 800fdb6:	b510      	push	{r4, lr}
 800fdb8:	eb01 0402 	add.w	r4, r1, r2
 800fdbc:	d902      	bls.n	800fdc4 <memmove+0x10>
 800fdbe:	4284      	cmp	r4, r0
 800fdc0:	4623      	mov	r3, r4
 800fdc2:	d807      	bhi.n	800fdd4 <memmove+0x20>
 800fdc4:	1e43      	subs	r3, r0, #1
 800fdc6:	42a1      	cmp	r1, r4
 800fdc8:	d008      	beq.n	800fddc <memmove+0x28>
 800fdca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fdd2:	e7f8      	b.n	800fdc6 <memmove+0x12>
 800fdd4:	4402      	add	r2, r0
 800fdd6:	4601      	mov	r1, r0
 800fdd8:	428a      	cmp	r2, r1
 800fdda:	d100      	bne.n	800fdde <memmove+0x2a>
 800fddc:	bd10      	pop	{r4, pc}
 800fdde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fde2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fde6:	e7f7      	b.n	800fdd8 <memmove+0x24>

0800fde8 <_sbrk_r>:
 800fde8:	b538      	push	{r3, r4, r5, lr}
 800fdea:	4d06      	ldr	r5, [pc, #24]	@ (800fe04 <_sbrk_r+0x1c>)
 800fdec:	2300      	movs	r3, #0
 800fdee:	4604      	mov	r4, r0
 800fdf0:	4608      	mov	r0, r1
 800fdf2:	602b      	str	r3, [r5, #0]
 800fdf4:	f7f4 fc6e 	bl	80046d4 <_sbrk>
 800fdf8:	1c43      	adds	r3, r0, #1
 800fdfa:	d102      	bne.n	800fe02 <_sbrk_r+0x1a>
 800fdfc:	682b      	ldr	r3, [r5, #0]
 800fdfe:	b103      	cbz	r3, 800fe02 <_sbrk_r+0x1a>
 800fe00:	6023      	str	r3, [r4, #0]
 800fe02:	bd38      	pop	{r3, r4, r5, pc}
 800fe04:	200056c0 	.word	0x200056c0

0800fe08 <__assert_func>:
 800fe08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe0a:	4614      	mov	r4, r2
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	4b09      	ldr	r3, [pc, #36]	@ (800fe34 <__assert_func+0x2c>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	4605      	mov	r5, r0
 800fe14:	68d8      	ldr	r0, [r3, #12]
 800fe16:	b14c      	cbz	r4, 800fe2c <__assert_func+0x24>
 800fe18:	4b07      	ldr	r3, [pc, #28]	@ (800fe38 <__assert_func+0x30>)
 800fe1a:	9100      	str	r1, [sp, #0]
 800fe1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fe20:	4906      	ldr	r1, [pc, #24]	@ (800fe3c <__assert_func+0x34>)
 800fe22:	462b      	mov	r3, r5
 800fe24:	f000 f870 	bl	800ff08 <fiprintf>
 800fe28:	f000 f880 	bl	800ff2c <abort>
 800fe2c:	4b04      	ldr	r3, [pc, #16]	@ (800fe40 <__assert_func+0x38>)
 800fe2e:	461c      	mov	r4, r3
 800fe30:	e7f3      	b.n	800fe1a <__assert_func+0x12>
 800fe32:	bf00      	nop
 800fe34:	20000020 	.word	0x20000020
 800fe38:	08011315 	.word	0x08011315
 800fe3c:	08011322 	.word	0x08011322
 800fe40:	08011350 	.word	0x08011350

0800fe44 <_calloc_r>:
 800fe44:	b570      	push	{r4, r5, r6, lr}
 800fe46:	fba1 5402 	umull	r5, r4, r1, r2
 800fe4a:	b934      	cbnz	r4, 800fe5a <_calloc_r+0x16>
 800fe4c:	4629      	mov	r1, r5
 800fe4e:	f7ff f9a7 	bl	800f1a0 <_malloc_r>
 800fe52:	4606      	mov	r6, r0
 800fe54:	b928      	cbnz	r0, 800fe62 <_calloc_r+0x1e>
 800fe56:	4630      	mov	r0, r6
 800fe58:	bd70      	pop	{r4, r5, r6, pc}
 800fe5a:	220c      	movs	r2, #12
 800fe5c:	6002      	str	r2, [r0, #0]
 800fe5e:	2600      	movs	r6, #0
 800fe60:	e7f9      	b.n	800fe56 <_calloc_r+0x12>
 800fe62:	462a      	mov	r2, r5
 800fe64:	4621      	mov	r1, r4
 800fe66:	f7fe f9bc 	bl	800e1e2 <memset>
 800fe6a:	e7f4      	b.n	800fe56 <_calloc_r+0x12>

0800fe6c <__ascii_mbtowc>:
 800fe6c:	b082      	sub	sp, #8
 800fe6e:	b901      	cbnz	r1, 800fe72 <__ascii_mbtowc+0x6>
 800fe70:	a901      	add	r1, sp, #4
 800fe72:	b142      	cbz	r2, 800fe86 <__ascii_mbtowc+0x1a>
 800fe74:	b14b      	cbz	r3, 800fe8a <__ascii_mbtowc+0x1e>
 800fe76:	7813      	ldrb	r3, [r2, #0]
 800fe78:	600b      	str	r3, [r1, #0]
 800fe7a:	7812      	ldrb	r2, [r2, #0]
 800fe7c:	1e10      	subs	r0, r2, #0
 800fe7e:	bf18      	it	ne
 800fe80:	2001      	movne	r0, #1
 800fe82:	b002      	add	sp, #8
 800fe84:	4770      	bx	lr
 800fe86:	4610      	mov	r0, r2
 800fe88:	e7fb      	b.n	800fe82 <__ascii_mbtowc+0x16>
 800fe8a:	f06f 0001 	mvn.w	r0, #1
 800fe8e:	e7f8      	b.n	800fe82 <__ascii_mbtowc+0x16>

0800fe90 <_realloc_r>:
 800fe90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe94:	4607      	mov	r7, r0
 800fe96:	4614      	mov	r4, r2
 800fe98:	460d      	mov	r5, r1
 800fe9a:	b921      	cbnz	r1, 800fea6 <_realloc_r+0x16>
 800fe9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fea0:	4611      	mov	r1, r2
 800fea2:	f7ff b97d 	b.w	800f1a0 <_malloc_r>
 800fea6:	b92a      	cbnz	r2, 800feb4 <_realloc_r+0x24>
 800fea8:	f7ff f906 	bl	800f0b8 <_free_r>
 800feac:	4625      	mov	r5, r4
 800feae:	4628      	mov	r0, r5
 800feb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feb4:	f000 f841 	bl	800ff3a <_malloc_usable_size_r>
 800feb8:	4284      	cmp	r4, r0
 800feba:	4606      	mov	r6, r0
 800febc:	d802      	bhi.n	800fec4 <_realloc_r+0x34>
 800febe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fec2:	d8f4      	bhi.n	800feae <_realloc_r+0x1e>
 800fec4:	4621      	mov	r1, r4
 800fec6:	4638      	mov	r0, r7
 800fec8:	f7ff f96a 	bl	800f1a0 <_malloc_r>
 800fecc:	4680      	mov	r8, r0
 800fece:	b908      	cbnz	r0, 800fed4 <_realloc_r+0x44>
 800fed0:	4645      	mov	r5, r8
 800fed2:	e7ec      	b.n	800feae <_realloc_r+0x1e>
 800fed4:	42b4      	cmp	r4, r6
 800fed6:	4622      	mov	r2, r4
 800fed8:	4629      	mov	r1, r5
 800feda:	bf28      	it	cs
 800fedc:	4632      	movcs	r2, r6
 800fede:	f7fe fa82 	bl	800e3e6 <memcpy>
 800fee2:	4629      	mov	r1, r5
 800fee4:	4638      	mov	r0, r7
 800fee6:	f7ff f8e7 	bl	800f0b8 <_free_r>
 800feea:	e7f1      	b.n	800fed0 <_realloc_r+0x40>

0800feec <__ascii_wctomb>:
 800feec:	4603      	mov	r3, r0
 800feee:	4608      	mov	r0, r1
 800fef0:	b141      	cbz	r1, 800ff04 <__ascii_wctomb+0x18>
 800fef2:	2aff      	cmp	r2, #255	@ 0xff
 800fef4:	d904      	bls.n	800ff00 <__ascii_wctomb+0x14>
 800fef6:	228a      	movs	r2, #138	@ 0x8a
 800fef8:	601a      	str	r2, [r3, #0]
 800fefa:	f04f 30ff 	mov.w	r0, #4294967295
 800fefe:	4770      	bx	lr
 800ff00:	700a      	strb	r2, [r1, #0]
 800ff02:	2001      	movs	r0, #1
 800ff04:	4770      	bx	lr
	...

0800ff08 <fiprintf>:
 800ff08:	b40e      	push	{r1, r2, r3}
 800ff0a:	b503      	push	{r0, r1, lr}
 800ff0c:	4601      	mov	r1, r0
 800ff0e:	ab03      	add	r3, sp, #12
 800ff10:	4805      	ldr	r0, [pc, #20]	@ (800ff28 <fiprintf+0x20>)
 800ff12:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff16:	6800      	ldr	r0, [r0, #0]
 800ff18:	9301      	str	r3, [sp, #4]
 800ff1a:	f000 f83f 	bl	800ff9c <_vfiprintf_r>
 800ff1e:	b002      	add	sp, #8
 800ff20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff24:	b003      	add	sp, #12
 800ff26:	4770      	bx	lr
 800ff28:	20000020 	.word	0x20000020

0800ff2c <abort>:
 800ff2c:	b508      	push	{r3, lr}
 800ff2e:	2006      	movs	r0, #6
 800ff30:	f000 fa08 	bl	8010344 <raise>
 800ff34:	2001      	movs	r0, #1
 800ff36:	f7f4 fb55 	bl	80045e4 <_exit>

0800ff3a <_malloc_usable_size_r>:
 800ff3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff3e:	1f18      	subs	r0, r3, #4
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	bfbc      	itt	lt
 800ff44:	580b      	ldrlt	r3, [r1, r0]
 800ff46:	18c0      	addlt	r0, r0, r3
 800ff48:	4770      	bx	lr

0800ff4a <__sfputc_r>:
 800ff4a:	6893      	ldr	r3, [r2, #8]
 800ff4c:	3b01      	subs	r3, #1
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	b410      	push	{r4}
 800ff52:	6093      	str	r3, [r2, #8]
 800ff54:	da08      	bge.n	800ff68 <__sfputc_r+0x1e>
 800ff56:	6994      	ldr	r4, [r2, #24]
 800ff58:	42a3      	cmp	r3, r4
 800ff5a:	db01      	blt.n	800ff60 <__sfputc_r+0x16>
 800ff5c:	290a      	cmp	r1, #10
 800ff5e:	d103      	bne.n	800ff68 <__sfputc_r+0x1e>
 800ff60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff64:	f000 b932 	b.w	80101cc <__swbuf_r>
 800ff68:	6813      	ldr	r3, [r2, #0]
 800ff6a:	1c58      	adds	r0, r3, #1
 800ff6c:	6010      	str	r0, [r2, #0]
 800ff6e:	7019      	strb	r1, [r3, #0]
 800ff70:	4608      	mov	r0, r1
 800ff72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff76:	4770      	bx	lr

0800ff78 <__sfputs_r>:
 800ff78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff7a:	4606      	mov	r6, r0
 800ff7c:	460f      	mov	r7, r1
 800ff7e:	4614      	mov	r4, r2
 800ff80:	18d5      	adds	r5, r2, r3
 800ff82:	42ac      	cmp	r4, r5
 800ff84:	d101      	bne.n	800ff8a <__sfputs_r+0x12>
 800ff86:	2000      	movs	r0, #0
 800ff88:	e007      	b.n	800ff9a <__sfputs_r+0x22>
 800ff8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff8e:	463a      	mov	r2, r7
 800ff90:	4630      	mov	r0, r6
 800ff92:	f7ff ffda 	bl	800ff4a <__sfputc_r>
 800ff96:	1c43      	adds	r3, r0, #1
 800ff98:	d1f3      	bne.n	800ff82 <__sfputs_r+0xa>
 800ff9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ff9c <_vfiprintf_r>:
 800ff9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa0:	460d      	mov	r5, r1
 800ffa2:	b09d      	sub	sp, #116	@ 0x74
 800ffa4:	4614      	mov	r4, r2
 800ffa6:	4698      	mov	r8, r3
 800ffa8:	4606      	mov	r6, r0
 800ffaa:	b118      	cbz	r0, 800ffb4 <_vfiprintf_r+0x18>
 800ffac:	6a03      	ldr	r3, [r0, #32]
 800ffae:	b90b      	cbnz	r3, 800ffb4 <_vfiprintf_r+0x18>
 800ffb0:	f7fe f87c 	bl	800e0ac <__sinit>
 800ffb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ffb6:	07d9      	lsls	r1, r3, #31
 800ffb8:	d405      	bmi.n	800ffc6 <_vfiprintf_r+0x2a>
 800ffba:	89ab      	ldrh	r3, [r5, #12]
 800ffbc:	059a      	lsls	r2, r3, #22
 800ffbe:	d402      	bmi.n	800ffc6 <_vfiprintf_r+0x2a>
 800ffc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ffc2:	f7fe fa0e 	bl	800e3e2 <__retarget_lock_acquire_recursive>
 800ffc6:	89ab      	ldrh	r3, [r5, #12]
 800ffc8:	071b      	lsls	r3, r3, #28
 800ffca:	d501      	bpl.n	800ffd0 <_vfiprintf_r+0x34>
 800ffcc:	692b      	ldr	r3, [r5, #16]
 800ffce:	b99b      	cbnz	r3, 800fff8 <_vfiprintf_r+0x5c>
 800ffd0:	4629      	mov	r1, r5
 800ffd2:	4630      	mov	r0, r6
 800ffd4:	f000 f938 	bl	8010248 <__swsetup_r>
 800ffd8:	b170      	cbz	r0, 800fff8 <_vfiprintf_r+0x5c>
 800ffda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ffdc:	07dc      	lsls	r4, r3, #31
 800ffde:	d504      	bpl.n	800ffea <_vfiprintf_r+0x4e>
 800ffe0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffe4:	b01d      	add	sp, #116	@ 0x74
 800ffe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffea:	89ab      	ldrh	r3, [r5, #12]
 800ffec:	0598      	lsls	r0, r3, #22
 800ffee:	d4f7      	bmi.n	800ffe0 <_vfiprintf_r+0x44>
 800fff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fff2:	f7fe f9f7 	bl	800e3e4 <__retarget_lock_release_recursive>
 800fff6:	e7f3      	b.n	800ffe0 <_vfiprintf_r+0x44>
 800fff8:	2300      	movs	r3, #0
 800fffa:	9309      	str	r3, [sp, #36]	@ 0x24
 800fffc:	2320      	movs	r3, #32
 800fffe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010002:	f8cd 800c 	str.w	r8, [sp, #12]
 8010006:	2330      	movs	r3, #48	@ 0x30
 8010008:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80101b8 <_vfiprintf_r+0x21c>
 801000c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010010:	f04f 0901 	mov.w	r9, #1
 8010014:	4623      	mov	r3, r4
 8010016:	469a      	mov	sl, r3
 8010018:	f813 2b01 	ldrb.w	r2, [r3], #1
 801001c:	b10a      	cbz	r2, 8010022 <_vfiprintf_r+0x86>
 801001e:	2a25      	cmp	r2, #37	@ 0x25
 8010020:	d1f9      	bne.n	8010016 <_vfiprintf_r+0x7a>
 8010022:	ebba 0b04 	subs.w	fp, sl, r4
 8010026:	d00b      	beq.n	8010040 <_vfiprintf_r+0xa4>
 8010028:	465b      	mov	r3, fp
 801002a:	4622      	mov	r2, r4
 801002c:	4629      	mov	r1, r5
 801002e:	4630      	mov	r0, r6
 8010030:	f7ff ffa2 	bl	800ff78 <__sfputs_r>
 8010034:	3001      	adds	r0, #1
 8010036:	f000 80a7 	beq.w	8010188 <_vfiprintf_r+0x1ec>
 801003a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801003c:	445a      	add	r2, fp
 801003e:	9209      	str	r2, [sp, #36]	@ 0x24
 8010040:	f89a 3000 	ldrb.w	r3, [sl]
 8010044:	2b00      	cmp	r3, #0
 8010046:	f000 809f 	beq.w	8010188 <_vfiprintf_r+0x1ec>
 801004a:	2300      	movs	r3, #0
 801004c:	f04f 32ff 	mov.w	r2, #4294967295
 8010050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010054:	f10a 0a01 	add.w	sl, sl, #1
 8010058:	9304      	str	r3, [sp, #16]
 801005a:	9307      	str	r3, [sp, #28]
 801005c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010060:	931a      	str	r3, [sp, #104]	@ 0x68
 8010062:	4654      	mov	r4, sl
 8010064:	2205      	movs	r2, #5
 8010066:	f814 1b01 	ldrb.w	r1, [r4], #1
 801006a:	4853      	ldr	r0, [pc, #332]	@ (80101b8 <_vfiprintf_r+0x21c>)
 801006c:	f7f0 f8c0 	bl	80001f0 <memchr>
 8010070:	9a04      	ldr	r2, [sp, #16]
 8010072:	b9d8      	cbnz	r0, 80100ac <_vfiprintf_r+0x110>
 8010074:	06d1      	lsls	r1, r2, #27
 8010076:	bf44      	itt	mi
 8010078:	2320      	movmi	r3, #32
 801007a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801007e:	0713      	lsls	r3, r2, #28
 8010080:	bf44      	itt	mi
 8010082:	232b      	movmi	r3, #43	@ 0x2b
 8010084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010088:	f89a 3000 	ldrb.w	r3, [sl]
 801008c:	2b2a      	cmp	r3, #42	@ 0x2a
 801008e:	d015      	beq.n	80100bc <_vfiprintf_r+0x120>
 8010090:	9a07      	ldr	r2, [sp, #28]
 8010092:	4654      	mov	r4, sl
 8010094:	2000      	movs	r0, #0
 8010096:	f04f 0c0a 	mov.w	ip, #10
 801009a:	4621      	mov	r1, r4
 801009c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100a0:	3b30      	subs	r3, #48	@ 0x30
 80100a2:	2b09      	cmp	r3, #9
 80100a4:	d94b      	bls.n	801013e <_vfiprintf_r+0x1a2>
 80100a6:	b1b0      	cbz	r0, 80100d6 <_vfiprintf_r+0x13a>
 80100a8:	9207      	str	r2, [sp, #28]
 80100aa:	e014      	b.n	80100d6 <_vfiprintf_r+0x13a>
 80100ac:	eba0 0308 	sub.w	r3, r0, r8
 80100b0:	fa09 f303 	lsl.w	r3, r9, r3
 80100b4:	4313      	orrs	r3, r2
 80100b6:	9304      	str	r3, [sp, #16]
 80100b8:	46a2      	mov	sl, r4
 80100ba:	e7d2      	b.n	8010062 <_vfiprintf_r+0xc6>
 80100bc:	9b03      	ldr	r3, [sp, #12]
 80100be:	1d19      	adds	r1, r3, #4
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	9103      	str	r1, [sp, #12]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	bfbb      	ittet	lt
 80100c8:	425b      	neglt	r3, r3
 80100ca:	f042 0202 	orrlt.w	r2, r2, #2
 80100ce:	9307      	strge	r3, [sp, #28]
 80100d0:	9307      	strlt	r3, [sp, #28]
 80100d2:	bfb8      	it	lt
 80100d4:	9204      	strlt	r2, [sp, #16]
 80100d6:	7823      	ldrb	r3, [r4, #0]
 80100d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80100da:	d10a      	bne.n	80100f2 <_vfiprintf_r+0x156>
 80100dc:	7863      	ldrb	r3, [r4, #1]
 80100de:	2b2a      	cmp	r3, #42	@ 0x2a
 80100e0:	d132      	bne.n	8010148 <_vfiprintf_r+0x1ac>
 80100e2:	9b03      	ldr	r3, [sp, #12]
 80100e4:	1d1a      	adds	r2, r3, #4
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	9203      	str	r2, [sp, #12]
 80100ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80100ee:	3402      	adds	r4, #2
 80100f0:	9305      	str	r3, [sp, #20]
 80100f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80101c8 <_vfiprintf_r+0x22c>
 80100f6:	7821      	ldrb	r1, [r4, #0]
 80100f8:	2203      	movs	r2, #3
 80100fa:	4650      	mov	r0, sl
 80100fc:	f7f0 f878 	bl	80001f0 <memchr>
 8010100:	b138      	cbz	r0, 8010112 <_vfiprintf_r+0x176>
 8010102:	9b04      	ldr	r3, [sp, #16]
 8010104:	eba0 000a 	sub.w	r0, r0, sl
 8010108:	2240      	movs	r2, #64	@ 0x40
 801010a:	4082      	lsls	r2, r0
 801010c:	4313      	orrs	r3, r2
 801010e:	3401      	adds	r4, #1
 8010110:	9304      	str	r3, [sp, #16]
 8010112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010116:	4829      	ldr	r0, [pc, #164]	@ (80101bc <_vfiprintf_r+0x220>)
 8010118:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801011c:	2206      	movs	r2, #6
 801011e:	f7f0 f867 	bl	80001f0 <memchr>
 8010122:	2800      	cmp	r0, #0
 8010124:	d03f      	beq.n	80101a6 <_vfiprintf_r+0x20a>
 8010126:	4b26      	ldr	r3, [pc, #152]	@ (80101c0 <_vfiprintf_r+0x224>)
 8010128:	bb1b      	cbnz	r3, 8010172 <_vfiprintf_r+0x1d6>
 801012a:	9b03      	ldr	r3, [sp, #12]
 801012c:	3307      	adds	r3, #7
 801012e:	f023 0307 	bic.w	r3, r3, #7
 8010132:	3308      	adds	r3, #8
 8010134:	9303      	str	r3, [sp, #12]
 8010136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010138:	443b      	add	r3, r7
 801013a:	9309      	str	r3, [sp, #36]	@ 0x24
 801013c:	e76a      	b.n	8010014 <_vfiprintf_r+0x78>
 801013e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010142:	460c      	mov	r4, r1
 8010144:	2001      	movs	r0, #1
 8010146:	e7a8      	b.n	801009a <_vfiprintf_r+0xfe>
 8010148:	2300      	movs	r3, #0
 801014a:	3401      	adds	r4, #1
 801014c:	9305      	str	r3, [sp, #20]
 801014e:	4619      	mov	r1, r3
 8010150:	f04f 0c0a 	mov.w	ip, #10
 8010154:	4620      	mov	r0, r4
 8010156:	f810 2b01 	ldrb.w	r2, [r0], #1
 801015a:	3a30      	subs	r2, #48	@ 0x30
 801015c:	2a09      	cmp	r2, #9
 801015e:	d903      	bls.n	8010168 <_vfiprintf_r+0x1cc>
 8010160:	2b00      	cmp	r3, #0
 8010162:	d0c6      	beq.n	80100f2 <_vfiprintf_r+0x156>
 8010164:	9105      	str	r1, [sp, #20]
 8010166:	e7c4      	b.n	80100f2 <_vfiprintf_r+0x156>
 8010168:	fb0c 2101 	mla	r1, ip, r1, r2
 801016c:	4604      	mov	r4, r0
 801016e:	2301      	movs	r3, #1
 8010170:	e7f0      	b.n	8010154 <_vfiprintf_r+0x1b8>
 8010172:	ab03      	add	r3, sp, #12
 8010174:	9300      	str	r3, [sp, #0]
 8010176:	462a      	mov	r2, r5
 8010178:	4b12      	ldr	r3, [pc, #72]	@ (80101c4 <_vfiprintf_r+0x228>)
 801017a:	a904      	add	r1, sp, #16
 801017c:	4630      	mov	r0, r6
 801017e:	f7fd fb53 	bl	800d828 <_printf_float>
 8010182:	4607      	mov	r7, r0
 8010184:	1c78      	adds	r0, r7, #1
 8010186:	d1d6      	bne.n	8010136 <_vfiprintf_r+0x19a>
 8010188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801018a:	07d9      	lsls	r1, r3, #31
 801018c:	d405      	bmi.n	801019a <_vfiprintf_r+0x1fe>
 801018e:	89ab      	ldrh	r3, [r5, #12]
 8010190:	059a      	lsls	r2, r3, #22
 8010192:	d402      	bmi.n	801019a <_vfiprintf_r+0x1fe>
 8010194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010196:	f7fe f925 	bl	800e3e4 <__retarget_lock_release_recursive>
 801019a:	89ab      	ldrh	r3, [r5, #12]
 801019c:	065b      	lsls	r3, r3, #25
 801019e:	f53f af1f 	bmi.w	800ffe0 <_vfiprintf_r+0x44>
 80101a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80101a4:	e71e      	b.n	800ffe4 <_vfiprintf_r+0x48>
 80101a6:	ab03      	add	r3, sp, #12
 80101a8:	9300      	str	r3, [sp, #0]
 80101aa:	462a      	mov	r2, r5
 80101ac:	4b05      	ldr	r3, [pc, #20]	@ (80101c4 <_vfiprintf_r+0x228>)
 80101ae:	a904      	add	r1, sp, #16
 80101b0:	4630      	mov	r0, r6
 80101b2:	f7fd fdd1 	bl	800dd58 <_printf_i>
 80101b6:	e7e4      	b.n	8010182 <_vfiprintf_r+0x1e6>
 80101b8:	080112fa 	.word	0x080112fa
 80101bc:	08011304 	.word	0x08011304
 80101c0:	0800d829 	.word	0x0800d829
 80101c4:	0800ff79 	.word	0x0800ff79
 80101c8:	08011300 	.word	0x08011300

080101cc <__swbuf_r>:
 80101cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ce:	460e      	mov	r6, r1
 80101d0:	4614      	mov	r4, r2
 80101d2:	4605      	mov	r5, r0
 80101d4:	b118      	cbz	r0, 80101de <__swbuf_r+0x12>
 80101d6:	6a03      	ldr	r3, [r0, #32]
 80101d8:	b90b      	cbnz	r3, 80101de <__swbuf_r+0x12>
 80101da:	f7fd ff67 	bl	800e0ac <__sinit>
 80101de:	69a3      	ldr	r3, [r4, #24]
 80101e0:	60a3      	str	r3, [r4, #8]
 80101e2:	89a3      	ldrh	r3, [r4, #12]
 80101e4:	071a      	lsls	r2, r3, #28
 80101e6:	d501      	bpl.n	80101ec <__swbuf_r+0x20>
 80101e8:	6923      	ldr	r3, [r4, #16]
 80101ea:	b943      	cbnz	r3, 80101fe <__swbuf_r+0x32>
 80101ec:	4621      	mov	r1, r4
 80101ee:	4628      	mov	r0, r5
 80101f0:	f000 f82a 	bl	8010248 <__swsetup_r>
 80101f4:	b118      	cbz	r0, 80101fe <__swbuf_r+0x32>
 80101f6:	f04f 37ff 	mov.w	r7, #4294967295
 80101fa:	4638      	mov	r0, r7
 80101fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101fe:	6823      	ldr	r3, [r4, #0]
 8010200:	6922      	ldr	r2, [r4, #16]
 8010202:	1a98      	subs	r0, r3, r2
 8010204:	6963      	ldr	r3, [r4, #20]
 8010206:	b2f6      	uxtb	r6, r6
 8010208:	4283      	cmp	r3, r0
 801020a:	4637      	mov	r7, r6
 801020c:	dc05      	bgt.n	801021a <__swbuf_r+0x4e>
 801020e:	4621      	mov	r1, r4
 8010210:	4628      	mov	r0, r5
 8010212:	f7ff fda7 	bl	800fd64 <_fflush_r>
 8010216:	2800      	cmp	r0, #0
 8010218:	d1ed      	bne.n	80101f6 <__swbuf_r+0x2a>
 801021a:	68a3      	ldr	r3, [r4, #8]
 801021c:	3b01      	subs	r3, #1
 801021e:	60a3      	str	r3, [r4, #8]
 8010220:	6823      	ldr	r3, [r4, #0]
 8010222:	1c5a      	adds	r2, r3, #1
 8010224:	6022      	str	r2, [r4, #0]
 8010226:	701e      	strb	r6, [r3, #0]
 8010228:	6962      	ldr	r2, [r4, #20]
 801022a:	1c43      	adds	r3, r0, #1
 801022c:	429a      	cmp	r2, r3
 801022e:	d004      	beq.n	801023a <__swbuf_r+0x6e>
 8010230:	89a3      	ldrh	r3, [r4, #12]
 8010232:	07db      	lsls	r3, r3, #31
 8010234:	d5e1      	bpl.n	80101fa <__swbuf_r+0x2e>
 8010236:	2e0a      	cmp	r6, #10
 8010238:	d1df      	bne.n	80101fa <__swbuf_r+0x2e>
 801023a:	4621      	mov	r1, r4
 801023c:	4628      	mov	r0, r5
 801023e:	f7ff fd91 	bl	800fd64 <_fflush_r>
 8010242:	2800      	cmp	r0, #0
 8010244:	d0d9      	beq.n	80101fa <__swbuf_r+0x2e>
 8010246:	e7d6      	b.n	80101f6 <__swbuf_r+0x2a>

08010248 <__swsetup_r>:
 8010248:	b538      	push	{r3, r4, r5, lr}
 801024a:	4b29      	ldr	r3, [pc, #164]	@ (80102f0 <__swsetup_r+0xa8>)
 801024c:	4605      	mov	r5, r0
 801024e:	6818      	ldr	r0, [r3, #0]
 8010250:	460c      	mov	r4, r1
 8010252:	b118      	cbz	r0, 801025c <__swsetup_r+0x14>
 8010254:	6a03      	ldr	r3, [r0, #32]
 8010256:	b90b      	cbnz	r3, 801025c <__swsetup_r+0x14>
 8010258:	f7fd ff28 	bl	800e0ac <__sinit>
 801025c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010260:	0719      	lsls	r1, r3, #28
 8010262:	d422      	bmi.n	80102aa <__swsetup_r+0x62>
 8010264:	06da      	lsls	r2, r3, #27
 8010266:	d407      	bmi.n	8010278 <__swsetup_r+0x30>
 8010268:	2209      	movs	r2, #9
 801026a:	602a      	str	r2, [r5, #0]
 801026c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010270:	81a3      	strh	r3, [r4, #12]
 8010272:	f04f 30ff 	mov.w	r0, #4294967295
 8010276:	e033      	b.n	80102e0 <__swsetup_r+0x98>
 8010278:	0758      	lsls	r0, r3, #29
 801027a:	d512      	bpl.n	80102a2 <__swsetup_r+0x5a>
 801027c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801027e:	b141      	cbz	r1, 8010292 <__swsetup_r+0x4a>
 8010280:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010284:	4299      	cmp	r1, r3
 8010286:	d002      	beq.n	801028e <__swsetup_r+0x46>
 8010288:	4628      	mov	r0, r5
 801028a:	f7fe ff15 	bl	800f0b8 <_free_r>
 801028e:	2300      	movs	r3, #0
 8010290:	6363      	str	r3, [r4, #52]	@ 0x34
 8010292:	89a3      	ldrh	r3, [r4, #12]
 8010294:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010298:	81a3      	strh	r3, [r4, #12]
 801029a:	2300      	movs	r3, #0
 801029c:	6063      	str	r3, [r4, #4]
 801029e:	6923      	ldr	r3, [r4, #16]
 80102a0:	6023      	str	r3, [r4, #0]
 80102a2:	89a3      	ldrh	r3, [r4, #12]
 80102a4:	f043 0308 	orr.w	r3, r3, #8
 80102a8:	81a3      	strh	r3, [r4, #12]
 80102aa:	6923      	ldr	r3, [r4, #16]
 80102ac:	b94b      	cbnz	r3, 80102c2 <__swsetup_r+0x7a>
 80102ae:	89a3      	ldrh	r3, [r4, #12]
 80102b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80102b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80102b8:	d003      	beq.n	80102c2 <__swsetup_r+0x7a>
 80102ba:	4621      	mov	r1, r4
 80102bc:	4628      	mov	r0, r5
 80102be:	f000 f883 	bl	80103c8 <__smakebuf_r>
 80102c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102c6:	f013 0201 	ands.w	r2, r3, #1
 80102ca:	d00a      	beq.n	80102e2 <__swsetup_r+0x9a>
 80102cc:	2200      	movs	r2, #0
 80102ce:	60a2      	str	r2, [r4, #8]
 80102d0:	6962      	ldr	r2, [r4, #20]
 80102d2:	4252      	negs	r2, r2
 80102d4:	61a2      	str	r2, [r4, #24]
 80102d6:	6922      	ldr	r2, [r4, #16]
 80102d8:	b942      	cbnz	r2, 80102ec <__swsetup_r+0xa4>
 80102da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80102de:	d1c5      	bne.n	801026c <__swsetup_r+0x24>
 80102e0:	bd38      	pop	{r3, r4, r5, pc}
 80102e2:	0799      	lsls	r1, r3, #30
 80102e4:	bf58      	it	pl
 80102e6:	6962      	ldrpl	r2, [r4, #20]
 80102e8:	60a2      	str	r2, [r4, #8]
 80102ea:	e7f4      	b.n	80102d6 <__swsetup_r+0x8e>
 80102ec:	2000      	movs	r0, #0
 80102ee:	e7f7      	b.n	80102e0 <__swsetup_r+0x98>
 80102f0:	20000020 	.word	0x20000020

080102f4 <_raise_r>:
 80102f4:	291f      	cmp	r1, #31
 80102f6:	b538      	push	{r3, r4, r5, lr}
 80102f8:	4605      	mov	r5, r0
 80102fa:	460c      	mov	r4, r1
 80102fc:	d904      	bls.n	8010308 <_raise_r+0x14>
 80102fe:	2316      	movs	r3, #22
 8010300:	6003      	str	r3, [r0, #0]
 8010302:	f04f 30ff 	mov.w	r0, #4294967295
 8010306:	bd38      	pop	{r3, r4, r5, pc}
 8010308:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801030a:	b112      	cbz	r2, 8010312 <_raise_r+0x1e>
 801030c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010310:	b94b      	cbnz	r3, 8010326 <_raise_r+0x32>
 8010312:	4628      	mov	r0, r5
 8010314:	f000 f830 	bl	8010378 <_getpid_r>
 8010318:	4622      	mov	r2, r4
 801031a:	4601      	mov	r1, r0
 801031c:	4628      	mov	r0, r5
 801031e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010322:	f000 b817 	b.w	8010354 <_kill_r>
 8010326:	2b01      	cmp	r3, #1
 8010328:	d00a      	beq.n	8010340 <_raise_r+0x4c>
 801032a:	1c59      	adds	r1, r3, #1
 801032c:	d103      	bne.n	8010336 <_raise_r+0x42>
 801032e:	2316      	movs	r3, #22
 8010330:	6003      	str	r3, [r0, #0]
 8010332:	2001      	movs	r0, #1
 8010334:	e7e7      	b.n	8010306 <_raise_r+0x12>
 8010336:	2100      	movs	r1, #0
 8010338:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801033c:	4620      	mov	r0, r4
 801033e:	4798      	blx	r3
 8010340:	2000      	movs	r0, #0
 8010342:	e7e0      	b.n	8010306 <_raise_r+0x12>

08010344 <raise>:
 8010344:	4b02      	ldr	r3, [pc, #8]	@ (8010350 <raise+0xc>)
 8010346:	4601      	mov	r1, r0
 8010348:	6818      	ldr	r0, [r3, #0]
 801034a:	f7ff bfd3 	b.w	80102f4 <_raise_r>
 801034e:	bf00      	nop
 8010350:	20000020 	.word	0x20000020

08010354 <_kill_r>:
 8010354:	b538      	push	{r3, r4, r5, lr}
 8010356:	4d07      	ldr	r5, [pc, #28]	@ (8010374 <_kill_r+0x20>)
 8010358:	2300      	movs	r3, #0
 801035a:	4604      	mov	r4, r0
 801035c:	4608      	mov	r0, r1
 801035e:	4611      	mov	r1, r2
 8010360:	602b      	str	r3, [r5, #0]
 8010362:	f7f4 f92f 	bl	80045c4 <_kill>
 8010366:	1c43      	adds	r3, r0, #1
 8010368:	d102      	bne.n	8010370 <_kill_r+0x1c>
 801036a:	682b      	ldr	r3, [r5, #0]
 801036c:	b103      	cbz	r3, 8010370 <_kill_r+0x1c>
 801036e:	6023      	str	r3, [r4, #0]
 8010370:	bd38      	pop	{r3, r4, r5, pc}
 8010372:	bf00      	nop
 8010374:	200056c0 	.word	0x200056c0

08010378 <_getpid_r>:
 8010378:	f7f4 b91c 	b.w	80045b4 <_getpid>

0801037c <__swhatbuf_r>:
 801037c:	b570      	push	{r4, r5, r6, lr}
 801037e:	460c      	mov	r4, r1
 8010380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010384:	2900      	cmp	r1, #0
 8010386:	b096      	sub	sp, #88	@ 0x58
 8010388:	4615      	mov	r5, r2
 801038a:	461e      	mov	r6, r3
 801038c:	da0d      	bge.n	80103aa <__swhatbuf_r+0x2e>
 801038e:	89a3      	ldrh	r3, [r4, #12]
 8010390:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010394:	f04f 0100 	mov.w	r1, #0
 8010398:	bf14      	ite	ne
 801039a:	2340      	movne	r3, #64	@ 0x40
 801039c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80103a0:	2000      	movs	r0, #0
 80103a2:	6031      	str	r1, [r6, #0]
 80103a4:	602b      	str	r3, [r5, #0]
 80103a6:	b016      	add	sp, #88	@ 0x58
 80103a8:	bd70      	pop	{r4, r5, r6, pc}
 80103aa:	466a      	mov	r2, sp
 80103ac:	f000 f848 	bl	8010440 <_fstat_r>
 80103b0:	2800      	cmp	r0, #0
 80103b2:	dbec      	blt.n	801038e <__swhatbuf_r+0x12>
 80103b4:	9901      	ldr	r1, [sp, #4]
 80103b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80103ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80103be:	4259      	negs	r1, r3
 80103c0:	4159      	adcs	r1, r3
 80103c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80103c6:	e7eb      	b.n	80103a0 <__swhatbuf_r+0x24>

080103c8 <__smakebuf_r>:
 80103c8:	898b      	ldrh	r3, [r1, #12]
 80103ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103cc:	079d      	lsls	r5, r3, #30
 80103ce:	4606      	mov	r6, r0
 80103d0:	460c      	mov	r4, r1
 80103d2:	d507      	bpl.n	80103e4 <__smakebuf_r+0x1c>
 80103d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80103d8:	6023      	str	r3, [r4, #0]
 80103da:	6123      	str	r3, [r4, #16]
 80103dc:	2301      	movs	r3, #1
 80103de:	6163      	str	r3, [r4, #20]
 80103e0:	b003      	add	sp, #12
 80103e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103e4:	ab01      	add	r3, sp, #4
 80103e6:	466a      	mov	r2, sp
 80103e8:	f7ff ffc8 	bl	801037c <__swhatbuf_r>
 80103ec:	9f00      	ldr	r7, [sp, #0]
 80103ee:	4605      	mov	r5, r0
 80103f0:	4639      	mov	r1, r7
 80103f2:	4630      	mov	r0, r6
 80103f4:	f7fe fed4 	bl	800f1a0 <_malloc_r>
 80103f8:	b948      	cbnz	r0, 801040e <__smakebuf_r+0x46>
 80103fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103fe:	059a      	lsls	r2, r3, #22
 8010400:	d4ee      	bmi.n	80103e0 <__smakebuf_r+0x18>
 8010402:	f023 0303 	bic.w	r3, r3, #3
 8010406:	f043 0302 	orr.w	r3, r3, #2
 801040a:	81a3      	strh	r3, [r4, #12]
 801040c:	e7e2      	b.n	80103d4 <__smakebuf_r+0xc>
 801040e:	89a3      	ldrh	r3, [r4, #12]
 8010410:	6020      	str	r0, [r4, #0]
 8010412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010416:	81a3      	strh	r3, [r4, #12]
 8010418:	9b01      	ldr	r3, [sp, #4]
 801041a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801041e:	b15b      	cbz	r3, 8010438 <__smakebuf_r+0x70>
 8010420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010424:	4630      	mov	r0, r6
 8010426:	f000 f81d 	bl	8010464 <_isatty_r>
 801042a:	b128      	cbz	r0, 8010438 <__smakebuf_r+0x70>
 801042c:	89a3      	ldrh	r3, [r4, #12]
 801042e:	f023 0303 	bic.w	r3, r3, #3
 8010432:	f043 0301 	orr.w	r3, r3, #1
 8010436:	81a3      	strh	r3, [r4, #12]
 8010438:	89a3      	ldrh	r3, [r4, #12]
 801043a:	431d      	orrs	r5, r3
 801043c:	81a5      	strh	r5, [r4, #12]
 801043e:	e7cf      	b.n	80103e0 <__smakebuf_r+0x18>

08010440 <_fstat_r>:
 8010440:	b538      	push	{r3, r4, r5, lr}
 8010442:	4d07      	ldr	r5, [pc, #28]	@ (8010460 <_fstat_r+0x20>)
 8010444:	2300      	movs	r3, #0
 8010446:	4604      	mov	r4, r0
 8010448:	4608      	mov	r0, r1
 801044a:	4611      	mov	r1, r2
 801044c:	602b      	str	r3, [r5, #0]
 801044e:	f7f4 f919 	bl	8004684 <_fstat>
 8010452:	1c43      	adds	r3, r0, #1
 8010454:	d102      	bne.n	801045c <_fstat_r+0x1c>
 8010456:	682b      	ldr	r3, [r5, #0]
 8010458:	b103      	cbz	r3, 801045c <_fstat_r+0x1c>
 801045a:	6023      	str	r3, [r4, #0]
 801045c:	bd38      	pop	{r3, r4, r5, pc}
 801045e:	bf00      	nop
 8010460:	200056c0 	.word	0x200056c0

08010464 <_isatty_r>:
 8010464:	b538      	push	{r3, r4, r5, lr}
 8010466:	4d06      	ldr	r5, [pc, #24]	@ (8010480 <_isatty_r+0x1c>)
 8010468:	2300      	movs	r3, #0
 801046a:	4604      	mov	r4, r0
 801046c:	4608      	mov	r0, r1
 801046e:	602b      	str	r3, [r5, #0]
 8010470:	f7f4 f918 	bl	80046a4 <_isatty>
 8010474:	1c43      	adds	r3, r0, #1
 8010476:	d102      	bne.n	801047e <_isatty_r+0x1a>
 8010478:	682b      	ldr	r3, [r5, #0]
 801047a:	b103      	cbz	r3, 801047e <_isatty_r+0x1a>
 801047c:	6023      	str	r3, [r4, #0]
 801047e:	bd38      	pop	{r3, r4, r5, pc}
 8010480:	200056c0 	.word	0x200056c0

08010484 <_init>:
 8010484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010486:	bf00      	nop
 8010488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801048a:	bc08      	pop	{r3}
 801048c:	469e      	mov	lr, r3
 801048e:	4770      	bx	lr

08010490 <_fini>:
 8010490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010492:	bf00      	nop
 8010494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010496:	bc08      	pop	{r3}
 8010498:	469e      	mov	lr, r3
 801049a:	4770      	bx	lr
